From d39fa6365f67827f3e8b6189a08cbcc0db5b5494 Mon Sep 17 00:00:00 2001
From: gayan <gayan@puppet.gayan.org>
Date: Thu, 31 Jul 2014 11:18:37 +0530
Subject: [PATCH 01/30] updates

---
 NOTICE                                             |   2 +-
 README.md                                          |   6 +-
 bin                                                |   1 +
 .../org.apache.stratos.account.mgt.ui/pom.xml      |   2 +-
 components/org.apache.stratos.account.mgt/pom.xml  |   2 +-
 components/org.apache.stratos.activation/pom.xml   |   2 +-
 components/org.apache.stratos.autoscaler/pom.xml   |   4 +-
 .../stratos/autoscaler/PartitionContext.java       |   6 +-
 .../cloud/controller/CloudControllerClient.java    |  25 +-
 .../topology/AutoscalerTopologyEventReceiver.java  | 128 +--
 .../autoscaler/monitor/AbstractMonitor.java        |  25 +-
 .../stratos/autoscaler/monitor/ClusterMonitor.java | 115 ++-
 .../autoscaler/monitor/LbClusterMonitor.java       |  26 +-
 .../policy/deployers/AutoscalerPolicyDeployer.java | 114 +++
 .../policy/deployers/AutoscalerPolicyReader.java   | 113 +++
 .../autoscaler/policy/model/LoadThresholds.java    |  30 +-
 .../autoscaler/rule/RuleTasksDelegator.java        |  43 +-
 .../autoscaler/util/AutoScalerConstants.java       |   6 +
 .../stratos/autoscaler/util/AutoscalerUtil.java    |  26 +-
 .../org.apache.stratos.cartridge.agent/pom.xml     |   2 +-
 .../stratos/cartridge/agent/ArtifactCopyTask.java  |  39 +
 .../stratos/cartridge/agent/CartridgeAgent.java    | 486 ++++++----
 .../org/apache/stratos/cartridge/agent/Main.java   |  40 +-
 .../cartridge/agent/RepositoryFileListener.java    |   8 +-
 .../synchronizer/RepositoryInformation.java        |  10 +-
 .../git/impl/GitBasedArtifactRepository.java       | 746 +++++++++++-----
 .../GitDeploymentSynchronizerConstants.java        |  12 +
 .../synchronizer/git/util/Utilities.java           |   3 +
 .../agent/config/CartridgeAgentConfiguration.java  | 348 ++++++--
 .../config/configurator/JndiConfigurator.java      |  21 +-
 .../agent/data/publisher/log/Constants.java        |  13 +
 .../data/publisher/log/FileBasedLogPublisher.java  |   6 +-
 .../agent/data/publisher/log/LogPublisher.java     |   9 +-
 .../data/publisher/log/LogPublisherManager.java    |  65 +-
 .../publisher/CartridgeAgentEventPublisher.java    |  11 +-
 .../agent/extensions/DefaultExtensionHandler.java  | 992 +++++++++++++++++++++
 .../agent/extensions/ExtensionHandler.java         |  64 ++
 .../agent/util/CartridgeAgentConstants.java        |  58 +-
 .../cartridge/agent/util/ExtensionUtils.java       | 502 +++++++++--
 .../org.apache.stratos.cartridge.mgt.ui/pom.xml    |   2 +-
 components/org.apache.stratos.cli/pom.xml          | 150 +---
 .../apache/stratos/cli/RestCommandLineService.java | 316 +++++--
 .../org/apache/stratos/cli/StratosApplication.java |  61 +-
 .../stratos/cli/beans/cartridge/Cartridge.java     |   9 +
 .../cli/beans/cartridge/CartridgeInfoBean.java     |  12 +-
 .../stratos/cli/commands/SubscribeCommand.java     | 334 +++----
 .../org/apache/stratos/cli/utils/CliConstants.java |   3 -
 .../org.apache.stratos.cloud.controller/pom.xml    |   2 +-
 .../concurrent/PartitionValidatorCallable.java     |   4 +
 .../cloud/controller/iaases/AWSEC2Iaas.java        |  17 +-
 .../cloud/controller/iaases/OpenstackNovaIaas.java | 216 ++---
 .../cloud/controller/iaases/VCloudIaas.java        |   2 +-
 .../impl/CloudControllerServiceImpl.java           | 251 +++---
 .../stratos/cloud/controller/interfaces/Iaas.java  |   2 +-
 .../internal/CloudControllerDSComponent.java       |   2 +-
 .../stratos/cloud/controller/pojo/Cartridge.java   |  52 +-
 .../cloud/controller/pojo/CartridgeInfo.java       |  10 +
 .../cloud/controller/pojo/MemberContext.java       |  10 +
 .../stratos/cloud/controller/pojo/Registrant.java  |   9 -
 .../stratos/cloud/controller/pojo/Volume.java      |  24 +-
 .../publisher/CartridgeInstanceDataPublisher.java  |   4 +-
 .../cloud/controller/topology/TopologyBuilder.java |  96 +-
 .../topology/TopologyEventPublisher.java           |  27 +-
 .../cloud/controller/util/CloudControllerUtil.java |   5 +-
 .../validate/AWSEC2PartitionValidator.java         |  30 +-
 components/org.apache.stratos.common/pom.xml       |   2 +-
 .../apache/stratos/common/util/CommandUtils.java   |  30 +
 components/org.apache.stratos.deployment/pom.xml   |   2 +-
 components/org.apache.stratos.email.sender/pom.xml |   2 +-
 components/org.apache.stratos.keystore.mgt/pom.xml |   2 +-
 .../pom.xml                                        |   2 +-
 .../pom.xml                                        |   2 +-
 .../org.apache.stratos.load.balancer/pom.xml       |   2 +-
 .../balancer/LoadBalancerTenantEventReceiver.java  |   4 +
 .../LoadBalancerTopologyEventReceiver.java         | 216 +----
 .../stratos/load/balancer/RequestDelegator.java    |  10 -
 .../balancer/conf/LoadBalancerConfiguration.java   |  41 +-
 .../stratos/load/balancer/conf/util/Constants.java |   1 -
 .../load/balancer/context/LoadBalancerContext.java |   8 -
 .../context/map/HostNameAppContextMap.java         |   2 +-
 .../endpoint/TenantAwareLoadBalanceEndpoint.java   | 102 ++-
 .../load/balancer/mediators/LocationReWriter.java  |  53 +-
 .../stratos/load/balancer/util/Constants.java      |   2 +-
 .../test/LoadBalancerConfigurationTest.java        |  11 +-
 .../sample/configuration/loadbalancer1.conf        |   6 -
 .../sample/configuration/loadbalancer2.conf        |   6 -
 .../sample/configuration/loadbalancer3.conf        |   6 -
 .../org.apache.stratos.logging.view.ui/pom.xml     |   2 +-
 .../console/cartridge_info.jag                     |  10 +
 .../console/cartridge_info_sg.jag                  |  69 ++
 .../console/cartridges.jag                         |   3 +
 .../console/config/acl.json                        |   4 +-
 .../console/configure_stratos_wizard.jag           |   3 +
 .../controllers/cartridgeSubscribeSubmit.jag       |  64 +-
 .../controllers/cartridgeUnsubscribeSubmit.jag     |  29 +-
 .../console/controllers/loginSubmit.jag            |   1 +
 .../console/controllers/mycartridges.jag           |   2 +-
 .../console/index.jag                              |   5 +
 .../console/subscribe_cartridge.jag                |  14 +-
 .../console/tenant_management.jag                  |   3 +
 .../console/themes/theme1/pages/index.hbs          |   2 +-
 .../themes/theme1/partials/cartridge_info.hbs      |   8 +-
 .../themes/theme1/partials/cartridge_info_sg.hbs   | 125 +++
 .../console/themes/theme1/partials/cartridges.hbs  |   2 +-
 .../theme1/partials/configure_stratos_wizard.hbs   |  32 +-
 .../console/themes/theme1/partials/header.hbs      |   1 +
 .../themes/theme1/partials/mycartridges.hbs        |   5 +-
 .../themes/theme1/partials/subscribe_cartridge.hbs |  63 +-
 .../themes/theme1/renderers/cartridge_info.js      |   3 +-
 .../themes/theme1/renderers/cartridge_info_sg.js   |  99 ++
 .../console/themes/theme1/renderers/cartridges.js  |   7 +-
 .../themes/theme1/renderers/configure_stratos.js   |   1 +
 .../theme1/renderers/configure_stratos_wizard.js   |   1 +
 .../console/themes/theme1/renderers/dashboard.js   |   4 +-
 .../console/themes/theme1/renderers/index.js       |   5 +-
 .../themes/theme1/renderers/subscribe_cartridge.js |   6 +-
 .../themes/theme1/renderers/tenant_management.js   |   4 +-
 .../console/themes/theme1/renderers/tenant_new.js  |   3 +-
 .../console/themes/theme1/theme.js                 |  13 +
 .../console/themes/theme1/ui/css/main.css          |   9 +-
 .../console/themes/theme1/ui/img/egg-logo.png      | Bin 0 -> 8299 bytes
 .../console/themes/theme1/ui/js/mycartridges.js    |   3 +-
 .../console/util/utility.jag                       |   7 +
 .../org.apache.stratos.manager.styles/pom.xml      |   2 +-
 .../src/main/resources/META-INF/product.xml        |   6 +-
 components/org.apache.stratos.manager/pom.xml      |   2 +-
 .../manager/behaviour/CartridgeMgtBehaviour.java   |  19 +-
 .../client/CloudControllerServiceClient.java       |   5 +-
 .../org/apache/stratos/manager/dao/Cluster.java    |   6 +-
 .../stratos/manager/deploy/service/Service.java    |  11 +-
 .../deploy/service/ServiceDeploymentManager.java   |  41 +-
 .../service/multitenant/lb/DefaultLBService.java   | 110 +++
 .../service/multitenant/lb/ExistingLBService.java  |  52 ++
 .../deploy/service/multitenant/lb/LBService.java   |  69 ++
 .../multitenant/lb/MultiTenantLBService.java       |   2 +-
 .../multitenant/lb/ServiceAwareLBService.java      | 137 +++
 .../lb/category/DefaultLoadBalancerCategory.java   |  18 +-
 .../lb/category/ExistingLoadBalancerCategory.java  |   3 +-
 .../category/ServiceLevelLoadBalancerCategory.java |  11 +-
 .../manager/CartridgeSubscriptionManager.java      | 113 ++-
 .../stratos/manager/payload/BasicPayloadData.java  |  15 +-
 .../stratos/manager/payload/PayloadData.java       |  29 +-
 .../publisher/InstanceNotificationPublisher.java   |   5 +-
 .../manager/publisher/TenantSynzhronizerTask.java  |   2 +-
 .../stratos/manager/repository/Repository.java     |   9 +
 .../manager/repository/RepositoryNotification.java |   2 +-
 .../subscription/CartridgeSubscription.java        |   6 +-
 .../subscription/DataCartridgeSubscription.java    |   5 +-
 .../InternalRepoBasedCartridgeSubscription.java    |  14 +-
 .../subscription/LBCartridgeSubscription.java      |  29 +-
 .../manager/subscription/PersistenceContext.java   |  11 -
 .../manager/subscription/SubscriptionData.java     |  38 +-
 .../factory/CartridgeSubscriptionFactory.java      |   9 +-
 .../tenancy/SubscriptionMultiTenantBehaviour.java  |   5 +-
 .../utils/CartridgeSubscriptionUtils.java          |   9 +-
 .../model/TopologyClusterInformationModel.java     |  19 +
 .../manager/utils/ApplicationManagementUtil.java   |   9 +-
 .../stratos/manager/utils/RepositoryCreator.java   |   7 +-
 components/org.apache.stratos.messaging/pom.xml    |   7 +-
 .../stratos/messaging/domain/topology/Cluster.java |  10 +
 .../messaging/domain/topology/ClusterStatus.java   |  36 +
 .../instance/notifier/ArtifactUpdatedEvent.java    |   9 +
 .../tenant/SubscriptionDomainsAddedEvent.java      |  60 ++
 .../tenant/SubscriptionDomainsRemovedEvent.java    |  60 ++
 .../topology/ClusterMaintenanceModeEvent.java      |  58 ++
 .../event/topology/InstanceSpawnedEvent.java       |  12 +-
 .../event/topology/MemberTerminatedEvent.java      |  11 +
 .../ClusterMaintenanceModeEventListener.java       |  25 +
 .../SubscriptionDomainAddedMessageProcessor.java   |  28 +-
 .../SubscriptionDomainRemovedMessageProcessor.java |  28 +-
 .../ClusterMaintenanceModeMessageProcessor.java    | 115 +++
 .../topology/ClusterRemovedMessageProcessor.java   |   8 +-
 .../topology/InstanceSpawnedMessageProcessor.java  |   1 +
 .../topology/MemberTerminatedMessageProcessor.java |   6 +-
 .../topology/ServiceRemovedMessageProcessor.java   |   7 +-
 .../topology/TopologyMessageProcessorChain.java    |   6 +
 .../message/receiver/tenant/TenantManager.java     |   5 +
 .../apache/stratos/messaging/util/Constants.java   |   3 +-
 .../org.apache.stratos.metadataservice/pom.xml     | 143 +++
 .../apache/stratos/metadataservice/Constants.java  |  28 +
 .../stratos/metadataservice/ServiceHolder.java     |  84 ++
 .../org/apache/stratos/metadataservice/Utils.java  |  44 +
 .../annotation/AuthorizationAction.java            |  36 +
 .../annotation/SuperTenantService.java             |  34 +
 .../context/AuthenticationContext.java             |  40 +
 .../definition/CartridgeMetaData.java              |  41 +
 .../metadataservice/definition/PropertyBean.java   |  30 +
 .../exception/RestAPIException.java                |  70 ++
 ...AbstractAuthenticationAuthorizationHandler.java |  56 ++
 .../handlers/CookieBasedAuthenticationHandler.java |  94 ++
 .../handlers/CustomExceptionMapper.java            |  47 +
 .../handlers/CustomThrowableExceptionMapper.java   |  44 +
 .../handlers/GenericExceptionMapper.java           |  54 ++
 .../metadataservice/handlers/OAuthHandler.java     |  95 ++
 .../handlers/StratosAuthenticationHandler.java     | 156 ++++
 .../handlers/StratosAuthorizingHandler.java        | 333 +++++++
 .../oauth2/ValidationServiceClient.java            |  65 ++
 .../metadataservice/security/StratosPrincipal.java |  53 ++
 .../security/StratosSecurityContext.java           |  50 ++
 .../metadataservice/services/MetaDataAdmin.java    | 143 +++
 .../src/main/resources/axis2_client.xml            | 299 +++++++
 .../META-INF/webapp-classloading.xml               |  35 +
 .../WEB-INF/cxf-servlet.xml                        |  46 +
 .../stratosmetadataservice-test/WEB-INF/web.xml    |  40 +
 .../META-INF/webapp-classloading.xml               |  35 +
 .../stratosmetadataservice/WEB-INF/cxf-servlet.xml |  79 ++
 .../webapp/stratosmetadataservice/WEB-INF/web.xml  |  40 +
 .../pom.xml                                        |  93 ++
 .../org/apache/stratos/metadataservice/Main.java   |  13 +
 .../pom.xml                                        |   2 +-
 .../org.apache.stratos.redirector.servlet/pom.xml  |   2 +-
 components/org.apache.stratos.register.ui/pom.xml  |   2 +-
 .../org.apache.stratos.rest.endpoint/pom.xml       |   2 +-
 .../rest/endpoint/bean/CartridgeInfoBean.java      |  54 +-
 .../autoscaler/policy/autoscale/LoadAverage.java   |  36 +
 .../policy/autoscale/LoadThresholds.java           |   8 +-
 .../policy/autoscale/MemoryConsumption.java        |  36 +
 .../policy/autoscale/RequestsInFlight.java         |  36 +
 .../bean/cartridge/definition/VolumeBean.java      |   6 -
 .../bean/util/converter/PojoConverter.java         |  79 +-
 .../endpoint/handlers/CustomExceptionMapper.java   |  13 +-
 .../handlers/StratosAuthenticationHandler.java     |  43 +-
 .../stratos/rest/endpoint/mock/MockContext.java    |   4 -
 .../rest/endpoint/mock/StratosTestAdmin.java       |   9 -
 .../rest/endpoint/services/ServiceUtils.java       | 666 +++++++-------
 .../rest/endpoint/services/StratosAdmin.java       |  50 +-
 .../webapp/stratos-test/WEB-INF/cxf-servlet.xml    |  41 +-
 .../main/webapp/stratos/WEB-INF/cxf-servlet.xml    |  16 +-
 .../org.apache.stratos.sso.redirector.ui/pom.xml   |   2 +-
 .../pom.xml                                        |   2 +-
 .../org.apache.stratos.status.monitor.core/pom.xml |   2 +-
 .../org.apache.stratos.status.monitor.ui/pom.xml   |   2 +-
 .../org.apache.stratos.status.monitor/pom.xml      |   2 +-
 .../org.apache.stratos.tenant.activity.ui/pom.xml  |   2 +-
 .../org.apache.stratos.tenant.activity/pom.xml     |   2 +-
 .../org.apache.stratos.tenant.dispatcher/pom.xml   |   2 +-
 .../org.apache.stratos.tenant.mgt.core/pom.xml     |   2 +-
 .../pom.xml                                        |   2 +-
 .../org.apache.stratos.tenant.mgt.ui/pom.xml       |   2 +-
 components/org.apache.stratos.tenant.mgt/pom.xml   |   2 +-
 components/org.apache.stratos.theme.mgt.ui/pom.xml |   2 +-
 components/org.apache.stratos.theme.mgt/pom.xml    |   3 +-
 .../org.apache.stratos.validate.domain.ui/pom.xml  |   2 +-
 .../org.apache.stratos.validate.domain/pom.xml     |   2 +-
 components/pom.xml                                 |   4 +-
 .../jclouds/apis/ec2/1.7.1-stratos/pom.xml         |   4 +
 .../apis/openstack-nova/1.7.1-stratos/pom.xml      |   4 +
 .../jclouds/apis/vcloud/1.7.1-stratos/pom.xml      |   4 +
 .../jclouds/provider/aws-ec2/1.7.1-stratos/pom.xml |   8 +-
 .../aws/ec2/compute/AWSEC2TemplateOptions.java     |  12 +-
 .../jclouds/aws/ec2/domain/AWSRunningInstance.java |   2 +-
 .../aws/ec2/domain/LaunchSpecification.java        |   4 +-
 .../aws/ec2/options/AWSRunInstancesOptions.java    |   4 +-
 dependencies/org.wso2.carbon.ui/pom.xml            |   2 +-
 dependencies/pom.xml                               |   3 +-
 .../executionplans/AverageHeathRequest.xml         |  33 +-
 .../AverageInFlightRequestsFinder.xml              |  13 +-
 .../executionplans/GradientOfHealthRequest.xml     |  32 +-
 .../GradientOfRequestsInFlightFinder.xml           |  17 +-
 .../SecondDerivativeOfHealthRequest.xml            |  30 +-
 .../SecondDerivativeOfRequestsInFlightFinder.xml   |  14 +-
 extensions/cep/stratos-cep-extension/pom.xml       |   2 +-
 .../load-balancer/haproxy-extension/INSTALL.txt    |   4 +-
 .../load-balancer/haproxy-extension/README.txt     |   4 +-
 extensions/load-balancer/haproxy-extension/pom.xml |   2 +-
 .../haproxy-extension/src/main/assembly/bin.xml    |   5 +-
 .../haproxy/extension/HAProxyConfigWriter.java     |  81 +-
 .../haproxy/extension/HAProxyStatisticsReader.java |  39 +-
 .../haproxy-extension/src/main/license/LICENSE     |   9 +-
 .../src/main/templates/haproxy.cfg.template        |   9 +-
 extensions/load-balancer/pom.xml                   |   2 +-
 extensions/pom.xml                                 |   2 +-
 .../org.apache.stratos.autoscaler.feature/pom.xml  |   2 +-
 features/autoscaler/pom.xml                        |   2 +-
 .../pom.xml                                        |  15 +-
 .../src/main/resources/conf/cloud-controller.xml   |  10 +-
 features/cloud-controller/pom.xml                  |   2 +-
 .../pom.xml                                        |   2 +-
 .../pom.xml                                        |   2 +-
 features/load-balancer/pom.xml                     |   2 +-
 .../pom.xml                                        |   2 +-
 features/manager/cartridge-mgt/pom.xml             |   2 +-
 .../org.apache.stratos.common.feature/pom.xml      |   2 +-
 .../pom.xml                                        |   2 +-
 .../org.apache.stratos.common.ui.feature/pom.xml   |   2 +-
 features/manager/common/pom.xml                    |   2 +-
 features/manager/deployment/pom.xml                |   2 +-
 .../gapp/org.apache.stratos.gapp.feature/pom.xml   |   2 +-
 .../org.apache.stratos.gapp.server.feature/pom.xml |   2 +-
 .../org.apache.stratos.gapp.ui.feature/pom.xml     |   2 +-
 features/manager/gapp/pom.xml                      |   2 +-
 .../org.apache.stratos.logging.mgt.feature/pom.xml |   2 +-
 features/manager/logging-mgt/pom.xml               |   2 +-
 .../pom.xml                                        | 308 +++++++
 .../src/main/resources/p2.inf                      |  23 +
 .../src/main/resources/tomcat/context.xml          |  36 +
 .../tomcat/webapp-classloading-environments.xml    |  68 ++
 .../main/resources/tomcat/webapp-classloading.xml  |  33 +
 features/manager/metadataservice/pom.xml           | 139 +++
 features/manager/pom.xml                           |   3 +-
 .../pom.xml                                        |   2 +-
 .../pom.xml                                        |   2 +-
 .../pom.xml                                        |   2 +-
 .../pom.xml                                        |   2 +-
 .../pom.xml                                        |   2 +-
 features/manager/status-monitor/pom.xml            |   2 +-
 .../org.apache.stratos.manager.feature/pom.xml     |   2 +-
 .../pom.xml                                        |   2 +-
 features/manager/stratos-mgt/pom.xml               |   2 +-
 .../pom.xml                                        |   2 +-
 .../pom.xml                                        |   2 +-
 .../pom.xml                                        |   2 +-
 features/manager/tenant-activity/pom.xml           |   2 +-
 .../pom.xml                                        |   2 +-
 .../pom.xml                                        |   2 +-
 features/manager/tenant-mgt/pom.xml                |   2 +-
 .../org.apache.stratos.messaging.feature/pom.xml   |   2 +-
 features/messaging/pom.xml                         |   2 +-
 features/pom.xml                                   |   2 +-
 pom.xml                                            |  37 +-
 .../modules/distribution/INSTALL.txt               |  29 +
 .../modules/distribution/README.txt                |  20 +
 .../cartridge-agent/modules/distribution/pom.xml   |   2 +-
 .../modules/distribution/src/main/assembly/bin.xml |  13 +-
 .../modules/distribution/src/main/bin/stratos.sh   |  30 +-
 .../distribution/src/main/conf/log4j.properties    |   4 +-
 .../main/conf/templates/jndi.properties.template   |   2 +-
 .../src/main/extensions/artifacts-copy.sh          |  29 +
 .../src/main/extensions/artifacts-updated.sh       |   2 +-
 .../distribution/src/main/extensions/clean.sh      |   2 +-
 .../src/main/extensions/complete-tenant.sh         |  30 +
 .../src/main/extensions/complete-topology.sh       |  34 +
 .../src/main/extensions/instance-activated.sh      |   2 +-
 .../src/main/extensions/instance-started.sh        |   2 +-
 .../src/main/extensions/member-activated.sh        |  43 +
 .../src/main/extensions/member-started.sh          |  43 +
 .../src/main/extensions/member-suspended.sh        |  43 +
 .../src/main/extensions/member-terminated.sh       |  43 +
 .../src/main/extensions/mount-volumes.sh           |  87 ++
 .../src/main/extensions/mount_volumes.sh           |  96 +-
 .../src/main/extensions/start-servers.sh           |  14 +-
 .../main/extensions/subscription-domain-added.sh   |  15 +-
 .../main/extensions/subscription-domain-removed.sh |  14 +-
 .../modules/distribution/src/main/license/LICENSE  |  11 +-
 products/cartridge-agent/pom.xml                   |   2 +-
 .../load-balancer/modules/distribution/INSTALL.txt |  62 ++
 .../load-balancer/modules/distribution/README.txt  | 144 +++
 .../load-balancer/modules/distribution/pom.xml     |   2 +-
 .../modules/distribution/src/main/assembly/bin.xml |   4 +-
 .../src/main/assembly/filter.properties            |   2 +-
 .../modules/distribution/src/main/bin/stratos.sh   |   2 +-
 .../distribution/src/main/conf/loadbalancer.conf   |   6 -
 products/load-balancer/modules/p2-profile/pom.xml  |   2 +-
 products/load-balancer/pom.xml                     |   2 +-
 products/pom.xml                                   |   3 +-
 products/stratos-cli/distribution/INSTALL.txt      |  42 +
 products/stratos-cli/distribution/README.txt       |  72 ++
 products/stratos-cli/distribution/pom.xml          |   2 +-
 .../distribution/src/main/assembly/bin.xml         |  11 +-
 .../distribution/src/main/bin/stratos.bat          |   2 +-
 .../distribution/src/main/bin/stratos.sh           |   2 +-
 .../distribution/src/main/license/LICENSE          |   2 +-
 products/stratos-cli/pom.xml                       |   2 +-
 products/stratos/conf/tenant-mgt.xml               |  42 +
 products/stratos/modules/distribution/INSTALL.txt  |  10 +-
 products/stratos/modules/distribution/README.txt   |  42 +-
 products/stratos/modules/distribution/pom.xml      |   4 +-
 .../modules/distribution/src/assembly/bin.xml      |  27 +-
 .../distribution/src/assembly/filter.properties    |   2 +-
 .../modules/distribution/src/bin/stratos.sh        |   6 +-
 .../distribution/src/main/conf/autoscaler.xml      |   8 +-
 .../src/main/conf/cartridge-config.properties      |   4 +-
 .../distribution/src/main/conf/mincheck.drl        |  13 +-
 .../modules/distribution/src/main/conf/scaling.drl |  43 +-
 .../modules/distribution/src/main/license/LICENSE  |   4 +-
 products/stratos/modules/p2-profile-gen/pom.xml    |  11 +-
 products/stratos/pom.xml                           |   3 +-
 .../org.apache.stratos.account.mgt.stub/pom.xml    |   2 +-
 .../pom.xml                                        |   2 +-
 .../pom.xml                                        |   2 +-
 .../pom.xml                                        |   4 +-
 .../src/main/resources/AutoScalerService.wsdl      | 119 ++-
 .../org.apache.stratos.billing.mgt.stub/pom.xml    |   2 +-
 .../pom.xml                                        |   2 +-
 .../pom.xml                                        |   2 +-
 .../src/main/resources/CloudControllerService.wsdl | 809 +++++++++--------
 .../org.apache.stratos.common.stub/pom.xml         |   2 +-
 .../pom.xml                                        |   2 +-
 .../pom.xml                                        |   2 +-
 .../org.apache.stratos.manager.stub/pom.xml        |   2 +-
 .../pom.xml                                        |   2 +-
 .../pom.xml                                        |   2 +-
 .../org.apache.stratos.tenant.mgt.stub/pom.xml     |   2 +-
 .../pom.xml                                        |   2 +-
 .../pom.xml                                        |   2 +-
 .../org.apache.stratos.theme.mgt.stub/pom.xml      |   2 +-
 .../org.apache.stratos.throttle.stub/pom.xml       |   2 +-
 .../pom.xml                                        |   2 +-
 .../org.apache.stratos.throttling.stub/pom.xml     |   2 +-
 .../pom.xml                                        |   2 +-
 .../pom.xml                                        |   2 +-
 .../org.apache.stratos.usage.stub/pom.xml          |   2 +-
 .../pom.xml                                        |   2 +-
 service-stubs/pom.xml                              |   2 +-
 tools/puppet3-agent/config.sh                      |   2 +-
 tools/puppet3/manifests/nodes.pp                   | 113 ++-
 tools/puppet3/manifests/site.pp                    |  17 +-
 tools/puppet3/modules/agent/files/README.txt       |   4 +-
 .../modules/agent/files/activemq/README.txt        |   1 +
 tools/puppet3/modules/agent/manifests/init.pp      |  25 +-
 .../puppet3/modules/agent/manifests/initialize.pp  |  33 +-
 tools/puppet3/modules/agent/manifests/start.pp     |   1 +
 .../modules/agent/templates/bin/stratos.sh.erb     |  36 +-
 .../agent/templates/conf/log4j.properties.erb      |  40 +
 .../templates/extensions/artifacts-copy.sh.erb     |  29 +
 .../templates/extensions/artifacts-updated.sh.erb  |   2 +-
 .../agent/templates/extensions/clean.sh.erb        |   2 +-
 .../templates/extensions/complete-tenant.sh.erb    |  30 +
 .../templates/extensions/complete-topology.sh.erb  |  34 +
 .../templates/extensions/instance-activated.sh.erb |   2 +-
 .../templates/extensions/instance-started.sh.erb   |  11 +-
 .../templates/extensions/member-activated.sh.erb   | 303 +++++++
 .../templates/extensions/member-started.sh.erb     |  43 +
 .../templates/extensions/member-suspended.sh.erb   |  43 +
 .../templates/extensions/member-terminated.sh.erb  |  43 +
 .../templates/extensions/mount-volumes.sh.erb      |  87 ++
 .../templates/extensions/start-servers.sh.erb      | 285 +++++-
 .../extensions/subscription-domain-added.sh.erb    |  35 +
 .../extensions/subscription-domain-removed.sh.erb  |  34 +
 tools/puppet3/modules/lb/files/README.txt          |   2 +-
 tools/puppet3/modules/lb/manifests/init.pp         |   2 +-
 tools/puppet3/modules/php/manifests/init.pp        |   8 +-
 tools/puppet3/puppet.conf                          |   2 +-
 tools/stratos-installer/README.txt                 |   6 +-
 tools/stratos-installer/conf/setup.conf            |   2 +-
 .../config/as/repository/conf/carbon.xml           |   2 +-
 .../config/cc/repository/conf/carbon.xml           |   2 +-
 .../config/sm/repository/conf/carbon.xml           |   2 +-
 tools/stratos-installer/setup.sh                   |   2 +-
 439 files changed, 12672 insertions(+), 3653 deletions(-)
 create mode 160000 bin
 create mode 100644 components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/policy/deployers/AutoscalerPolicyDeployer.java
 create mode 100644 components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/policy/deployers/AutoscalerPolicyReader.java
 create mode 100644 components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/ArtifactCopyTask.java
 create mode 100644 components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/extensions/DefaultExtensionHandler.java
 create mode 100644 components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/extensions/ExtensionHandler.java
 create mode 100644 components/org.apache.stratos.manager.console/console/cartridge_info_sg.jag
 mode change 100644 => 100755 components/org.apache.stratos.manager.console/console/themes/theme1/partials/cartridge_info.hbs
 create mode 100644 components/org.apache.stratos.manager.console/console/themes/theme1/partials/cartridge_info_sg.hbs
 mode change 100644 => 100755 components/org.apache.stratos.manager.console/console/themes/theme1/partials/cartridges.hbs
 mode change 100644 => 100755 components/org.apache.stratos.manager.console/console/themes/theme1/partials/configure_stratos_wizard.hbs
 mode change 100644 => 100755 components/org.apache.stratos.manager.console/console/themes/theme1/partials/header.hbs
 mode change 100644 => 100755 components/org.apache.stratos.manager.console/console/themes/theme1/partials/mycartridges.hbs
 mode change 100644 => 100755 components/org.apache.stratos.manager.console/console/themes/theme1/partials/subscribe_cartridge.hbs
 mode change 100644 => 100755 components/org.apache.stratos.manager.console/console/themes/theme1/renderers/cartridge_info.js
 create mode 100644 components/org.apache.stratos.manager.console/console/themes/theme1/renderers/cartridge_info_sg.js
 mode change 100644 => 100755 components/org.apache.stratos.manager.console/console/themes/theme1/renderers/cartridges.js
 mode change 100644 => 100755 components/org.apache.stratos.manager.console/console/themes/theme1/renderers/configure_stratos.js
 mode change 100644 => 100755 components/org.apache.stratos.manager.console/console/themes/theme1/renderers/configure_stratos_wizard.js
 mode change 100644 => 100755 components/org.apache.stratos.manager.console/console/themes/theme1/renderers/dashboard.js
 mode change 100644 => 100755 components/org.apache.stratos.manager.console/console/themes/theme1/renderers/index.js
 mode change 100644 => 100755 components/org.apache.stratos.manager.console/console/themes/theme1/renderers/subscribe_cartridge.js
 mode change 100644 => 100755 components/org.apache.stratos.manager.console/console/themes/theme1/renderers/tenant_management.js
 mode change 100644 => 100755 components/org.apache.stratos.manager.console/console/themes/theme1/renderers/tenant_new.js
 create mode 100755 components/org.apache.stratos.manager.console/console/themes/theme1/ui/img/egg-logo.png
 create mode 100644 components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/multitenant/lb/DefaultLBService.java
 create mode 100644 components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/multitenant/lb/ExistingLBService.java
 create mode 100644 components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/multitenant/lb/LBService.java
 create mode 100644 components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/multitenant/lb/ServiceAwareLBService.java
 create mode 100644 components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/domain/topology/ClusterStatus.java
 create mode 100644 components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/tenant/SubscriptionDomainsAddedEvent.java
 create mode 100644 components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/tenant/SubscriptionDomainsRemovedEvent.java
 create mode 100644 components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/topology/ClusterMaintenanceModeEvent.java
 create mode 100644 components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/listener/topology/ClusterMaintenanceModeEventListener.java
 create mode 100644 components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/ClusterMaintenanceModeMessageProcessor.java
 create mode 100644 components/org.apache.stratos.metadataservice/pom.xml
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/Constants.java
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/ServiceHolder.java
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/Utils.java
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/annotation/AuthorizationAction.java
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/annotation/SuperTenantService.java
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/context/AuthenticationContext.java
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/definition/CartridgeMetaData.java
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/definition/PropertyBean.java
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/exception/RestAPIException.java
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/AbstractAuthenticationAuthorizationHandler.java
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/CookieBasedAuthenticationHandler.java
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/CustomExceptionMapper.java
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/CustomThrowableExceptionMapper.java
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/GenericExceptionMapper.java
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/OAuthHandler.java
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/StratosAuthenticationHandler.java
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/StratosAuthorizingHandler.java
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/oauth2/ValidationServiceClient.java
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/security/StratosPrincipal.java
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/security/StratosSecurityContext.java
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/services/MetaDataAdmin.java
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/resources/axis2_client.xml
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/webapp/stratosmetadataservice-test/META-INF/webapp-classloading.xml
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/webapp/stratosmetadataservice-test/WEB-INF/cxf-servlet.xml
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/webapp/stratosmetadataservice-test/WEB-INF/web.xml
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/webapp/stratosmetadataservice/META-INF/webapp-classloading.xml
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/webapp/stratosmetadataservice/WEB-INF/cxf-servlet.xml
 create mode 100644 components/org.apache.stratos.metadataservice/src/main/webapp/stratosmetadataservice/WEB-INF/web.xml
 create mode 100644 components/org.apache.stratos.metadataserviceconsole/pom.xml
 create mode 100644 components/org.apache.stratos.metadataserviceconsole/src/main/java/org/apache/stratos/metadataservice/Main.java
 create mode 100644 components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/autoscaler/policy/autoscale/LoadAverage.java
 create mode 100644 components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/autoscaler/policy/autoscale/MemoryConsumption.java
 create mode 100644 components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/autoscaler/policy/autoscale/RequestsInFlight.java
 create mode 100644 features/manager/metadataservice/org.apache.stratos.metadataservice.feature/pom.xml
 create mode 100644 features/manager/metadataservice/org.apache.stratos.metadataservice.feature/src/main/resources/p2.inf
 create mode 100644 features/manager/metadataservice/org.apache.stratos.metadataservice.feature/src/main/resources/tomcat/context.xml
 create mode 100644 features/manager/metadataservice/org.apache.stratos.metadataservice.feature/src/main/resources/tomcat/webapp-classloading-environments.xml
 create mode 100644 features/manager/metadataservice/org.apache.stratos.metadataservice.feature/src/main/resources/tomcat/webapp-classloading.xml
 create mode 100644 features/manager/metadataservice/pom.xml
 create mode 100644 products/cartridge-agent/modules/distribution/INSTALL.txt
 create mode 100644 products/cartridge-agent/modules/distribution/README.txt
 create mode 100644 products/cartridge-agent/modules/distribution/src/main/extensions/artifacts-copy.sh
 create mode 100644 products/cartridge-agent/modules/distribution/src/main/extensions/complete-tenant.sh
 create mode 100644 products/cartridge-agent/modules/distribution/src/main/extensions/complete-topology.sh
 create mode 100644 products/cartridge-agent/modules/distribution/src/main/extensions/member-activated.sh
 create mode 100644 products/cartridge-agent/modules/distribution/src/main/extensions/member-started.sh
 create mode 100644 products/cartridge-agent/modules/distribution/src/main/extensions/member-suspended.sh
 create mode 100644 products/cartridge-agent/modules/distribution/src/main/extensions/member-terminated.sh
 create mode 100755 products/cartridge-agent/modules/distribution/src/main/extensions/mount-volumes.sh
 create mode 100644 products/load-balancer/modules/distribution/INSTALL.txt
 create mode 100755 products/load-balancer/modules/distribution/README.txt
 create mode 100644 products/stratos-cli/distribution/INSTALL.txt
 create mode 100755 products/stratos-cli/distribution/README.txt
 create mode 100644 products/stratos/conf/tenant-mgt.xml
 create mode 100644 tools/puppet3/modules/agent/files/activemq/README.txt
 create mode 100644 tools/puppet3/modules/agent/templates/conf/log4j.properties.erb
 create mode 100644 tools/puppet3/modules/agent/templates/extensions/artifacts-copy.sh.erb
 create mode 100644 tools/puppet3/modules/agent/templates/extensions/complete-tenant.sh.erb
 create mode 100644 tools/puppet3/modules/agent/templates/extensions/complete-topology.sh.erb
 create mode 100644 tools/puppet3/modules/agent/templates/extensions/member-activated.sh.erb
 create mode 100644 tools/puppet3/modules/agent/templates/extensions/member-started.sh.erb
 create mode 100644 tools/puppet3/modules/agent/templates/extensions/member-suspended.sh.erb
 create mode 100644 tools/puppet3/modules/agent/templates/extensions/member-terminated.sh.erb
 create mode 100755 tools/puppet3/modules/agent/templates/extensions/mount-volumes.sh.erb
 create mode 100644 tools/puppet3/modules/agent/templates/extensions/subscription-domain-added.sh.erb
 create mode 100644 tools/puppet3/modules/agent/templates/extensions/subscription-domain-removed.sh.erb

diff --git a/NOTICE b/NOTICE
index 9a77613..d59ce34 100644
--- a/NOTICE
+++ b/NOTICE
@@ -1,4 +1,4 @@
-Apache Stratos Incubator
+Apache Stratos
 Copyright 2014 The Apache Software Foundation
 
 This product includes software developed at
diff --git a/README.md b/README.md
index de9d9b7..81cb616 100644
--- a/README.md
+++ b/README.md
@@ -1,7 +1,7 @@
-Apache Stratos
+Apache Stratos (incubating)
 ===========================
-Apache Stratos is a PaaS framework that supports polyglot environments (e.g., PHP, MySQL) and 
-can be extended to support many more. Apache Stratos is also the foundation for multiple flavors of PaaSes, 
+Apache Stratos (incubating) is a PaaS framework that supports polyglot environments (e.g., PHP, MySQL) and 
+can be extended to support many more. Apache Stratos (incubating) is also the foundation for multiple flavors of PaaSes, 
 such as Application PaaS (aPaaS), Integration PaaS (iPaaS), or Data PaaS (dPaaS). 
 Stratos is licensed under the Apache License, Version 2.0
 
diff --git a/bin b/bin
new file mode 160000
index 0000000..a7b3867
--- /dev/null
+++ b/bin
@@ -0,0 +1 @@
+Subproject commit a7b386736d8ce0988949d197bfafc3aa322c3860
diff --git a/components/org.apache.stratos.account.mgt.ui/pom.xml b/components/org.apache.stratos.account.mgt.ui/pom.xml
index e6aa1ab..3d43c59 100644
--- a/components/org.apache.stratos.account.mgt.ui/pom.xml
+++ b/components/org.apache.stratos.account.mgt.ui/pom.xml
@@ -21,7 +21,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.account.mgt/pom.xml b/components/org.apache.stratos.account.mgt/pom.xml
index 2e9214c..ccb7e36 100644
--- a/components/org.apache.stratos.account.mgt/pom.xml
+++ b/components/org.apache.stratos.account.mgt/pom.xml
@@ -20,7 +20,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.activation/pom.xml b/components/org.apache.stratos.activation/pom.xml
index ac5a56f..b362277 100644
--- a/components/org.apache.stratos.activation/pom.xml
+++ b/components/org.apache.stratos.activation/pom.xml
@@ -21,7 +21,7 @@
     <parent>
        <groupId>org.apache.stratos</groupId>
        <artifactId>stratos-components-parent</artifactId>
-       <version>4.0.0-SNAPSHOT</version>
+       <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.autoscaler/pom.xml b/components/org.apache.stratos.autoscaler/pom.xml
index d0d1167..8e07512 100644
--- a/components/org.apache.stratos.autoscaler/pom.xml
+++ b/components/org.apache.stratos.autoscaler/pom.xml
@@ -23,7 +23,7 @@
 	<parent>
 		<groupId>org.apache.stratos</groupId>
 		<artifactId>stratos-components-parent</artifactId>
-		<version>4.0.0-SNAPSHOT</version>
+		<version>4.0.0</version>
 	</parent>
 
 	<modelVersion>4.0.0</modelVersion>
@@ -196,6 +196,8 @@
                         </Import-Package>
 						<Bundle-Activator>org.apache.stratos.autoscaler.internal.ASBundleActivater</Bundle-Activator>
 						<DynamicImport-Package>*</DynamicImport-Package>
+						<!--<Axis2Deployer>AutoscalerPolicyDeployer</Axis2Deployer>
+						<Axis2Deployer>DeploymentPolicyDeployer</Axis2Deployer>-->
 						<Embed-Dependency>*;scope=compile|runtime</Embed-Dependency>
 						<Embed-Directory>lib</Embed-Directory>
 					</instructions>
diff --git a/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/PartitionContext.java b/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/PartitionContext.java
index 86c2e49..1def03c 100644
--- a/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/PartitionContext.java
+++ b/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/PartitionContext.java
@@ -358,8 +358,12 @@ public class PartitionContext implements Serializable{
     public int getNonTerminatedMemberCount() {
         return activeMembers.size() + pendingMembers.size() + terminationPendingMembers.size();
     }
+    
+    public List<MemberContext> getActiveMembers() {
+		return activeMembers;
+	}
 
-    public boolean removeActiveMemberById(String memberId) {
+	public boolean removeActiveMemberById(String memberId) {
         boolean removeActiveMember = false;
         synchronized (activeMembers) {
             Iterator<MemberContext> iterator = activeMembers.listIterator();
diff --git a/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/client/cloud/controller/CloudControllerClient.java b/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/client/cloud/controller/CloudControllerClient.java
index ee86c0f..b6cdac9 100644
--- a/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/client/cloud/controller/CloudControllerClient.java
+++ b/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/client/cloud/controller/CloudControllerClient.java
@@ -32,6 +32,10 @@ import org.apache.stratos.autoscaler.util.ConfUtil;
 import org.apache.stratos.cloud.controller.stub.*;
 import org.apache.stratos.cloud.controller.stub.deployment.partition.Partition;
 import org.apache.stratos.cloud.controller.stub.pojo.MemberContext;
+import org.apache.stratos.cloud.controller.stub.pojo.Properties;
+import org.apache.stratos.cloud.controller.stub.pojo.Property;
+import org.apache.stratos.messaging.domain.topology.Topology;
+import org.apache.stratos.messaging.message.receiver.topology.TopologyManager;
 
 import java.rmi.RemoteException;
 
@@ -75,7 +79,7 @@ public class CloudControllerClient {
      * This will validate the given partitions against the given cartridge type.
      */
     
-    public boolean validateDeploymentPolicy(String cartridgeType, DeploymentPolicy deploymentPolicy) throws PartitionValidationException{
+    public synchronized boolean validateDeploymentPolicy(String cartridgeType, DeploymentPolicy deploymentPolicy) throws PartitionValidationException{
         try {
             if(log.isInfoEnabled()) {
                 log.info(String.format("Validating partitions of policy via cloud controller: [id] %s", deploymentPolicy.getId()));
@@ -103,7 +107,7 @@ public class CloudControllerClient {
     /*
      * Calls the CC to validate the partition.
      */
-    public boolean validatePartition(Partition partition) throws PartitionValidationException{
+    public synchronized boolean validatePartition(Partition partition) throws PartitionValidationException{
         
         try {
             if(log.isInfoEnabled()) {
@@ -127,7 +131,7 @@ public class CloudControllerClient {
     }
 
     public synchronized MemberContext spawnAnInstance(Partition partition,
-    		String clusterId, String lbClusterId, String networkPartitionId) throws SpawningException {
+    		String clusterId, String lbClusterId, String networkPartitionId, boolean isPrimary, int minMemberCount) throws SpawningException {
         try {
             if(log.isInfoEnabled()) {
                 log.info(String.format("Trying to spawn an instance via cloud controller: [cluster] %s [partition] %s [lb-cluster] %s [network-partition-id] %s",
@@ -140,7 +144,20 @@ public class CloudControllerClient {
             member.setLbClusterId(lbClusterId);
             member.setInitTime(System.currentTimeMillis());
             member.setNetworkPartitionId(networkPartitionId);
-
+            Properties memberContextProps = new Properties();
+            Property isPrimaryProp = new Property();
+            isPrimaryProp.setName("PRIMARY");
+            isPrimaryProp.setValue(String.valueOf(isPrimary));
+            
+            Property minCountProp = new Property();
+            minCountProp.setName("MIN_COUNT");
+            minCountProp.setValue(String.valueOf(minMemberCount));
+            
+            memberContextProps.addProperties(isPrimaryProp);
+            memberContextProps.addProperties(minCountProp);
+            member.setProperties(memberContextProps);
+            
+            
             long startTime = System.currentTimeMillis();
             MemberContext memberContext = stub.startInstance(member);
             if(log.isDebugEnabled()) {
diff --git a/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/message/receiver/topology/AutoscalerTopologyEventReceiver.java b/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/message/receiver/topology/AutoscalerTopologyEventReceiver.java
index ce8d185..601502f 100644
--- a/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/message/receiver/topology/AutoscalerTopologyEventReceiver.java
+++ b/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/message/receiver/topology/AutoscalerTopologyEventReceiver.java
@@ -110,16 +110,89 @@ public class AutoscalerTopologyEventReceiver implements Runnable {
 
         });
 
+        topologyEventReceiver.addEventListener(new MemberReadyToShutdownEventListener() {
+            @Override
+            protected void onEvent(Event event) {
+                try {
+                    MemberReadyToShutdownEvent memberReadyToShutdownEvent = (MemberReadyToShutdownEvent)event;
+                    AutoscalerContext asCtx = AutoscalerContext.getInstance();
+                    AbstractMonitor monitor;
+                    String clusterId = memberReadyToShutdownEvent.getClusterId();
+                    String memberId = memberReadyToShutdownEvent.getMemberId();
+
+                    if(asCtx.monitorExist(clusterId)){
+                        monitor = asCtx.getMonitor(clusterId);
+                    }else if(asCtx.lbMonitorExist(clusterId)){
+                        monitor = asCtx.getLBMonitor(clusterId);
+                    }else{
+                        if(log.isDebugEnabled()){
+                            log.debug(String.format("A cluster monitor is not found in autoscaler context [cluster] %s", clusterId));
+                        }
+                        return;
+                    }
+
+                    NetworkPartitionContext nwPartitionCtxt;
+                    nwPartitionCtxt = monitor.getNetworkPartitionCtxt(memberReadyToShutdownEvent.getNetworkPartitionId());
+
+                    // start a new member in the same Partition
+                    String partitionId = monitor.getPartitionOfMember(memberId);
+                    Partition partition = monitor.getDeploymentPolicy().getPartitionById(partitionId);
+                    PartitionContext partitionCtxt = nwPartitionCtxt.getPartitionCtxt(partitionId);
+
+
+                    // terminate the shutdown ready member
+                    CloudControllerClient ccClient = CloudControllerClient.getInstance();
+                    ccClient.terminate(memberId);
+
+                    // remove from active member list
+                    partitionCtxt.removeActiveMemberById(memberId);
+
+                    if (log.isInfoEnabled()) {
+                        log.info(String.format("Member is terminated and removed from the active members list: [member] %s [partition] %s [cluster] %s ",
+                                               memberId, partitionId, clusterId));
+                    }
+                } catch (TerminationException e) {
+                    log.error(e);
+                }
+            }
+
+        });
+
         topologyEventReceiver.addEventListener(new ClusterCreatedEventListener() {
+                    @Override
+                    protected void onEvent(Event event) {
+                        try {
+                            log.info("Event received: " + event);
+                            ClusterCreatedEvent e = (ClusterCreatedEvent) event;
+                            TopologyManager.acquireReadLock();
+                            Service service = TopologyManager.getTopology().getService(e.getServiceName());
+                            Cluster cluster = service.getCluster(e.getClusterId());
+                            startClusterMonitor(cluster);
+                        } catch (Exception e) {
+                            log.error("Error processing event", e);
+                        } finally {
+                            TopologyManager.releaseReadLock();
+                        }
+                    }
+
+                });
+
+        topologyEventReceiver.addEventListener(new ClusterMaintenanceModeEventListener() {
             @Override
             protected void onEvent(Event event) {
                 try {
                     log.info("Event received: " + event);
-                    ClusterCreatedEvent e = (ClusterCreatedEvent) event;
+                    ClusterMaintenanceModeEvent e = (ClusterMaintenanceModeEvent) event;
                     TopologyManager.acquireReadLock();
                     Service service = TopologyManager.getTopology().getService(e.getServiceName());
                     Cluster cluster = service.getCluster(e.getClusterId());
-                    startClusterMonitor(cluster);
+                    if(AutoscalerContext.getInstance().monitorExist((cluster.getClusterId()))) {
+                        AutoscalerContext.getInstance().getMonitor(e.getClusterId()).setStatus(e.getStatus());
+                    } else if (AutoscalerContext.getInstance().lbMonitorExist((cluster.getClusterId()))) {
+                        AutoscalerContext.getInstance().getLBMonitor(e.getClusterId()).setStatus(e.getStatus());
+                    } else {
+                        log.error("cluster monitor not exists for the cluster: " + cluster.toString());
+                    }
                 } catch (Exception e) {
                     log.error("Error processing event", e);
                 } finally {
@@ -127,7 +200,7 @@ public class AutoscalerTopologyEventReceiver implements Runnable {
                 }
             }
 
-        });
+                });
 
         topologyEventReceiver.addEventListener(new ClusterRemovedEventListener() {
             @Override
@@ -288,54 +361,6 @@ public class AutoscalerTopologyEventReceiver implements Runnable {
             }
         });
 
-        topologyEventReceiver.addEventListener(new MemberReadyToShutdownEventListener() {
-           @Override
-           protected void onEvent(Event event) {
-               try {
-                   MemberReadyToShutdownEvent memberReadyToShutdownEvent = (MemberReadyToShutdownEvent)event;
-                   AutoscalerContext asCtx = AutoscalerContext.getInstance();
-                   AbstractMonitor monitor;
-                   String clusterId = memberReadyToShutdownEvent.getClusterId();
-                   String memberId = memberReadyToShutdownEvent.getMemberId();
-
-                   if(asCtx.monitorExist(clusterId)){
-                       monitor = asCtx.getMonitor(clusterId);
-                   }else if(asCtx.lbMonitorExist(clusterId)){
-                       monitor = asCtx.getLBMonitor(clusterId);
-                   }else{
-                       if(log.isDebugEnabled()){
-                           log.debug(String.format("A cluster monitor is not found in autoscaler context [cluster] %s", clusterId));
-                       }
-                       return;
-                   }
-
-                   NetworkPartitionContext nwPartitionCtxt;
-                   nwPartitionCtxt = monitor.getNetworkPartitionCtxt(memberReadyToShutdownEvent.getNetworkPartitionId());
-
-                   // start a new member in the same Partition
-                   String partitionId = monitor.getPartitionOfMember(memberId);
-                   Partition partition = monitor.getDeploymentPolicy().getPartitionById(partitionId);
-                   PartitionContext partitionCtxt = nwPartitionCtxt.getPartitionCtxt(partitionId);
-
-
-                   // terminate the shutdown ready member
-                   CloudControllerClient ccClient = CloudControllerClient.getInstance();
-                   ccClient.terminate(memberId);
-
-                   // remove from active member list
-                   partitionCtxt.removeActiveMemberById(memberId);
-
-                   if (log.isInfoEnabled()) {
-                       log.info(String.format("Member is terminated and removed from the active members list: [member] %s [partition] %s [cluster] %s ",
-                                              memberId, partitionId, clusterId));
-                   }
-               } catch (TerminationException e) {
-                   log.error(e);
-               }
-           }
-
-       });
-
 
         topologyEventReceiver.addEventListener(new MemberMaintenanceListener() {
             @Override
@@ -374,7 +399,6 @@ public class AutoscalerTopologyEventReceiver implements Runnable {
             }
         });
 
-
         topologyEventReceiver.addEventListener(new ServiceRemovedEventListener() {
             @Override
             protected void onEvent(Event event) {
diff --git a/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/AbstractMonitor.java b/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/AbstractMonitor.java
index 30ed61a..c1441bb 100644
--- a/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/AbstractMonitor.java
+++ b/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/AbstractMonitor.java
@@ -20,12 +20,15 @@ package org.apache.stratos.autoscaler.monitor;
 
 import java.util.Map;
 
+import org.apache.commons.configuration.XMLConfiguration;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.stratos.autoscaler.NetworkPartitionContext;
 import org.apache.stratos.autoscaler.deployment.policy.DeploymentPolicy;
 import org.apache.stratos.autoscaler.policy.model.AutoscalePolicy;
 import org.apache.stratos.autoscaler.rule.AutoscalerRuleEvaluator;
+import org.apache.stratos.autoscaler.util.AutoScalerConstants;
+import org.apache.stratos.autoscaler.util.ConfUtil;
 import org.apache.stratos.messaging.domain.topology.Cluster;
 import org.apache.stratos.messaging.domain.topology.Member;
 import org.apache.stratos.messaging.domain.topology.Service;
@@ -59,7 +62,23 @@ import org.drools.runtime.rule.FactHandle;
 	protected String serviceId;
 	
 	protected AutoscalerRuleEvaluator autoscalerRuleEvaluator;
-	
+
+    // time intereval between two runs of the Monitor. Default is 90000ms.
+    protected int monitorInterval;
+
+    public AbstractMonitor() {
+        readConfigurations();
+    }
+
+    private void readConfigurations () {
+
+        XMLConfiguration conf = ConfUtil.getInstance(null).getConfiguration();
+        monitorInterval = conf.getInt(AutoScalerConstants.AUTOSCALER_MONITOR_INTERVAL, 90000);
+        if (log.isDebugEnabled()) {
+            log.debug("Cluster Monitor task interval: " + getMonitorInterval());
+        }
+    }
+
 	@Override
 	public void run() {
 		// TODO Auto-generated method stub
@@ -177,4 +196,8 @@ import org.drools.runtime.rule.FactHandle;
     public void setMinCheckFactHandle(FactHandle minCheckFactHandle) {
         this.minCheckFactHandle = minCheckFactHandle;
     }
+
+    public int getMonitorInterval() {
+        return monitorInterval;
+    }
 }
\ No newline at end of file
diff --git a/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/ClusterMonitor.java b/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/ClusterMonitor.java
index 6c44e4e..5bb478e 100644
--- a/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/ClusterMonitor.java
+++ b/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/ClusterMonitor.java
@@ -25,7 +25,13 @@ import org.apache.stratos.autoscaler.PartitionContext;
 import org.apache.stratos.autoscaler.deployment.policy.DeploymentPolicy;
 import org.apache.stratos.autoscaler.policy.model.AutoscalePolicy;
 import org.apache.stratos.autoscaler.rule.AutoscalerRuleEvaluator;
+import org.apache.stratos.cloud.controller.stub.pojo.MemberContext;
+import org.apache.stratos.cloud.controller.stub.pojo.Properties;
+import org.apache.stratos.cloud.controller.stub.pojo.Property;
+import org.apache.stratos.messaging.domain.topology.ClusterStatus;
 
+import java.util.ArrayList;
+import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
 
 /**
@@ -34,10 +40,12 @@ import java.util.concurrent.ConcurrentHashMap;
  * rules engine.
  *
  */
-public class ClusterMonitor extends AbstractMonitor{
+public class ClusterMonitor extends AbstractMonitor {
 
-    private static final Log log = LogFactory.getLog(ClusterMonitor.class);    
+    private static final Log log = LogFactory.getLog(ClusterMonitor.class);
     private String lbReferenceType;
+    private boolean hasPrimary;
+    private ClusterStatus status;
 
     public ClusterMonitor(String clusterId, String serviceId, DeploymentPolicy deploymentPolicy,
                           AutoscalePolicy autoscalePolicy) {
@@ -64,34 +72,78 @@ public class ClusterMonitor extends AbstractMonitor{
             Thread.sleep(60000);
         } catch (InterruptedException ignore) {
         }
+
         while (!isDestroyed()) {
             if (log.isDebugEnabled()) {
-                log.debug("Cluster monitor is running.. "+this.toString());
+                log.debug("Cluster monitor is running.. " + this.toString());
             }
             try {
-                monitor();
+                if(!ClusterStatus.In_Maintenance.equals(status)) {
+                    monitor();
+                } else {
+                    if (log.isDebugEnabled()) {
+                        log.debug("Cluster monitor is suspended as the cluster is in " +
+                                    ClusterStatus.In_Maintenance + " mode......");
+                    }
+                }
             } catch (Exception e) {
-                log.error("Cluster monitor: Monitor failed."+this.toString(), e);
+                log.error("Cluster monitor: Monitor failed." + this.toString(), e);
             }
             try {
-                // TODO make this configurable
-                Thread.sleep(30000);
+                Thread.sleep(monitorInterval);
             } catch (InterruptedException ignore) {
             }
         }
     }
-    
+
+    private boolean isPrimaryMember(MemberContext memberContext){
+        Properties props = memberContext.getProperties();
+        if (log.isDebugEnabled()) {
+            log.debug(" Properties [" + props + "] ");
+        }
+        if (props != null && props.getProperties() != null) {
+            for (Property prop : props.getProperties()) {
+                if (prop.getName().equals("PRIMARY")) {
+                    if (Boolean.parseBoolean(prop.getValue())) {
+                        log.debug("Adding member id [" + memberContext.getMemberId() + "] " +
+                                "member instance id [" + memberContext.getInstanceId() + "] as a primary member");
+                        return true;
+                    }
+                }
+            }
+        }
+        return false;
+    }
+
     private void monitor() {
-//        if(clusterCtxt != null ) {
-            //TODO make this concurrent
+
+        //TODO make this concurrent
         for (NetworkPartitionContext networkPartitionContext : networkPartitionCtxts.values()) {
+            // store primary members in the network partition context
+            List<String> primaryMemberListInNetworkPartition = new ArrayList<String>();
 
             //minimum check per partition
-            for(PartitionContext partitionContext: networkPartitionContext.getPartitionCtxts().values()){
-
+            for (PartitionContext partitionContext : networkPartitionContext.getPartitionCtxts().values()) {
+                // store primary members in the partition context
+                List<String> primaryMemberListInPartition = new ArrayList<String>();
+                // get active primary members in this partition context
+                for (MemberContext memberContext : partitionContext.getActiveMembers()) {
+                    if (isPrimaryMember(memberContext)){
+                        primaryMemberListInPartition.add(memberContext.getMemberId());
+                    }
+                }
+                // get pending primary members in this partition context
+                for (MemberContext memberContext : partitionContext.getPendingMembers()) {
+                    if (isPrimaryMember(memberContext)){
+                        primaryMemberListInPartition.add(memberContext.getMemberId());
+                    }
+                }
+                primaryMemberListInNetworkPartition.addAll(primaryMemberListInPartition);
                 minCheckKnowledgeSession.setGlobal("clusterId", clusterId);
                 minCheckKnowledgeSession.setGlobal("lbRef", lbReferenceType);
-                
+                minCheckKnowledgeSession.setGlobal("isPrimary", hasPrimary);
+                minCheckKnowledgeSession.setGlobal("primaryMemberCount", primaryMemberListInPartition.size());
+
                 if (log.isDebugEnabled()) {
                     log.debug(String.format("Running minimum check for partition %s ", partitionContext.getPartitionId()));
                 }
@@ -104,8 +156,11 @@ public class ClusterMonitor extends AbstractMonitor{
             boolean rifReset = networkPartitionContext.isRifReset();
             boolean memoryConsumptionReset = networkPartitionContext.isMemoryConsumptionReset();
             boolean loadAverageReset = networkPartitionContext.isLoadAverageReset();
-            if(rifReset || memoryConsumptionReset || loadAverageReset){
-
+            if (log.isDebugEnabled()) {
+                log.debug("flag of rifReset: "  + rifReset + " flag of memoryConsumptionReset" + memoryConsumptionReset
+                        + " flag of loadAverageReset" + loadAverageReset);
+            }
+            if (rifReset || memoryConsumptionReset || loadAverageReset) {
                 scaleCheckKnowledgeSession.setGlobal("clusterId", clusterId);
                 //scaleCheckKnowledgeSession.setGlobal("deploymentPolicy", deploymentPolicy);
                 scaleCheckKnowledgeSession.setGlobal("autoscalePolicy", autoscalePolicy);
@@ -113,9 +168,12 @@ public class ClusterMonitor extends AbstractMonitor{
                 scaleCheckKnowledgeSession.setGlobal("mcReset", memoryConsumptionReset);
                 scaleCheckKnowledgeSession.setGlobal("laReset", loadAverageReset);
                 scaleCheckKnowledgeSession.setGlobal("lbRef", lbReferenceType);
+                scaleCheckKnowledgeSession.setGlobal("isPrimary", false);
+                scaleCheckKnowledgeSession.setGlobal("primaryMembers", primaryMemberListInNetworkPartition);
 
                 if (log.isDebugEnabled()) {
                     log.debug(String.format("Running scale check for network partition %s ", networkPartitionContext.getId()));
+                    log.debug(" Primary members : " + primaryMemberListInNetworkPartition);
                 }
 
                 scaleCheckFactHandle = AutoscalerRuleEvaluator.evaluateScaleCheck(scaleCheckKnowledgeSession
@@ -124,9 +182,9 @@ public class ClusterMonitor extends AbstractMonitor{
                 networkPartitionContext.setRifReset(false);
                 networkPartitionContext.setMemoryConsumptionReset(false);
                 networkPartitionContext.setLoadAverageReset(false);
-            } else if(log.isDebugEnabled()){
-                    log.debug(String.format("Scale rule will not run since the LB statistics have not received before this " +
-                            "cycle for network partition %s", networkPartitionContext.getId()) );
+            } else if (log.isDebugEnabled()) {
+                log.debug(String.format("Scale rule will not run since the LB statistics have not received before this " +
+                        "cycle for network partition %s", networkPartitionContext.getId()));
             }
         }
     }
@@ -134,8 +192,9 @@ public class ClusterMonitor extends AbstractMonitor{
     @Override
     public String toString() {
         return "ClusterMonitor [clusterId=" + clusterId + ", serviceId=" + serviceId +
-               ", deploymentPolicy=" + deploymentPolicy + ", autoscalePolicy=" + autoscalePolicy +
-               ", lbReferenceType=" + lbReferenceType + "]";
+                ", deploymentPolicy=" + deploymentPolicy + ", autoscalePolicy=" + autoscalePolicy +
+                ", lbReferenceType=" + lbReferenceType +
+                ", hasPrimary=" + hasPrimary + " ]";
     }
 
     public String getLbReferenceType() {
@@ -145,4 +204,20 @@ public class ClusterMonitor extends AbstractMonitor{
     public void setLbReferenceType(String lbReferenceType) {
         this.lbReferenceType = lbReferenceType;
     }
+
+    public boolean isHasPrimary() {
+        return hasPrimary;
+    }
+
+    public void setHasPrimary(boolean hasPrimary) {
+        this.hasPrimary = hasPrimary;
+    }
+
+    public ClusterStatus getStatus() {
+        return status;
+    }
+
+    public void setStatus(ClusterStatus status) {
+        this.status = status;
+    }
 }
diff --git a/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/LbClusterMonitor.java b/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/LbClusterMonitor.java
index d5c1c92..5774461 100644
--- a/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/LbClusterMonitor.java
+++ b/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/LbClusterMonitor.java
@@ -27,6 +27,9 @@ import org.apache.stratos.autoscaler.PartitionContext;
 import org.apache.stratos.autoscaler.deployment.policy.DeploymentPolicy;
 import org.apache.stratos.autoscaler.policy.model.AutoscalePolicy;
 import org.apache.stratos.autoscaler.rule.AutoscalerRuleEvaluator;
+import org.apache.stratos.messaging.domain.topology.ClusterStatus;
+
+import java.util.concurrent.ConcurrentHashMap;
 
 /**
  * Is responsible for monitoring a service cluster. This runs periodically
@@ -37,6 +40,7 @@ import org.apache.stratos.autoscaler.rule.AutoscalerRuleEvaluator;
 public class LbClusterMonitor extends AbstractMonitor{
 
     private static final Log log = LogFactory.getLog(LbClusterMonitor.class);
+    private ClusterStatus status;
 
     public LbClusterMonitor(String clusterId, String serviceId, DeploymentPolicy deploymentPolicy,
                             AutoscalePolicy autoscalePolicy) {
@@ -60,13 +64,19 @@ public class LbClusterMonitor extends AbstractMonitor{
                 log.debug("Cluster monitor is running.. "+this.toString());
             }
             try {
-                monitor();
+                if( !ClusterStatus.In_Maintenance.equals(status)) {
+                    monitor();
+                } else {
+                    if (log.isDebugEnabled()) {
+                        log.debug("LB Cluster monitor is suspended as the cluster is in " +
+                                    ClusterStatus.In_Maintenance + " mode......");
+                    }
+                }
             } catch (Exception e) {
                 log.error("Cluster monitor: Monitor failed. "+this.toString(), e);
             }
             try {
-                // TODO make this configurable
-                Thread.sleep(30000);
+                Thread.sleep(monitorInterval);
             } catch (InterruptedException ignore) {
             }
         }
@@ -82,7 +92,8 @@ public class LbClusterMonitor extends AbstractMonitor{
 
                 if (partitionContext != null) {
                     minCheckKnowledgeSession.setGlobal("clusterId", clusterId);
-
+                    minCheckKnowledgeSession.setGlobal("isPrimary", false);
+                    
                     if (log.isDebugEnabled()) {
                         log.debug(String.format("Running minimum check for partition %s ",
                                                 partitionContext.getPartitionId()));
@@ -107,4 +118,11 @@ public class LbClusterMonitor extends AbstractMonitor{
     }
 
 
+    public ClusterStatus getStatus() {
+        return status;
+    }
+
+    public void setStatus(ClusterStatus status) {
+        this.status = status;
+    }
 }
diff --git a/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/policy/deployers/AutoscalerPolicyDeployer.java b/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/policy/deployers/AutoscalerPolicyDeployer.java
new file mode 100644
index 0000000..861dab8
--- /dev/null
+++ b/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/policy/deployers/AutoscalerPolicyDeployer.java
@@ -0,0 +1,114 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one 
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
+ * KIND, either express or implied.  See the License for the 
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.stratos.autoscaler.policy.deployers;
+
+import java.io.File;
+
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.deployment.AbstractDeployer;
+import org.apache.axis2.deployment.DeploymentException;
+import org.apache.axis2.deployment.repository.util.DeploymentFileData;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.stratos.autoscaler.exception.InvalidPolicyException;
+import org.apache.stratos.autoscaler.policy.PolicyManager;
+import org.apache.stratos.autoscaler.policy.model.AutoscalePolicy;
+
+/**
+ * 
+ * The Axis2 deployer class for Autoscale-policy definitions.
+ */
+public class AutoscalerPolicyDeployer extends AbstractDeployer {
+	
+	 private static final Log log = LogFactory.getLog(AutoscalerPolicyDeployer.class);
+	 
+	 private static String fileExt="xml"; //default
+	 private static String deployDirectory=null;
+
+	@Override
+	public void init(ConfigurationContext context) {
+		if(deployDirectory!=null){
+			File deployDir = new File(new File(context.getAxisConfiguration().getRepository().getPath()),deployDirectory);
+			if(!deployDir.exists()){
+				//create policies deployment directory if not exist 
+				try {
+					deployDir.mkdirs();
+				} catch (Exception e) {
+					log.error("Unable to create policies deployment directory", e);
+				}
+			}
+		}
+	}
+
+	@Override
+	public void setDirectory(String dir) {
+		deployDirectory = dir;
+	}
+
+	@Override
+	public void setExtension(String ext) {
+		fileExt = ext;
+	}
+	
+	@Override
+	public void deploy(DeploymentFileData deploymentFileData) throws DeploymentException {
+
+		File policyFile = deploymentFileData.getFile();
+		log.debug("Started to deploy the policy: " + policyFile);
+
+		try {
+			
+			AutoscalerPolicyReader reader = new AutoscalerPolicyReader(policyFile);
+			
+			AutoscalePolicy policy = reader.read();
+			PolicyManager.getInstance().deployAutoscalePolicy(policy);
+
+			log.info("Successfully deployed the policy specified at "
+					+ deploymentFileData.getAbsolutePath());
+
+		} catch (Exception e) {
+			String msg = "Invalid policy artifact at " + deploymentFileData.getAbsolutePath();
+			// back up the file
+			File fileToBeRenamed = policyFile;
+			fileToBeRenamed.renameTo(new File(deploymentFileData.getAbsolutePath() + ".back"));
+			log.error(msg, e);
+			throw new DeploymentException(msg, e);
+		}
+	}
+	
+	@Override
+	public void undeploy(String fileName) throws DeploymentException {
+		/*
+		 
+		String policyName = policyFile.getName().replaceAll("." + fileExt + "$", "");
+		try {
+			PolicyManager.getInstance().removeAutoscalePolicy(policyFile);
+			log.info("Successfully undeployed the policy specified at " + fileName);
+		} catch (InvalidPolicyException e) {
+			log.error("unable to remove policy " + policyName , e);
+			throw new DeploymentException("unable to remove policy " + policyName ,e);
+		}
+		*/
+	}
+	
+	
+	
+
+}
diff --git a/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/policy/deployers/AutoscalerPolicyReader.java b/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/policy/deployers/AutoscalerPolicyReader.java
new file mode 100644
index 0000000..c0c79a9
--- /dev/null
+++ b/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/policy/deployers/AutoscalerPolicyReader.java
@@ -0,0 +1,113 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one 
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
+ * KIND, either express or implied.  See the License for the 
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.stratos.autoscaler.policy.deployers;
+
+import java.io.File;
+
+import javax.xml.namespace.QName;
+
+import org.apache.axiom.om.OMElement;
+import org.apache.axis2.deployment.DeploymentException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.stratos.autoscaler.exception.InvalidPolicyException;
+import org.apache.stratos.autoscaler.policy.model.AutoscalePolicy;
+import org.apache.stratos.autoscaler.policy.model.LoadAverage;
+import org.apache.stratos.autoscaler.policy.model.LoadThresholds;
+import org.apache.stratos.autoscaler.policy.model.MemoryConsumption;
+import org.apache.stratos.autoscaler.policy.model.RequestsInFlight;
+
+/**
+ * 
+ * The Reader class for Autoscale-policy definitions.
+ */
+public class AutoscalerPolicyReader extends AbstractPolicyReader<AutoscalePolicy>  {
+	
+	private static final Log log = LogFactory.getLog(AutoscalerPolicyReader.class);
+	
+	public AutoscalerPolicyReader(File file) {
+		super(file);
+	}
+	
+	public AutoscalePolicy read() throws InvalidPolicyException{
+		AutoscalePolicy policy = new AutoscalePolicy();
+		try {
+			OMElement docEle = getDocument();
+			if("autoscalePolicy".equalsIgnoreCase(docEle.getLocalName())){
+				policy.setId(docEle.getAttributeValue(new QName("id")));
+				OMElement displayNameEle = docEle.getFirstChildWithName(new QName("displayName"));
+				if(displayNameEle!=null){
+					policy.setDisplayName(displayNameEle.getText());
+				}
+				OMElement descriptionEle = docEle.getFirstChildWithName(new QName("description"));
+				if(descriptionEle!=null){
+					policy.setDescription(descriptionEle.getText());
+				}
+				
+				//LoadThresholds
+				OMElement loadThresholdsEle = docEle.getFirstChildWithName(new QName("loadThresholds"));
+				LoadThresholds loadThresholds = new LoadThresholds();
+				
+				//RequestsInFlight
+				OMElement reqInFlightEle = loadThresholdsEle.getFirstChildWithName(new QName("requestsInFlight"));
+				RequestsInFlight reqInFlight = new RequestsInFlight();
+				reqInFlight.setAverage(Float.valueOf(readValueAttr(reqInFlightEle,"average")));
+				reqInFlight.setGradient(Float.valueOf(readValueAttr(reqInFlightEle,"gradient")));
+				reqInFlight.setSecondDerivative(Float.valueOf(readValueAttr(reqInFlightEle,"secondDerivative")));
+                reqInFlight.setScaleDownMarginOfGradient(Float.valueOf(readValueAttr(reqInFlightEle,"scaleDownMarginOfGradient")));
+                reqInFlight.setScaleDownMarginOfSecondDerivative(Float.valueOf(readValueAttr(reqInFlightEle,"scaleDownMarginOfSecondDerivative")));
+				loadThresholds.setRequestsInFlight(reqInFlight);
+				
+				//MemoryConsumption
+				OMElement memConsumptionEle = loadThresholdsEle.getFirstChildWithName(new QName("memoryConsumption"));
+				MemoryConsumption memConsumption = new MemoryConsumption();
+				memConsumption.setAverage(Float.valueOf(readValueAttr(memConsumptionEle,"average")));
+				memConsumption.setGradient(Float.valueOf(readValueAttr(memConsumptionEle,"gradient")));
+				memConsumption.setSecondDerivative(Float.valueOf(readValueAttr(memConsumptionEle,"secondDerivative")));
+                memConsumption.setScaleDownMarginOfGradient(Float.valueOf(readValueAttr(memConsumptionEle,"scaleDownMarginOfGradient")));
+                memConsumption.setScaleDownMarginOfSecondDerivative(Float.valueOf(readValueAttr(memConsumptionEle,"scaleDownMarginOfSecondDerivative")));
+				loadThresholds.setMemoryConsumption(memConsumption);
+				
+				//LoadAverage
+				OMElement loadAvrEle = loadThresholdsEle.getFirstChildWithName(new QName("loadAverage"));
+				LoadAverage loadAvr = new LoadAverage();
+				loadAvr.setAverage(Float.valueOf(readValueAttr(loadAvrEle,"average")));
+				loadAvr.setGradient(Float.valueOf(readValueAttr(loadAvrEle,"gradient")));
+				loadAvr.setSecondDerivative(Float.valueOf(readValueAttr(loadAvrEle,"secondDerivative")));
+                loadAvr.setScaleDownMarginOfGradient(Float.valueOf(readValueAttr(loadAvrEle,"scaleDownMarginOfGradient")));
+                loadAvr.setScaleDownMarginOfSecondDerivative(Float.valueOf(readValueAttr(loadAvrEle,"scaleDownMarginOfSecondDerivative")));
+				loadThresholds.setLoadAverage(loadAvr);
+				
+				policy.setLoadThresholds(loadThresholds);
+				
+			} else{
+				throw new DeploymentException("File is not a valid autoscale policy");
+			}
+
+		} catch (Exception e){
+			log.error("Malformed autoscale policy file", e);
+			throw new InvalidPolicyException("Malformed autoscale policy file",e);
+		} finally{
+			closeStream();
+		}
+		return policy;
+	}
+
+}
diff --git a/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/policy/model/LoadThresholds.java b/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/policy/model/LoadThresholds.java
index 22e00a6..61677d7 100644
--- a/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/policy/model/LoadThresholds.java
+++ b/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/policy/model/LoadThresholds.java
@@ -27,19 +27,19 @@ import java.io.Serializable;
 public class LoadThresholds implements Serializable{
 
 	private static final long serialVersionUID = -8148571245537655867L;
-	private RequestsInFlightThresholds requestsInFlight;
-	private MemoryConsumptionThresholds memoryConsumption;
-	private LoadAverageThresholds loadAverage;
+	private RequestsInFlight requestsInFlight;
+	private MemoryConsumption memoryConsumption;
+	private LoadAverage loadAverage;
 
     /**
      * Gets the value of the requestsInFlight property.
      * 
      * @return
      *     possible object is
-     *     {@link RequestsInFlightThresholds }
+     *     {@link RequestsInFlight }
      *     
      */
-    public RequestsInFlightThresholds getRequestsInFlight() {
+    public RequestsInFlight getRequestsInFlight() {
         return requestsInFlight;
     }
 
@@ -48,10 +48,10 @@ public class LoadThresholds implements Serializable{
      * 
      * @param value
      *     allowed object is
-     *     {@link RequestsInFlightThresholds }
+     *     {@link RequestsInFlight }
      *     
      */
-    public void setRequestsInFlight(RequestsInFlightThresholds value) {
+    public void setRequestsInFlight(RequestsInFlight value) {
         this.requestsInFlight = value;
     }
 
@@ -60,10 +60,10 @@ public class LoadThresholds implements Serializable{
      * 
      * @return
      *     possible object is
-     *     {@link MemoryConsumptionThresholds }
+     *     {@link MemoryConsumption }
      *     
      */
-    public MemoryConsumptionThresholds getMemoryConsumption() {
+    public MemoryConsumption getMemoryConsumption() {
         return memoryConsumption;
     }
 
@@ -72,10 +72,10 @@ public class LoadThresholds implements Serializable{
      * 
      * @param value
      *     allowed object is
-     *     {@link MemoryConsumptionThresholds }
+     *     {@link MemoryConsumption }
      *     
      */
-    public void setMemoryConsumption(MemoryConsumptionThresholds value) {
+    public void setMemoryConsumption(MemoryConsumption value) {
         this.memoryConsumption = value;
     }
 
@@ -84,10 +84,10 @@ public class LoadThresholds implements Serializable{
      * 
      * @return
      *     possible object is
-     *     {@link LoadAverageThresholds }
+     *     {@link LoadAverage }
      *     
      */
-    public LoadAverageThresholds getLoadAverage() {
+    public LoadAverage getLoadAverage() {
         return loadAverage;
     }
 
@@ -96,10 +96,10 @@ public class LoadThresholds implements Serializable{
      * 
      * @param value
      *     allowed object is
-     *     {@link LoadAverageThresholds }
+     *     {@link LoadAverage }
      *     
      */
-    public void setLoadAverage(LoadAverageThresholds value) {
+    public void setLoadAverage(LoadAverage value) {
         this.loadAverage = value;
     }
 
diff --git a/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/rule/RuleTasksDelegator.java b/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/rule/RuleTasksDelegator.java
index 7d8304b..94def43 100644
--- a/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/rule/RuleTasksDelegator.java
+++ b/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/rule/RuleTasksDelegator.java
@@ -74,14 +74,47 @@ public class RuleTasksDelegator {
         }
         return autoscaleAlgorithm;
     }
+    
+    public void delegateSpawn(PartitionContext partitionContext, String clusterId, String lbRefType, boolean isPrimary) {
+    	
+        try {
+
+            String nwPartitionId = partitionContext.getNetworkPartitionId();
+            NetworkPartitionLbHolder lbHolder =
+                                          PartitionManager.getInstance()
+                                                          .getNetworkPartitionLbHolder(nwPartitionId);
+            String lbClusterId = getLbClusterId(lbRefType, partitionContext, lbHolder);
+            MemberContext memberContext =
+                                         CloudControllerClient.getInstance()
+                                                              .spawnAnInstance(partitionContext.getPartition(),
+                                                                      clusterId,
+                                                                      lbClusterId, partitionContext.getNetworkPartitionId(),
+                                                                      isPrimary,
+                                                                      partitionContext.getMinimumMemberCount());
+            if (memberContext != null) {
+                partitionContext.addPendingMember(memberContext);
+                if(log.isDebugEnabled()){
+                    log.debug(String.format("Pending member added, [member] %s [partition] %s", memberContext.getMemberId(),
+                            memberContext.getPartition().getId()));
+                }
+            } else if(log.isDebugEnabled()){
+                log.debug("Returned member context is null, did not add to pending members");
+            }
+
+        } catch (Throwable e) {
+            String message = "Cannot spawn an instance";
+            log.error(message, e);
+            throw new RuntimeException(message, e);
+        }
+    }
 
-    public void delegateSpawn(PartitionContext partitionContext, String clusterId, String lbRefType) {
+    // Original method. Assume this is invoked from mincheck.drl
+    
+   /* public void delegateSpawn(PartitionContext partitionContext, String clusterId, String lbRefType) {
         try {
 
             String nwPartitionId = partitionContext.getNetworkPartitionId();
-//            NetworkPartitionContext ctxt =
-//                                          PartitionManager.getInstance()
-//                                                          .getNetworkPartitionLbHolder(nwPartitionId);
+                                                         .getNetworkPartitionLbHolder(nwPartitionId);
             NetworkPartitionLbHolder lbHolder =
                                           PartitionManager.getInstance()
                                                           .getNetworkPartitionLbHolder(nwPartitionId);
@@ -109,7 +142,7 @@ public class RuleTasksDelegator {
             log.error(message, e);
             throw new RuntimeException(message, e);
         }
-   	}
+   	}*/
 
 
 
diff --git a/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/util/AutoScalerConstants.java b/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/util/AutoScalerConstants.java
index 5395d96..03cf861 100644
--- a/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/util/AutoScalerConstants.java
+++ b/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/util/AutoScalerConstants.java
@@ -38,5 +38,11 @@ public final class AutoScalerConstants {
 	public static final String NETWORK_PARTITION_LB_HOLDER_RESOURCE = "/network-partitions";
 	public static final String AS_POLICY_RESOURCE = "/policies/autoscalingPolicies";
 	public static final String DEPLOYMENT_POLICY_RESOURCE = "/policies/deploymentPolicies";
+
+
+    /**
+     * Configs
+     */
+    public static final String AUTOSCALER_MONITOR_INTERVAL = "autoscaler.monitorInterval";
        
 }
diff --git a/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/util/AutoscalerUtil.java b/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/util/AutoscalerUtil.java
index 9ab1460..69b5acf 100644
--- a/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/util/AutoscalerUtil.java
+++ b/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/util/AutoscalerUtil.java
@@ -38,9 +38,11 @@ import org.apache.stratos.autoscaler.policy.PolicyManager;
 import org.apache.stratos.autoscaler.policy.model.AutoscalePolicy;
 import org.apache.stratos.cloud.controller.stub.deployment.partition.Partition;
 import org.apache.stratos.cloud.controller.stub.pojo.MemberContext;
+import org.apache.stratos.cloud.controller.stub.pojo.Property;
 import org.apache.stratos.cloud.controller.stub.pojo.Properties;
 import org.apache.stratos.cloud.controller.stub.pojo.Property;
 import org.apache.stratos.messaging.domain.topology.Cluster;
+import org.apache.stratos.messaging.domain.topology.ClusterStatus;
 import org.apache.stratos.messaging.domain.topology.Member;
 import org.apache.stratos.messaging.domain.topology.MemberStatus;
 import org.apache.stratos.messaging.util.Constants;
@@ -111,6 +113,7 @@ public class AutoscalerUtil {
                                         new ClusterMonitor(cluster.getClusterId(),
                                                            cluster.getServiceName(),
                                                            deploymentPolicy, policy);
+        clusterMonitor.setStatus(ClusterStatus.Created);
         
         for (PartitionGroup partitionGroup: deploymentPolicy.getPartitionGroups()){
 
@@ -130,7 +133,8 @@ public class AutoscalerUtil {
                         memberContext.setClusterId(member.getClusterId());
                         memberContext.setMemberId(memberId);
                         memberContext.setPartition(partition);
-
+                        memberContext.setProperties(convertMemberPropsToMemberContextProps(member.getProperties()));
+                        
                         if(MemberStatus.Activated.equals(member.getStatus())){
                             partitionContext.addActiveMember(memberContext);
 //                            networkPartitionContext.increaseMemberCountOfPartition(partition.getNetworkPartitionId(), 1);
@@ -175,12 +179,29 @@ public class AutoscalerUtil {
                 log.debug("Set the lb reference type: "+value);
             }
         }
+        
+        // set hasPrimary property
+        // hasPrimary is true if there are primary members available in that cluster
+        clusterMonitor.setHasPrimary(Boolean.parseBoolean(cluster.getProperties().getProperty(Constants.IS_PRIMARY)));
 
         log.info("Cluster monitor created: "+clusterMonitor.toString());
         return clusterMonitor;
     }
     
-    public static LbClusterMonitor getLBClusterMonitor(Cluster cluster) throws PolicyValidationException, PartitionValidationException {
+    private static Properties convertMemberPropsToMemberContextProps(
+			java.util.Properties properties) {
+    	Properties props = new Properties();
+    	for (Map.Entry<Object, Object> e : properties.entrySet()	) {
+			Property prop = new Property();
+			prop.setName((String)e.getKey());
+			prop.setValue((String)e.getValue());
+			props.addProperties(prop);
+		}    	
+		return props;
+	}
+
+
+	public static LbClusterMonitor getLBClusterMonitor(Cluster cluster) throws PolicyValidationException, PartitionValidationException {
         // FIXME fix the following code to correctly update
         // AutoscalerContext context = AutoscalerContext.getInstance();
         if (null == cluster) {
@@ -213,6 +234,7 @@ public class AutoscalerUtil {
                                         new LbClusterMonitor(clusterId,
                                                            cluster.getServiceName(),
                                                            deploymentPolicy, policy);
+        clusterMonitor.setStatus(ClusterStatus.Created);
         // partition group = network partition context
         for (PartitionGroup partitionGroup : deploymentPolicy.getPartitionGroups()) {
 
diff --git a/components/org.apache.stratos.cartridge.agent/pom.xml b/components/org.apache.stratos.cartridge.agent/pom.xml
index 4808427..1a3ad4b 100644
--- a/components/org.apache.stratos.cartridge.agent/pom.xml
+++ b/components/org.apache.stratos.cartridge.agent/pom.xml
@@ -22,7 +22,7 @@
 	<parent>
 		<groupId>org.apache.stratos</groupId>
 		<artifactId>stratos-components-parent</artifactId>
-		<version>4.0.0-SNAPSHOT</version>
+		<version>4.0.0</version>
 	</parent>
 
 	<modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/ArtifactCopyTask.java b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/ArtifactCopyTask.java
new file mode 100644
index 0000000..75a5d1e
--- /dev/null
+++ b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/ArtifactCopyTask.java
@@ -0,0 +1,39 @@
+/**
+ *
+ */
+package org.apache.stratos.cartridge.agent;
+
+import java.io.File;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.stratos.cartridge.agent.extensions.ExtensionHandler;
+
+/**
+ *
+ */
+public class ArtifactCopyTask implements Runnable {
+
+    private static final Log log = LogFactory.getLog(ArtifactCopyTask.class);
+    private final ExtensionHandler extensionHandler;
+    private String source;
+    private String destination;
+
+    public ArtifactCopyTask(String src, String des) {
+    	this.source = src;
+    	this.destination = des;
+        extensionHandler = CartridgeAgent.getExtensionHandler();
+    }
+
+    @Override
+    public void run() {
+        if (log.isDebugEnabled()) {
+            log.debug("Executing Artifact Copy Task source[" + source +"] destination[" + destination +"] ");
+        }        
+
+        if (new File(destination).exists()) {
+            extensionHandler.onCopyArtifactsExtension(source, destination);
+        }
+    }
+
+}
diff --git a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/CartridgeAgent.java b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/CartridgeAgent.java
index 5537637..dac128a 100644
--- a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/CartridgeAgent.java
+++ b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/CartridgeAgent.java
@@ -20,35 +20,38 @@ package org.apache.stratos.cartridge.agent;
  *
 */
 
-
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.apache.stratos.cartridge.agent.artifact.deployment.synchronizer.RepositoryInformation;
-import org.apache.stratos.cartridge.agent.artifact.deployment.synchronizer.git.impl.GitBasedArtifactRepository;
 import org.apache.stratos.cartridge.agent.config.CartridgeAgentConfiguration;
 import org.apache.stratos.cartridge.agent.data.publisher.DataPublisherConfiguration;
 import org.apache.stratos.cartridge.agent.data.publisher.exception.DataPublisherException;
 import org.apache.stratos.cartridge.agent.data.publisher.log.LogPublisherManager;
 import org.apache.stratos.cartridge.agent.event.publisher.CartridgeAgentEventPublisher;
+import org.apache.stratos.cartridge.agent.extensions.DefaultExtensionHandler;
+import org.apache.stratos.cartridge.agent.extensions.ExtensionHandler;
 import org.apache.stratos.cartridge.agent.util.CartridgeAgentConstants;
 import org.apache.stratos.cartridge.agent.util.CartridgeAgentUtils;
-import org.apache.stratos.cartridge.agent.util.ExtensionUtils;
-import org.apache.stratos.messaging.domain.tenant.Tenant;
 import org.apache.stratos.messaging.event.Event;
 import org.apache.stratos.messaging.event.instance.notifier.ArtifactUpdatedEvent;
 import org.apache.stratos.messaging.event.instance.notifier.InstanceCleanupClusterEvent;
 import org.apache.stratos.messaging.event.instance.notifier.InstanceCleanupMemberEvent;
+import org.apache.stratos.messaging.event.tenant.CompleteTenantEvent;
 import org.apache.stratos.messaging.event.tenant.SubscriptionDomainAddedEvent;
 import org.apache.stratos.messaging.event.tenant.SubscriptionDomainRemovedEvent;
+import org.apache.stratos.messaging.event.topology.*;
 import org.apache.stratos.messaging.listener.instance.notifier.ArtifactUpdateEventListener;
 import org.apache.stratos.messaging.listener.instance.notifier.InstanceCleanupClusterEventListener;
 import org.apache.stratos.messaging.listener.instance.notifier.InstanceCleanupMemberEventListener;
+import org.apache.stratos.messaging.listener.tenant.CompleteTenantEventListener;
 import org.apache.stratos.messaging.listener.tenant.SubscriptionDomainsAddedEventListener;
 import org.apache.stratos.messaging.listener.tenant.SubscriptionDomainsRemovedEventListener;
+import org.apache.stratos.messaging.listener.topology.*;
 import org.apache.stratos.messaging.message.receiver.instance.notifier.InstanceNotifierEventReceiver;
 import org.apache.stratos.messaging.message.receiver.tenant.TenantEventReceiver;
 import org.apache.stratos.messaging.message.receiver.tenant.TenantManager;
+import org.apache.stratos.messaging.message.receiver.topology.TopologyEventReceiver;
+import org.apache.stratos.messaging.message.receiver.topology.TopologyManager;
 
 import java.util.List;
 import java.util.concurrent.Executors;
@@ -60,13 +63,13 @@ import java.util.concurrent.TimeUnit;
  */
 public class CartridgeAgent implements Runnable {
 
-    private static final Log log = LogFactory.getLog(CartridgeAgent.class);
-
+   	private static final Log log = LogFactory.getLog(CartridgeAgent.class);
+    private static final ExtensionHandler extensionHandler = new DefaultExtensionHandler();
     private boolean terminated;
 
     @Override
     public void run() {
-        if(log.isInfoEnabled()) {
+        if (log.isInfoEnabled()) {
             log.info("Cartridge agent started");
         }
 
@@ -75,11 +78,26 @@ public class CartridgeAgent implements Runnable {
         // Start instance notifier listener thread
         subscribeToTopicsAndRegisterListeners();
 
+        // Start topology event receiver thread
+        registerTopologyEventListeners();
+
+        // Start tenant event receiver thread
+        registerTenantEventListeners();
+
+        // Execute instance started shell script
+        extensionHandler.onInstanceStartedEvent();
+
         // Publish instance started event
         CartridgeAgentEventPublisher.publishInstanceStartedEvent();
 
         // Execute start servers extension
-        ExtensionUtils.executeStartServersExtension();
+        try {
+            extensionHandler.startServerExtension();
+        } catch (Exception e) {
+            if (log.isErrorEnabled()) {
+                log.error("Error processing start servers event", e);
+            }
+        }
 
         // Wait for all ports to be active
         CartridgeAgentUtils.waitUntilPortsActive(CartridgeAgentConfiguration.getInstance().getListenAddress(),
@@ -87,107 +105,288 @@ public class CartridgeAgent implements Runnable {
 
         // Check repo url
         String repoUrl = CartridgeAgentConfiguration.getInstance().getRepoUrl();
+        /*if(CartridgeAgentConfiguration.getInstance().isMultitenant()) {
+            if (CartridgeAgentConfiguration.getInstance().isCommitsEnabled()) {
+                log.info(" Commits enabled. Starting File listener ");
+                ScheduledExecutorService scheduler = Executors
+                        .newScheduledThreadPool(1);
+                scheduler.scheduleWithFixedDelay(new RepositoryFileListener(), 0,
+                        10, TimeUnit.SECONDS);
+            }
+            
+            // Start super tenant artifact copy task
+            // from temp location to super tenant app path
+			//ScheduledExecutorService scheduler = Executors
+			//		.newScheduledThreadPool(1);
+			//scheduler.scheduleWithFixedDelay(new ArtifactCopyTask(
+			//		CartridgeAgentConstants.SUPERTENANT_TEMP_PATH,
+			//		CartridgeAgentConfiguration.getInstance().getAppPath()+ "/repository/deployment/server/"
+			//		),
+			//		0, 10, TimeUnit.SECONDS);
+        } */
+
         if ("null".equals(repoUrl) || StringUtils.isBlank(repoUrl)) {
-            if(log.isInfoEnabled()) {
+            if (log.isInfoEnabled()) {
                 log.info("No artifact repository found");
             }
+            // Execute instance activated shell script
+            extensionHandler.onInstanceActivatedEvent();
 
             // Publish instance activated event
             CartridgeAgentEventPublisher.publishInstanceActivatedEvent();
         } else {
             //Start periodical file checker task
-    		if (CartridgeAgentConfiguration.getInstance().isCommitsEnabled()) {
-    			log.info(" Commits enabled. Starting File listener ");
-    			ScheduledExecutorService scheduler = Executors
-    					.newScheduledThreadPool(1);
-    			scheduler.scheduleWithFixedDelay(new RepositoryFileListener(), 0,
-    					10, TimeUnit.SECONDS);
-    		}
+            /*if (CartridgeAgentConfiguration.getInstance().isCommitsEnabled()) {
+                log.info(" Commits enabled. Starting File listener ");
+                ScheduledExecutorService scheduler = Executors
+                        .newScheduledThreadPool(1);
+                scheduler.scheduleWithFixedDelay(new RepositoryFileListener(), 0,
+                        10, TimeUnit.SECONDS);
+            } */
         }
 
-        String persistanceMappingsPayload = CartridgeAgentConfiguration.getInstance().getPersistenceMappings();
-        if(persistanceMappingsPayload != null) {
-            ExtensionUtils.executeVolumeMountExtension(persistanceMappingsPayload);
+//        if (CartridgeAgentConfiguration.getInstance().isInternalRepo()) {
+//            // Start periodic file copy for super tenant
+//            // From repo/deployment/server to /tmp/-1234
+//
+//            ScheduledExecutorService scheduler = Executors
+//                    .newScheduledThreadPool(1);
+//            scheduler.scheduleWithFixedDelay(
+//            		new ArtifactCopyTask(CartridgeAgentConfiguration.getInstance().getAppPath()
+//            		+ "/repository/deployment/server/",
+//            		CartridgeAgentConstants.SUPERTENANT_TEMP_PATH), 0,
+//                    10, TimeUnit.SECONDS);
+//        }
+
+        String persistenceMappingsPayload = CartridgeAgentConfiguration.getInstance().getPersistenceMappings();
+        if (persistenceMappingsPayload != null) {
+            extensionHandler.volumeMountExtension(persistenceMappingsPayload);
         }
-       
-
-        // Keep the thread live until terminated
 
         // start log publishing
         LogPublisherManager logPublisherManager = new LogPublisherManager();
         publishLogs(logPublisherManager);
 
+        // Keep the thread live until terminated
         while (!terminated) {
-        	try {
-				Thread.sleep(1000);
-			} catch (InterruptedException ignore) {
-			}
+            try {
+                Thread.sleep(1000);
+            } catch (InterruptedException ignore) {
+            }
         }
 
         logPublisherManager.stop();
     }
 
-	protected void subscribeToTopicsAndRegisterListeners() {
-		if(log.isDebugEnabled()) {
+    protected void subscribeToTopicsAndRegisterListeners() {
+        if (log.isDebugEnabled()) {
             log.debug("Starting instance notifier event message receiver thread");
         }
 
-        InstanceNotifierEventReceiver eventReceiver = new InstanceNotifierEventReceiver();
-        eventReceiver.addEventListener(new ArtifactUpdateEventListener() {
+        InstanceNotifierEventReceiver instanceNotifierEventReceiver = new InstanceNotifierEventReceiver();
+        instanceNotifierEventReceiver.addEventListener(new ArtifactUpdateEventListener() {
             @Override
             protected void onEvent(Event event) {
-                onArtifactUpdateEvent((ArtifactUpdatedEvent) event);
+                try {
+                    extensionHandler.onArtifactUpdatedEvent((ArtifactUpdatedEvent) event);
+                } catch (Exception e) {
+                    if (log.isErrorEnabled()) {
+                        log.error("Error processing artifact update event", e);
+                    }
+                }
             }
         });
 
-        eventReceiver.addEventListener(new InstanceCleanupMemberEventListener() {
+        instanceNotifierEventReceiver.addEventListener(new InstanceCleanupMemberEventListener() {
             @Override
             protected void onEvent(Event event) {
-                String memberIdInPayload = CartridgeAgentConfiguration.getInstance().getMemberId();
-                InstanceCleanupMemberEvent instanceCleanupMemberEvent = (InstanceCleanupMemberEvent) event;
-                if (memberIdInPayload.equals(instanceCleanupMemberEvent.getMemberId())) {
-                    onInstanceCleanupEvent();
+                try {
+                    String memberIdInPayload = CartridgeAgentConfiguration.getInstance().getMemberId();
+                    InstanceCleanupMemberEvent instanceCleanupMemberEvent = (InstanceCleanupMemberEvent) event;
+                    if (memberIdInPayload.equals(instanceCleanupMemberEvent.getMemberId())) {
+                        extensionHandler.onInstanceCleanupMemberEvent(instanceCleanupMemberEvent);
+                    }
+                } catch (Exception e) {
+                    if (log.isErrorEnabled()) {
+                        log.error("Error processing instance cleanup member event", e);
+                    }
                 }
+
             }
         });
 
-        eventReceiver.addEventListener(new InstanceCleanupClusterEventListener() {
+        instanceNotifierEventReceiver.addEventListener(new InstanceCleanupClusterEventListener() {
             @Override
             protected void onEvent(Event event) {
                 String clusterIdInPayload = CartridgeAgentConfiguration.getInstance().getClusterId();
                 InstanceCleanupClusterEvent instanceCleanupClusterEvent = (InstanceCleanupClusterEvent) event;
                 if (clusterIdInPayload.equals(instanceCleanupClusterEvent.getClusterId())) {
-                    onInstanceCleanupEvent();
+                    extensionHandler.onInstanceCleanupClusterEvent(instanceCleanupClusterEvent);
                 }
             }
         });
-        Thread eventReceiverThread = new Thread(eventReceiver);
-        eventReceiverThread.start();
-        if(log.isInfoEnabled()) {
+
+        Thread instanceNotifierEventReceiverThread = new Thread(instanceNotifierEventReceiver);
+        instanceNotifierEventReceiverThread.start();
+        if (log.isInfoEnabled()) {
             log.info("Instance notifier event message receiver thread started");
         }
 
-        if(log.isDebugEnabled()) {
+        if (log.isDebugEnabled()) {
             log.debug("Starting tenant event message receiver thread");
         }
-        TenantEventReceiver tenantEventReceiver = new TenantEventReceiver();
 
+        // Wait until message receiver is subscribed to the topic to send the instance started event
+        while (!instanceNotifierEventReceiver.isSubscribed()) {
+            try {
+                Thread.sleep(2000);
+            } catch (InterruptedException e) {
+            }
+        }
+    }
+
+    protected void registerTopologyEventListeners() {
+        if (log.isDebugEnabled()) {
+            log.debug("Starting topology event message receiver thread");
+        }
+        TopologyEventReceiver topologyEventReceiver = new TopologyEventReceiver();
+        topologyEventReceiver.addEventListener(new MemberActivatedEventListener() {
+            @Override
+            protected void onEvent(Event event) {
+                try {
+                    TopologyManager.acquireReadLock();
+                    if (log.isDebugEnabled()) {
+                        log.debug("Member activated event received");
+                    }
+                    MemberActivatedEvent memberActivatedEvent = (MemberActivatedEvent) event;
+                    extensionHandler.onMemberActivatedEvent(memberActivatedEvent);
+                } catch (Exception e) {
+                    if (log.isErrorEnabled()) {
+                        log.error("Error processing member activated event", e);
+                    }
+                } finally {
+                    TopologyManager.releaseReadLock();
+                }
+            }
+        });
+
+        topologyEventReceiver.addEventListener(new MemberTerminatedEventListener() {
+            @Override
+            protected void onEvent(Event event) {
+                try {
+                    TopologyManager.acquireReadLock();
+                    if (log.isDebugEnabled()) {
+                        log.debug("Member terminated event received");
+                    }
+                    MemberTerminatedEvent memberTerminatedEvent = (MemberTerminatedEvent) event;
+                    extensionHandler.onMemberTerminatedEvent(memberTerminatedEvent);
+                } catch (Exception e) {
+                    if (log.isErrorEnabled()) {
+                        log.error("Error processing member terminated event", e);
+                    }
+                } finally {
+                    TopologyManager.releaseReadLock();
+                }
+            }
+        });
+
+        topologyEventReceiver.addEventListener(new MemberSuspendedEventListener() {
+            @Override
+            protected void onEvent(Event event) {
+                try {
+                    TopologyManager.acquireReadLock();
+                    if (log.isDebugEnabled()) {
+                        log.debug("Member suspended event received");
+                    }
+                    MemberSuspendedEvent memberSuspendedEvent = (MemberSuspendedEvent) event;
+                    extensionHandler.onMemberSuspendedEvent(memberSuspendedEvent);
+                } catch (Exception e) {
+                    if (log.isErrorEnabled()) {
+                        log.error("Error processing member suspended event", e);
+                    }
+                } finally {
+                    TopologyManager.releaseReadLock();
+                }
+            }
+        });
+
+        topologyEventReceiver.addEventListener(new CompleteTopologyEventListener() {
+            private boolean initialized;
+
+            @Override
+            protected void onEvent(Event event) {
+                if (!initialized) {
+                    try {
+                        TopologyManager.acquireReadLock();
+                        if (log.isDebugEnabled()) {
+                            log.debug("Complete topology event received");
+                        }
+                        CompleteTopologyEvent completeTopologyEvent = (CompleteTopologyEvent) event;
+                        extensionHandler.onCompleteTopologyEvent(completeTopologyEvent);
+                        initialized = true;
+                    } catch (Exception e) {
+                        if (log.isErrorEnabled()) {
+                            log.error("Error processing complete topology event", e);
+                        }
+                    } finally {
+                        TopologyManager.releaseReadLock();
+                    }
+                }
+            }
+        });
+
+        topologyEventReceiver.addEventListener(new MemberStartedEventListener() {
+            @Override
+            protected void onEvent(Event event) {
+                try {
+                    TopologyManager.acquireReadLock();
+                    if (log.isDebugEnabled()) {
+                        log.debug("Member started event received");
+                    }
+                    MemberStartedEvent memberStartedEvent = (MemberStartedEvent) event;
+                    extensionHandler.onMemberStartedEvent(memberStartedEvent);
+                } catch (Exception e) {
+                    if (log.isErrorEnabled()) {
+                        log.error("Error processing member started event", e);
+                    }
+                } finally {
+                    TopologyManager.releaseReadLock();
+                }
+            }
+        });
+
+        Thread thread = new Thread(topologyEventReceiver);
+        thread.start();
+        if (log.isDebugEnabled()) {
+            log.info("Cartridge Agent topology receiver thread started");
+        }
+    }
+
+    protected void registerTenantEventListeners() {
+
+        if (log.isDebugEnabled()) {
+            log.debug("Starting tenant event message receiver thread");
+        }
+
+        TenantEventReceiver tenantEventReceiver = new TenantEventReceiver();
         tenantEventReceiver.addEventListener(new SubscriptionDomainsAddedEventListener() {
             @Override
             protected void onEvent(Event event) {
                 try {
+                    TenantManager.acquireReadLock();
+                    if (log.isDebugEnabled()) {
+                        log.debug("Subscription domain added event received");
+                    }
                     SubscriptionDomainAddedEvent subscriptionDomainAddedEvent = (SubscriptionDomainAddedEvent) event;
-                    ExtensionUtils.executeSubscriptionDomainAddedExtension(
-                            subscriptionDomainAddedEvent.getTenantId(),
-                            findTenantDomain(subscriptionDomainAddedEvent.getTenantId()),
-                            subscriptionDomainAddedEvent.getDomainName(),
-                            subscriptionDomainAddedEvent.getApplicationContext());
-                }
-                catch (Exception e) {
-                    if(log.isErrorEnabled()) {
-                        log.error("Could not process subscription domain added event", e);
+                    extensionHandler.onSubscriptionDomainAddedEvent(subscriptionDomainAddedEvent);
+                } catch (Exception e) {
+                    if (log.isErrorEnabled()) {
+                        log.error("Error processing subscription domains added event", e);
                     }
+                } finally {
+                    TenantManager.releaseReadLock();
                 }
+
             }
         });
 
@@ -195,15 +394,46 @@ public class CartridgeAgent implements Runnable {
             @Override
             protected void onEvent(Event event) {
                 try {
+                    TenantManager.acquireReadLock();
+                    if (log.isDebugEnabled()) {
+                        log.debug("Subscription domain removed event received");
+                    }
                     SubscriptionDomainRemovedEvent subscriptionDomainRemovedEvent = (SubscriptionDomainRemovedEvent) event;
-                    ExtensionUtils.executeSubscriptionDomainRemovedExtension(
-                            subscriptionDomainRemovedEvent.getTenantId(),
-                            findTenantDomain(subscriptionDomainRemovedEvent.getTenantId()),
-                            subscriptionDomainRemovedEvent.getDomainName());
+                    extensionHandler.onSubscriptionDomainRemovedEvent(subscriptionDomainRemovedEvent);
+                } catch (Exception e) {
+                    if (log.isErrorEnabled()) {
+                        log.error("Error processing subscription domains removed event", e);
+                    }
+                } finally {
+                    TenantManager.releaseReadLock();
                 }
-                catch (Exception e) {
-                    if(log.isErrorEnabled()) {
-                        log.error("Could not process subscription domain removed event", e);
+            }
+        });
+
+        tenantEventReceiver.addEventListener(new CompleteTenantEventListener() {
+            private boolean initialized;
+            @Override
+            protected void onEvent(Event event) {
+                if (!initialized) {
+                    try {
+                        TenantManager.acquireReadLock();
+                        if (log.isDebugEnabled()) {
+                            log.debug("Complete tenant event received");
+                        }
+                        CompleteTenantEvent completeTenantEvent = (CompleteTenantEvent) event;
+                        extensionHandler.onCompleteTenantEvent(completeTenantEvent);
+                        initialized = true;
+                    } catch (Exception e) {
+                        if (log.isErrorEnabled()) {
+                            log.error("Error processing complete tenant event", e);
+                        }
+                    } finally {
+                        TenantManager.releaseReadLock();
+                    }
+
+                } else {
+                    if (log.isInfoEnabled()) {
+                        log.info("Complete tenant event updating task disabled");
                     }
                 }
             }
@@ -211,69 +441,43 @@ public class CartridgeAgent implements Runnable {
 
         Thread tenantEventReceiverThread = new Thread(tenantEventReceiver);
         tenantEventReceiverThread.start();
-        if(log.isInfoEnabled()) {
+        if (log.isInfoEnabled()) {
             log.info("Tenant event message receiver thread started");
         }
-
-        // Wait until message receiver is subscribed to the topic to
-        // send the instance started event
-        while (!eventReceiver.isSubscribed())  {
-            try {
-                Thread.sleep(2000);
-            } catch (InterruptedException e) {
-            }
-        }
-	}
-
-    private String findTenantDomain(int tenantId) {
-        try {
-            TenantManager.acquireReadLock();
-            Tenant tenant = TenantManager.getInstance().getTenant(tenantId);
-            if(tenant == null) {
-                throw new RuntimeException(String.format("Tenant could not be found: [tenant-id] %d", tenantId));
-            }
-            return tenant.getTenantDomain();
-        }
-        finally {
-            TenantManager.releaseReadLock();
-        }
     }
 
-	protected void validateRequiredSystemProperties() {
-		String jndiPropertiesDir = System.getProperty(CartridgeAgentConstants.JNDI_PROPERTIES_DIR);
-        if(StringUtils.isBlank(jndiPropertiesDir)) {
-            if(log.isErrorEnabled()){
+    protected void validateRequiredSystemProperties() {
+        String jndiPropertiesDir = System.getProperty(CartridgeAgentConstants.JNDI_PROPERTIES_DIR);
+        if (StringUtils.isBlank(jndiPropertiesDir)) {
+            if (log.isErrorEnabled()) {
                 log.error(String.format("System property not found: %s", CartridgeAgentConstants.JNDI_PROPERTIES_DIR));
             }
             return;
         }
 
         String payloadPath = System.getProperty(CartridgeAgentConstants.PARAM_FILE_PATH);
-        if(StringUtils.isBlank(payloadPath)) {
-            if(log.isErrorEnabled()){
+        if (StringUtils.isBlank(payloadPath)) {
+            if (log.isErrorEnabled()) {
                 log.error(String.format("System property not found: %s", CartridgeAgentConstants.PARAM_FILE_PATH));
             }
             return;
         }
 
         String extensionsDir = System.getProperty(CartridgeAgentConstants.EXTENSIONS_DIR);
-        if(StringUtils.isBlank(extensionsDir)) {
-            if(log.isWarnEnabled()){
+        if (StringUtils.isBlank(extensionsDir)) {
+            if (log.isWarnEnabled()) {
                 log.warn(String.format("System property not found: %s", CartridgeAgentConstants.EXTENSIONS_DIR));
             }
         }
-	}
-
-    private static void publishLogs (LogPublisherManager logPublisherManager) {
+    }
 
+    private static void publishLogs(LogPublisherManager logPublisherManager) {
         // check if enabled
         if (DataPublisherConfiguration.getInstance().isEnabled()) {
-
             List<String> logFilePaths = CartridgeAgentConfiguration.getInstance().getLogFilePaths();
             if (logFilePaths == null) {
                 log.error("No valid log file paths found, no logs will be published");
                 return;
-
             } else {
                 // initialize the log publishing
                 try {
@@ -288,7 +492,6 @@ public class CartridgeAgent implements Runnable {
                 for (String logFilePath : logFilePaths) {
                     try {
                         logPublisherManager.start(logFilePath);
-
                     } catch (DataPublisherException e) {
                         log.error("Error occurred in publishing logs ", e);
                     }
@@ -297,91 +500,8 @@ public class CartridgeAgent implements Runnable {
         }
     }
 
-    private void onArtifactUpdateEvent(ArtifactUpdatedEvent event) {
-        ArtifactUpdatedEvent artifactUpdatedEvent = event;
-        if(log.isInfoEnabled()) {
-            log.info(String.format("Artifact update event received: %s", artifactUpdatedEvent.toString()));
-        }
-
-        String clusterIdInPayload = CartridgeAgentConfiguration.getInstance().getClusterId();
-        String localRepoPath = CartridgeAgentConfiguration.getInstance().getAppPath();
-        String clusterIdInMessage = artifactUpdatedEvent.getClusterId();
-        String repoURL = artifactUpdatedEvent.getRepoURL();
-        String repoPassword = CartridgeAgentUtils.decryptPassword(artifactUpdatedEvent.getRepoPassword());
-        String repoUsername = artifactUpdatedEvent.getRepoUserName();
-        String tenantId = artifactUpdatedEvent.getTenantId();
-        boolean isMultitenant = CartridgeAgentConfiguration.getInstance().isMultitenant();
-
-        if(StringUtils.isNotEmpty(repoURL) && (clusterIdInPayload != null) && clusterIdInPayload.equals(clusterIdInMessage)) {
-            if(log.isInfoEnabled()) {
-                log.info("Executing git checkout");
-            }
-            RepositoryInformation repoInformation = new RepositoryInformation();
-            repoInformation.setRepoUsername(repoUsername);
-            if(repoPassword == null) {
-            	repoInformation.setRepoPassword("");
-            }else {
-            	repoInformation.setRepoPassword(repoPassword);
-            }            
-            repoInformation.setRepoUrl(repoURL);
-            repoInformation.setRepoPath(localRepoPath);
-            repoInformation.setTenantId(tenantId);
-            repoInformation.setMultitenant(isMultitenant);
-            boolean cloneExists = GitBasedArtifactRepository.getInstance().cloneExists(repoInformation);
-            GitBasedArtifactRepository.getInstance().checkout(repoInformation);
-
-            ExtensionUtils.executeArtifactsUpdatedExtension();
-
-            if(!cloneExists){
-                // Executed git clone, publish instance activated event
-                CartridgeAgentEventPublisher.publishInstanceActivatedEvent();
-            }
-
-            // Start the artifact update task
-            boolean artifactUpdateEnabled = Boolean.parseBoolean(System.getProperty(CartridgeAgentConstants.ENABLE_ARTIFACT_UPDATE));
-            if (artifactUpdateEnabled) {
-
-                long artifactUpdateInterval = 10;
-                // get update interval
-                String artifactUpdateIntervalStr = System.getProperty(CartridgeAgentConstants.ARTIFACT_UPDATE_INTERVAL);
-
-                if (artifactUpdateIntervalStr != null && !artifactUpdateIntervalStr.isEmpty()) {
-                    try {
-                        artifactUpdateInterval = Long.parseLong(artifactUpdateIntervalStr);
-
-                    } catch (NumberFormatException e) {
-                        log.error("Invalid artifact sync interval specified ", e);
-                        artifactUpdateInterval = 10;
-                    }
-                }
-
-                log.info("Artifact updating task enabled, update interval: " + artifactUpdateInterval + "s");
-                GitBasedArtifactRepository.getInstance().scheduleSyncTask(repoInformation, artifactUpdateInterval);
-
-            } else {
-                log.info("Artifact updating task disabled");
-            }
-
-        }
-    }
-
-    private void onInstanceCleanupEvent() {
-        if(log.isInfoEnabled()) {
-            log.info("Executing cleaning up the data in the cartridge instance...");
-        }
-        //sending event on the maintenance mode
-        CartridgeAgentEventPublisher.publishMaintenanceModeEvent();
-
-        //cleaning up the cartridge instance's data
-        ExtensionUtils.executeCleanupExtension();
-        if(log.isInfoEnabled()) {
-            log.info("cleaning up finished in the cartridge instance...");
-        }
-        if(log.isInfoEnabled()) {
-            log.info("publishing ready to shutdown event...");
-        }
-        //publishing the Ready to shutdown event after performing the cleanup
-        CartridgeAgentEventPublisher.publishInstanceReadyToShutdownEvent();
+    public static ExtensionHandler getExtensionHandler() {
+        return extensionHandler;
     }
 
     public void terminate() {
diff --git a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/Main.java b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/Main.java
index a1be237..c2fbed1 100644
--- a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/Main.java
+++ b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/Main.java
@@ -53,12 +53,6 @@ public class Main {
                 }
             });
 
-            // Configure log4j properties
-            if(log.isDebugEnabled()) {
-                log.debug("Configuring log4j.properties file path");
-            }
-            PropertyConfigurator.configure(System.getProperty("log4j.properties.file.path"));
-
             // Generate jndi.properties file
             JndiConfigurator.configure();
 
@@ -66,25 +60,25 @@ public class Main {
             CartridgeAgentConfiguration.getInstance();
 
             if (args.length >= 1) {
-            	String className = args[0];
-				try {
-					Constructor<?> c = Class.forName(className)
-							.getConstructor();
-					cartridgeAgent = (CartridgeAgent) c.newInstance();
-					log.info("Loaded Cartridge Agent using [class] "+className);
-				} catch (Exception e) {
-					String msg = String.format("Cannot load Cartridge Agent from [class name] %s, "
-							+ "hence using the default agent.", className);
-					log.warn(msg, e);
-				}
+                String className = args[0];
+                try {
+                    Constructor<?> c = Class.forName(className)
+                            .getConstructor();
+                    cartridgeAgent = (CartridgeAgent) c.newInstance();
+                    log.info("Loaded Cartridge Agent using [class] " + className);
+                } catch (Exception e) {
+                    String msg = String.format("Cannot load Cartridge Agent from [class name] %s, "
+                            + "hence using the default agent.", className);
+                    log.warn(msg, e);
+                }
             }
-            
+
             if (cartridgeAgent == null) {
-            	// load default agent
-            	cartridgeAgent = new CartridgeAgent();
-            	if (log.isDebugEnabled()) {
-            		log.debug("Loading default Cartridge Agent.");
-            	}
+                // load default agent
+                cartridgeAgent = new CartridgeAgent();
+                if (log.isDebugEnabled()) {
+                    log.debug("Loading default Cartridge Agent.");
+                }
             }
             // start agent
             Thread thread = new Thread(cartridgeAgent);
diff --git a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/RepositoryFileListener.java b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/RepositoryFileListener.java
index 8e79c66..59163d5 100644
--- a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/RepositoryFileListener.java
+++ b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/RepositoryFileListener.java
@@ -32,10 +32,10 @@ public class RepositoryFileListener implements Runnable {
         if(log.isDebugEnabled()) {
 		    log.debug("Executing repository file listener");
         }
-		boolean commitStatus = GitBasedArtifactRepository.getInstance().commit();
-        if(log.isDebugEnabled()) {
-		    log.debug("Commit status: " + commitStatus);
-        }
+		//boolean commitStatus = GitBasedArtifactRepository.getInstance().commit();
+        //if(log.isDebugEnabled()) {
+		//    log.debug("Commit status: " + commitStatus);
+       // }
 	}
 
 }
diff --git a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/artifact/deployment/synchronizer/RepositoryInformation.java b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/artifact/deployment/synchronizer/RepositoryInformation.java
index 1be78a4..c35b70d 100644
--- a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/artifact/deployment/synchronizer/RepositoryInformation.java
+++ b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/artifact/deployment/synchronizer/RepositoryInformation.java
@@ -31,6 +31,7 @@ public class RepositoryInformation {
 	private String repoPath;
 	private String tenantId;
 	private boolean isMultitenant;
+    private boolean commitEnabled;
 	
 	public String getRepoUrl() {
 		return repoUrl;
@@ -68,5 +69,12 @@ public class RepositoryInformation {
 	public void setMultitenant(boolean isMultitenant) {
 		this.isMultitenant = isMultitenant;
 	}
-	
+
+    public boolean isCommitEnabled() {
+        return commitEnabled;
+    }
+
+    public void setCommitEnabled(boolean commitEnabled) {
+        this.commitEnabled = commitEnabled;
+    }
 }
diff --git a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/artifact/deployment/synchronizer/git/impl/GitBasedArtifactRepository.java b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/artifact/deployment/synchronizer/git/impl/GitBasedArtifactRepository.java
index c741295..7954dc9 100644
--- a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/artifact/deployment/synchronizer/git/impl/GitBasedArtifactRepository.java
+++ b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/artifact/deployment/synchronizer/git/impl/GitBasedArtifactRepository.java
@@ -21,15 +21,18 @@ package org.apache.stratos.cartridge.agent.artifact.deployment.synchronizer.git.
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.stratos.cartridge.agent.CartridgeAgent;
 import org.apache.stratos.cartridge.agent.artifact.deployment.synchronizer.RepositoryInformation;
 import org.apache.stratos.cartridge.agent.artifact.deployment.synchronizer.git.internal.CustomJschConfigSessionFactory;
 import org.apache.stratos.cartridge.agent.artifact.deployment.synchronizer.git.internal.GitDeploymentSynchronizerConstants;
 import org.apache.stratos.cartridge.agent.artifact.deployment.synchronizer.git.internal.RepositoryContext;
 import org.apache.stratos.cartridge.agent.artifact.deployment.synchronizer.git.util.Utilities;
-import org.apache.stratos.cartridge.agent.util.ExtensionUtils;
+import org.apache.stratos.cartridge.agent.config.CartridgeAgentConfiguration;
+import org.apache.stratos.cartridge.agent.extensions.ExtensionHandler;
 import org.eclipse.jgit.api.*;
 import org.eclipse.jgit.api.errors.*;
 import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
 import org.eclipse.jgit.lib.StoredConfig;
 import org.eclipse.jgit.storage.file.FileRepository;
 import org.eclipse.jgit.transport.SshSessionFactory;
@@ -38,33 +41,32 @@ import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;
 import java.io.File;
 import java.io.IOException;
 import java.util.Iterator;
-import java.util.Map.Entry;
+import java.util.List;
 import java.util.Set;
 import java.util.concurrent.*;
 
 /**
  * Git based artifact repository.
- * 
- * 
  */
 public class GitBasedArtifactRepository {
 
     private static final int SUPER_TENANT_ID = -1234;
 
-	private static final Log log = LogFactory.getLog(GitBasedArtifactRepository.class);
+    private static final Log log = LogFactory.getLog(GitBasedArtifactRepository.class);
+    private final ExtensionHandler extensionHandler;
 
     //Map to keep track of git context per tenant (remote urls, jgit git objects, etc.)
     private static ConcurrentHashMap<Integer, RepositoryContext>
-    					tenantToRepoContextMap = new ConcurrentHashMap<Integer, RepositoryContext>();
+            tenantToRepoContextMap = new ConcurrentHashMap<Integer, RepositoryContext>();
     private static volatile GitBasedArtifactRepository gitBasedArtifactRepository;
-    private static String SUPER_TENANT_APP_PATH = "/repository/deployment/server/";
-    private static String TENANT_PATH = "/repository/tenants/";
-
-    private GitBasedArtifactRepository () {
+    private static String SUPER_TENANT_REPO_PATH = "/repository/deployment/server/";
+    private static String TENANT_REPO_PATH = "/repository/tenants/";
 
+    private GitBasedArtifactRepository() {
+        extensionHandler = CartridgeAgent.getExtensionHandler();
     }
 
-    public static GitBasedArtifactRepository getInstance () {
+    public static GitBasedArtifactRepository getInstance() {
 
         if (gitBasedArtifactRepository == null) {
             synchronized (GitBasedArtifactRepository.class) {
@@ -80,40 +82,38 @@ public class GitBasedArtifactRepository {
      * initializes and populates the git context with relevant data
      *
      * @param repositoryInformation id of the tenant
-     *
      */
-    private void initGitContext (RepositoryInformation repositoryInformation)  {
+    private void initGitContext(RepositoryInformation repositoryInformation) {
+
+
+        log.info("Initializing git context.");
 
-    	
-    	log.info("Initializing git context.");
-    	
-    	int tenantId = Integer.parseInt(repositoryInformation.getTenantId());
-    	String gitLocalRepoPath = repositoryInformation.getRepoPath();
+        int tenantId = Integer.parseInt(repositoryInformation.getTenantId());
+        String gitLocalRepoPath = repositoryInformation.getRepoPath();
         RepositoryContext gitRepoCtx = new RepositoryContext();
         String gitRemoteRepoUrl = repositoryInformation.getRepoUrl();
         boolean isMultitenant = repositoryInformation.isMultitenant();
-        
+
         log.info("local path " + gitLocalRepoPath);
         log.info("remote url " + gitRemoteRepoUrl);
         log.info("tenant " + tenantId);
-        
+
         gitRepoCtx.setTenantId(tenantId);
-        gitRepoCtx.setGitLocalRepoPath(getRepoPathForTenantId(tenantId,gitLocalRepoPath,isMultitenant));        
+        gitRepoCtx.setGitLocalRepoPath(getRepoPathForTenantId(tenantId, gitLocalRepoPath, isMultitenant));
         gitRepoCtx.setGitRemoteRepoUrl(gitRemoteRepoUrl);
-		
-		gitRepoCtx.setRepoUsername(repositoryInformation.getRepoUsername());
-		gitRepoCtx.setRepoPassword(repositoryInformation.getRepoPassword());
+
+        gitRepoCtx.setRepoUsername(repositoryInformation.getRepoUsername());
+        gitRepoCtx.setRepoPassword(repositoryInformation.getRepoPassword());
 
         try {
-			if(isKeyBasedAuthentication(gitRemoteRepoUrl, tenantId)) {
-			    gitRepoCtx.setKeyBasedAuthentication(true);
-			    initSSHAuthentication();
-			}
-			else
-			    gitRepoCtx.setKeyBasedAuthentication(false);
-		} catch (Exception e1) {
-			log.error("Exception occurred.. " + e1.getMessage(), e1);
-		}
+            if (isKeyBasedAuthentication(gitRemoteRepoUrl, tenantId)) {
+                gitRepoCtx.setKeyBasedAuthentication(true);
+                initSSHAuthentication();
+            } else
+                gitRepoCtx.setKeyBasedAuthentication(false);
+        } catch (Exception e1) {
+            log.error("Exception occurred.. " + e1.getMessage(), e1);
+        }
 
         FileRepository localRepo = null;
         try {
@@ -133,54 +133,66 @@ public class GitBasedArtifactRepository {
     }
 
 
-
     // If tenant id is "-1234", then its super tenant, else tenant
     private static String getRepoPathForTenantId(int tenantId,
-                       String gitLocalRepoPath, boolean isMultitenant) {
-               
-    	
-		StringBuilder repoPathBuilder = new StringBuilder();
-		String repoPath = null;
-
-		if (isMultitenant) {
-			if (tenantId == SUPER_TENANT_ID) {
-				repoPathBuilder.append(gitLocalRepoPath).append(
-						SUPER_TENANT_APP_PATH);
-			} else {
-				// create folder with tenant id
-				createTenantDir(tenantId, gitLocalRepoPath);
-				repoPathBuilder.append(gitLocalRepoPath).append(TENANT_PATH)
-						.append(tenantId);
-			}
-
-			repoPath = repoPathBuilder.toString();
-		} else {
-			repoPath = gitLocalRepoPath;
-		}
-		log.info("Repo path returned : " + repoPath);
-		return repoPath;
-       }
+                                                 String gitLocalRepoPath, boolean isMultitenant) {
 
-       private static void createTenantDir(int tenantId, String path) {
-               String dirPathName = path+TENANT_PATH+tenantId;
-               boolean dirStatus = new File(dirPathName).mkdir();
-               if(dirStatus){
-                       log.info("Successfully created directory ["+dirPathName+"] ");
-               }else {
-                       log.error("Directory creating failed in ["+dirPathName+"] ");
-               }       
-       }
 
+        StringBuilder repoPathBuilder = new StringBuilder();
+        String repoPath = null;
+
+        if (isMultitenant) {
+            if (tenantId == SUPER_TENANT_ID) {
+                //check if the relevant path is set as a startup param
+                String superTenantRepoPath = CartridgeAgentConfiguration.getInstance().getSuperTenantRepositoryPath();
+
+                if (superTenantRepoPath != null && !superTenantRepoPath.isEmpty()) {
+                    superTenantRepoPath = superTenantRepoPath.startsWith("/") ? superTenantRepoPath : "/".concat(superTenantRepoPath);
+                    repoPathBuilder.append(gitLocalRepoPath).append(superTenantRepoPath);
+
+                } else {
+                    repoPathBuilder.append(gitLocalRepoPath).append(SUPER_TENANT_REPO_PATH);
+                }
+            } else {
+                // create folder with tenant id
+                createTenantDir(tenantId, gitLocalRepoPath);
+                //check if the relevant path is set as a startup param
+                String tenantRepoPath = CartridgeAgentConfiguration.getInstance().getTenantRepositoryPath();
+
+                if (tenantRepoPath != null && !tenantRepoPath.isEmpty()) {
+                    tenantRepoPath = tenantRepoPath.startsWith("/") ? tenantRepoPath : "/".concat(tenantRepoPath);
+                    tenantRepoPath = tenantRepoPath.endsWith("/") ? tenantRepoPath : tenantRepoPath.concat("/");
+
+                    repoPathBuilder.append(gitLocalRepoPath).append(tenantRepoPath).append(tenantId);
+                } else {
+                    repoPathBuilder.append(gitLocalRepoPath).append(TENANT_REPO_PATH).append(tenantId);
+                }
+            }
 
+            repoPath = repoPathBuilder.toString();
+        } else {
+            repoPath = gitLocalRepoPath;
+        }
+        log.info("Repo path returned : " + repoPath);
+        return repoPath;
+    }
 
+    private static void createTenantDir(int tenantId, String path) {
+        String dirPathName = path + TENANT_REPO_PATH + tenantId;
+        boolean dirStatus = new File(dirPathName).mkdir();
+        if (dirStatus) {
+            log.info("Successfully created directory [" + dirPathName + "] ");
+        } else {
+            log.error("Directory creating failed in [" + dirPathName + "] ");
+        }
+    }
 
 
     /**
      * Checks if key based authentication (SSH) is required
      *
-     * @param url git repository url for the tenant
+     * @param url      git repository url for the tenant
      * @param tenantId id of the tenant
-     *
      * @return true if SSH authentication is required, else false
      */
     private boolean isKeyBasedAuthentication(String url, int tenantId) {
@@ -189,20 +201,14 @@ public class GitBasedArtifactRepository {
                 url.startsWith(GitDeploymentSynchronizerConstants.GIT_HTTPS_REPO_URL_PREFIX)) {//http or https url
             // authentication with username and password, not key based
             return false;
-        }
-
-        else if (url.startsWith(GitDeploymentSynchronizerConstants.GITHUB_READ_ONLY_REPO_URL_PREFIX)) { //github read-only repo url
+        } else if (url.startsWith(GitDeploymentSynchronizerConstants.GITHUB_READ_ONLY_REPO_URL_PREFIX)) { //github read-only repo url
             // no authentication required
             return false;
-        }
-
-        else if (url.startsWith(GitDeploymentSynchronizerConstants.GIT_REPO_SSH_URL_PREFIX) ||
+        } else if (url.startsWith(GitDeploymentSynchronizerConstants.GIT_REPO_SSH_URL_PREFIX) ||
                 url.contains(GitDeploymentSynchronizerConstants.GIT_REPO_SSH_URL_SUBSTRING)) { //other repo, needs ssh authentication
             // key based authentication
             return true;
-        }
-
-        else {
+        } else {
             log.error("Invalid git URL provided for tenant " + tenantId);
             throw new RuntimeException("Invalid git URL provided for tenant " + tenantId);
         }
@@ -211,7 +217,7 @@ public class GitBasedArtifactRepository {
     /**
      * Initializes SSH authentication
      */
-    private void initSSHAuthentication () {
+    private void initSSHAuthentication() {
 
         SshSessionFactory.setInstance(new CustomJschConfigSessionFactory());
     }
@@ -219,24 +225,23 @@ public class GitBasedArtifactRepository {
     /**
      * Caches RepositoryContext against tenant repository path
      *
-     * @param tenantId tenant repository path
+     * @param tenantId   tenant repository path
      * @param gitRepoCtx RepositoryContext instance for tenant
      */
     private void cacheGitRepoContext(int tenantId, RepositoryContext gitRepoCtx) {
 
-    	log.info("caching repo context");
-        tenantToRepoContextMap.put(tenantId, gitRepoCtx);
-    }
+        log.info("caching repo context");
 
+    tenantToRepoContextMap.put(tenantId, gitRepoCtx);
+}
     /**
      * Retrieve cached RepositoryContext relevant to the tenant's local repo path
      *
      * @param tenantId
-     *
      * @return corresponding RepositoryContext instance for the
      * tenant's local repo if available, else null
      */
-    private RepositoryContext retrieveCachedGitContext (int tenantId) {
+    private RepositoryContext retrieveCachedGitContext(int tenantId) {
 
         return tenantToRepoContextMap.get(tenantId);
     }
@@ -245,66 +250,55 @@ public class GitBasedArtifactRepository {
      * Commits any changes in the local repository to the relevant remote repository
      *
      * @return
-     *      
      */
-    public boolean commit() {
-    	// TODO implement later, this is applicable for management node.
-
-		for (Entry<Integer, RepositoryContext> tenantMap : tenantToRepoContextMap
-				.entrySet()) {
-
-			int tenantId = tenantMap.getKey();
-			//log.info("map count has values..tenant Id : " + tenantId);
-			
-			RepositoryContext gitRepoCtx = retrieveCachedGitContext(tenantId);
-			if (gitRepoCtx == null) {
-				
-					log.info("No git repository context information found for tenant "
-							+ tenantId);
-
-				return false;
-			}
-
-			Git git = gitRepoCtx.getGit();
-			StatusCommand statusCmd = git.status();
-			Status status = null;
-			try {
-				status = statusCmd.call();
-
-			} catch (GitAPIException e) {
-				log.error(
-						"Git status operation for tenant "
-								+ gitRepoCtx.getTenantId() + " failed, ", e);
-				return false;
-			}
-			//log.info("status : " + status.toString());
-			if (status.isClean()) {// no changes, nothing to commit
-				
-					log.debug("No changes detected in the local repository for tenant "
-							+ tenantId);
-				return false;
-			}
-			
-			addArtifacts(gitRepoCtx, getNewArtifacts(status));
-			addArtifacts(gitRepoCtx, getModifiedArtifacts(status));
-			removeArtifacts(gitRepoCtx, getRemovedArtifacts(status));
-			commitToLocalRepo(gitRepoCtx);
-			pushToRemoteRepo(gitRepoCtx);
-
-			return false;
-
-		}
-		return false;
+    public void commit(RepositoryInformation repoInfo) {
+        // TODO implement later, this is applicable for management node.
+
+       // for (Entry<Integer, RepositoryContext> tenantMap : tenantToRepoContextMap
+       //         .entrySet()) {
+
+            int tenantId = Integer.parseInt(repoInfo.getTenantId());
+            //log.info("map count has values..tenant Id : " + tenantId);
+
+            RepositoryContext gitRepoCtx = retrieveCachedGitContext(tenantId);
+            Git git = gitRepoCtx.getGit();
+            StatusCommand statusCmd = git.status();
+            Status status = null;
+            try {
+                status = statusCmd.call();
+
+            } catch (GitAPIException e) {
+                log.error(
+                        "Git status operation for tenant "
+                                + gitRepoCtx.getTenantId() + " failed, ", e);
+
+            }
+            //log.info("status : " + status.toString());
+            if (status.isClean()) {// no changes, nothing to commit
+                if (log.isDebugEnabled()) {
+                    log.debug("No changes detected in the local repository for tenant " + tenantId);
+                }
+
+                return;
+            }
+
+            addArtifacts(gitRepoCtx, getNewArtifacts(status));
+            addArtifacts(gitRepoCtx, getModifiedArtifacts(status));
+            removeArtifacts(gitRepoCtx, getRemovedArtifacts(status));
+            commitToLocalRepo(gitRepoCtx);
+            pushToRemoteRepo(gitRepoCtx);
+
+        //}
+        //return false;
     }
 
     /**
      * Returns the newly added artifact set relevant to the current status of the repository
      *
      * @param status git status
-     *
      * @return artifact names set
      */
-    private Set<String> getNewArtifacts (Status status) {
+    private Set<String> getNewArtifacts(Status status) {
 
         return status.getUntracked();
     }
@@ -313,10 +307,9 @@ public class GitBasedArtifactRepository {
      * Returns the removed (undeployed) artifact set relevant to the current status of the repository
      *
      * @param status git status
-     *
      * @return artifact names set
      */
-    private Set<String> getRemovedArtifacts (Status status) {
+    private Set<String> getRemovedArtifacts(Status status) {
 
         return status.getMissing();
     }
@@ -325,10 +318,9 @@ public class GitBasedArtifactRepository {
      * Return the modified artifacts set relevant to the current status of the repository
      *
      * @param status git status
-     *
      * @return artifact names set
      */
-    private Set<String> getModifiedArtifacts (Status status) {
+    private Set<String> getModifiedArtifacts(Status status) {
 
         return status.getModified();
     }
@@ -337,36 +329,40 @@ public class GitBasedArtifactRepository {
      * Adds the artifacts to the local staging area
      *
      * @param gitRepoCtx RepositoryContext instance
-     * @param artifacts set of artifacts
+     * @param artifacts  set of artifacts
      */
-    private void addArtifacts (RepositoryContext gitRepoCtx, Set<String> artifacts) {
+    private void addArtifacts(RepositoryContext gitRepoCtx, Set<String> artifacts) {
 
-        if(artifacts.isEmpty())
+        if (artifacts.isEmpty())
             return;
 
         AddCommand addCmd = gitRepoCtx.getGit().add();
         Iterator<String> it = artifacts.iterator();
-        while(it.hasNext())
+        while (it.hasNext())
             addCmd.addFilepattern(it.next());
 
         try {
             addCmd.call();
+            if (log.isDebugEnabled()) {
+                log.debug("Added artifacts for tenant : " + gitRepoCtx.getTenantId());
+            }
 
         } catch (GitAPIException e) {
             log.error("Adding artifact to the local repository at " + gitRepoCtx.getGitLocalRepoPath() + "failed", e);
-            e.printStackTrace();
+            log.error(e);
         }
+
     }
 
     /**
      * Removes the set of artifacts from local repo
      *
      * @param gitRepoCtx RepositoryContext instance
-     * @param artifacts Set of artifact names to remove
+     * @param artifacts  Set of artifact names to remove
      */
-    private void removeArtifacts (RepositoryContext gitRepoCtx, Set<String> artifacts) {
+    private void removeArtifacts(RepositoryContext gitRepoCtx, Set<String> artifacts) {
 
-        if(artifacts.isEmpty())
+        if (artifacts.isEmpty())
             return;
 
         RmCommand rmCmd = gitRepoCtx.getGit().rm();
@@ -377,10 +373,13 @@ public class GitBasedArtifactRepository {
 
         try {
             rmCmd.call();
+            if (log.isDebugEnabled()) {
+                log.debug("Removed artifacts for tenant : " + gitRepoCtx.getTenantId());
+            }
 
         } catch (GitAPIException e) {
             log.error("Removing artifact from the local repository at " + gitRepoCtx.getGitLocalRepoPath() + "failed", e);
-            e.printStackTrace();
+            log.error(e);
         }
     }
 
@@ -389,7 +388,7 @@ public class GitBasedArtifactRepository {
      *
      * @param gitRepoCtx RepositoryContext instance for the tenant
      */
-    private void commitToLocalRepo (RepositoryContext gitRepoCtx) {
+    private void commitToLocalRepo(RepositoryContext gitRepoCtx) {
 
         CommitCommand commitCmd = gitRepoCtx.getGit().commit();
         commitCmd.setMessage("tenant " + gitRepoCtx.getTenantId() + "'s artifacts committed to local repo at " +
@@ -397,10 +396,12 @@ public class GitBasedArtifactRepository {
 
         try {
             commitCmd.call();
+            if (log.isDebugEnabled()) {
+                log.debug("Committed artifacts for tenant : " + gitRepoCtx.getTenantId());
+            }
 
         } catch (GitAPIException e) {
             log.error("Committing artifacts to local repository failed for tenant " + gitRepoCtx.getTenantId(), e);
-            e.printStackTrace();
         }
     }
 
@@ -412,7 +413,7 @@ public class GitBasedArtifactRepository {
     private void pushToRemoteRepo(RepositoryContext gitRepoCtx) {
 
         PushCommand pushCmd = gitRepoCtx.getGit().push();
-        if(!gitRepoCtx.getKeyBasedAuthentication()) {
+        if (!gitRepoCtx.getKeyBasedAuthentication()) {
             UsernamePasswordCredentialsProvider credentialsProvider = createCredentialsProvider(gitRepoCtx);
             if (credentialsProvider != null)
                 pushCmd.setCredentialsProvider(credentialsProvider);
@@ -420,47 +421,173 @@ public class GitBasedArtifactRepository {
 
         try {
             pushCmd.call();
+            if (log.isDebugEnabled()) {
+                log.debug("Pushed artifacts for tenant : " + gitRepoCtx.getTenantId());
+            }
 
         } catch (GitAPIException e) {
             log.error("Pushing artifacts to remote repository failed for tenant " + gitRepoCtx.getTenantId(), e);
-            e.printStackTrace();
+
         }
     }
 
-    public boolean checkout(RepositoryInformation repositoryInformation) {
-        /*if(log.isInfoEnabled()) {
-    	    log.info("Executing checkout");
-        }*/
+   /* public boolean checkout(RepositoryInformation repositoryInformation) {
+
 
         if (log.isDebugEnabled()) {
-            log.debug("Artifact checkout will be done by thread " + Thread.currentThread().getName() + " - " +
-                Thread.currentThread().getId());
+            log.debug("Artifact checkout done by thread " + Thread.currentThread().getName() + " - " +
+                    Thread.currentThread().getId());
         }
 
-    	int tenantId = Integer.parseInt(repositoryInformation.getTenantId());
-    	
-    	// if context for tenant is not initialized
-    	if(tenantToRepoContextMap.get(tenantId) == null) {
-	    	initGitContext(repositoryInformation);
-    	}
-    	
-		RepositoryContext gitRepoCtx = retrieveCachedGitContext(tenantId);
-		
-		if (gitRepoCtx == null) { // to handle super tenant scenario
-			log.info("No git repository context information found for deployment synchronizer");
+        int tenantId = Integer.parseInt(repositoryInformation.getTenantId());
+
+        // if context for tenant is not initialized
+        if (tenantToRepoContextMap.get(tenantId) == null)
+            initGitContext(repositoryInformation);
 
-			return true;
-		}
+
+        RepositoryContext gitRepoCtx = retrieveCachedGitContext(tenantId);
+        if (gitRepoCtx == null) { //to handle super tenant scenario
+            // if(log.isDebugEnabled())
+            log.info("No git repository context information found for deployment synchronizer");
+
+            return true;
+        }
 
         synchronized (gitRepoCtx) {
-            if(!gitRepoCtx.cloneExists())
+            if (!gitRepoCtx.cloneExists())
                 cloneRepository(gitRepoCtx);
 
             return pullArtifacts(gitRepoCtx);
         }
+    } */
+   public boolean checkout (RepositoryInformation repositoryInformation) throws Exception {
+
+       int tenantId = Integer.parseInt(repositoryInformation.getTenantId());
+
+       // if context for tenant is not initialized
+       if (tenantToRepoContextMap.get(tenantId) == null) {
+           initGitContext(repositoryInformation);
+       }
+
+       RepositoryContext gitRepoCtx = retrieveCachedGitContext(tenantId);
+
+       File gitRepoDir = new File(gitRepoCtx.getGitLocalRepoPath());
+       if (!gitRepoDir.exists()) {
+           return cloneRepository(gitRepoCtx);
+       }
+       else {
+           if (isValidGitRepo(gitRepoCtx)) {
+               if (log.isDebugEnabled()) {
+                   log.debug("Existing git repository detected for tenant " + gitRepoCtx.getTenantId() + ", no clone required");
+               }
+
+               return pullAndHandleErrors(gitRepoCtx);
+
+           } else {
+               // not a valid git repo, check if the directory is non-empty
+               if (gitRepoDir.list().length > 0) {
+                   // directory is non empty. sync existing artifacts with the remote repository
+                   if (syncInitialLocalArtifacts(gitRepoCtx)) {
+                       log.info("Existing local artifacts for tenant [" + gitRepoCtx.getTenantId() + "] synchronized with remote repository successfully");
+                       // pull any changes from the remote repo
+                       return pullAndHandleErrors(gitRepoCtx);
+                   }
+                   return false;
+
+               } else {
+                   // directory is empty, clone
+                   return cloneRepository(gitRepoCtx);
+               }
+           }
+       }
+   }
+
+    private boolean pullAndHandleErrors (RepositoryContext gitRepoCtx) {
+
+        try {
+            return pullArtifacts(gitRepoCtx);
+
+        } catch (CheckoutConflictException e) {
+            // checkout from remote HEAD
+            return checkoutFromRemoteHead(gitRepoCtx, e.getConflictingPaths());
+            // pull again
+            /*try {
+                return pullArtifacts(gitRepoCtx);
+
+            } catch (GitAPIException e1) {
+                //cannot happen here
+                log.error("Git pull failed for tenant " + gitRepoCtx.getTenantId(), e1);
+                return false;
+            }*/
+        }
     }
-    
-    public void scheduleSyncTask (RepositoryInformation repoInformation, long delay) {
+
+    private boolean checkoutFromRemoteHead(RepositoryContext gitRepoCtx, List<String> paths) {
+
+        boolean checkoutSuccess = false;
+
+        CheckoutCommand checkoutCmd = gitRepoCtx.getGit().checkout();
+        for(String path : paths) {
+            checkoutCmd.addPath(path);
+            if(log.isDebugEnabled()) {
+                log.debug("Added the file path " + path + " to checkout from the remote repository");
+            }
+        }
+        // specify the start point as the HEAD of remote repository
+        checkoutCmd.setStartPoint(GitDeploymentSynchronizerConstants.REMOTES_ORIGIN_MASTER);
+
+        try {
+            checkoutCmd.call();
+            checkoutSuccess = true;
+            log.info("Checked out the conflicting files from the remote repository successfully");
+
+        } catch (GitAPIException e) {
+            log.error("Checking out artifacts from index failed", e);
+        }
+
+        return checkoutSuccess;
+    }
+
+    private void resetToRemoteHead (RepositoryContext gitRepoCtx, List<String> paths) {
+
+        ResetCommand resetCmd = gitRepoCtx.getGit().reset();
+
+        // reset type is HARD, to remote master branch
+        resetCmd.setMode(ResetCommand.ResetType.HARD).
+                setRef(GitDeploymentSynchronizerConstants.ORIGIN + "/" + GitDeploymentSynchronizerConstants.MASTER);
+
+        // add paths
+        for(String path : paths) {
+            resetCmd.addPath(path);
+            if(log.isDebugEnabled()) {
+                log.debug("Added the file path " + path + " to reset");
+            }
+        }
+
+        try {
+            resetCmd.call();
+            log.info("Reset the local branch to origin master successfully");
+
+        } catch (GitAPIException e) {
+            log.error("Reset to origin master failed", e);
+        }
+
+    }
+
+    private boolean syncInitialLocalArtifacts(RepositoryContext gitRepoCtx) throws Exception {
+
+        boolean syncedLocalArtifacts;
+
+        //initialize repository
+        InitGitRepository(new File(gitRepoCtx.getGitLocalRepoPath()));
+        //add the remote repository (origin)
+        syncedLocalArtifacts = addRemote(gitRepoCtx.getLocalRepo(), gitRepoCtx.getGitRemoteRepoUrl());
+
+        return syncedLocalArtifacts;
+    }
+
+    public void scheduleSyncTask(RepositoryInformation repoInformation, boolean autoCheckout, boolean autoCommit, long delay) {
 
         int tenantId = Integer.parseInt(repoInformation.getTenantId());
 
@@ -471,37 +598,38 @@ public class GitBasedArtifactRepository {
         }
 
         if (repoCtxt.getArtifactSyncSchedular() == null) {
-           synchronized (repoCtxt) {
-               if (repoCtxt.getArtifactSyncSchedular() == null) {
-                   // create a new ScheduledExecutorService instance
-                   final ScheduledExecutorService artifactSyncScheduler = Executors.newScheduledThreadPool(1,
-                           new ArtifactSyncTaskThreadFactory(repoCtxt.getGitLocalRepoPath()));
+            synchronized (repoCtxt) {
+                if (repoCtxt.getArtifactSyncSchedular() == null) {
+                    // create a new ScheduledExecutorService instance
+                    final ScheduledExecutorService artifactSyncScheduler = Executors.newScheduledThreadPool(1,
+                            new ArtifactSyncTaskThreadFactory(repoCtxt.getGitLocalRepoPath()));
 
-                   // schedule at the given interval
-                   artifactSyncScheduler.scheduleAtFixedRate(new ArtifactSyncTask(repoInformation), delay, delay, TimeUnit.SECONDS);
-                   // cache
-                   repoCtxt.setArtifactSyncSchedular(artifactSyncScheduler);
+                    // schedule at the given interval
+                    artifactSyncScheduler.scheduleAtFixedRate(new ArtifactSyncTask(repoInformation, autoCheckout, autoCommit), delay, delay, TimeUnit.SECONDS);
+                    // cache
+                    repoCtxt.setArtifactSyncSchedular(artifactSyncScheduler);
 
-                   log.info("Scheduled Artifact Synchronization Task for path " + repoCtxt.getGitLocalRepoPath());
+                    log.info("Scheduled Artifact Synchronization Task for path " + repoCtxt.getGitLocalRepoPath());
 
-               } else {
-                   log.info("Artifact Synchronization Task for path " + repoCtxt.getGitLocalRepoPath() + " already scheduled");
-               }
-           }
+                } else {
+                    log.info("Artifact Synchronization Task for path " + repoCtxt.getGitLocalRepoPath() + " already scheduled");
+                }
+            }
         }
     }
-    
+
     public boolean cloneExists(RepositoryInformation repositoryInformation) {
-    	
-    	int tenantId = Integer.parseInt(repositoryInformation.getTenantId());
-    	
-    	// if context for tenant is not initialized
-    	if(tenantToRepoContextMap.get(tenantId) == null)
-	    	initGitContext(repositoryInformation);
-    	
-        
-		RepositoryContext gitRepoCtx = retrieveCachedGitContext(tenantId);
-        if(gitRepoCtx == null) { 
+
+        int tenantId = Integer.parseInt(repositoryInformation.getTenantId());
+
+        // if context for tenant is not initialized
+        if (tenantToRepoContextMap.get(tenantId) == null) {
+            initGitContext(repositoryInformation);
+        }
+
+
+        RepositoryContext gitRepoCtx = retrieveCachedGitContext(tenantId);
+        if (gitRepoCtx == null) {
             return false;
         }
 
@@ -515,16 +643,15 @@ public class GitBasedArtifactRepository {
      * will call 'RepositoryInformationService' for credentials.
      *
      * @param gitRepoCtx RepositoryContext instance for tenant
-     *
      * @return true if success, else false
      */
-    private boolean pullArtifacts (RepositoryContext gitRepoCtx) {
-        if(log.isDebugEnabled())  {
-    	    log.debug("Pulling artifacts");
+    /*private boolean pullArtifacts(RepositoryContext gitRepoCtx) {
+        if (log.isDebugEnabled()) {
+            log.debug("Pulling artifacts");
         }
         PullCommand pullCmd = gitRepoCtx.getGit().pull();
 
-        if(!gitRepoCtx.getKeyBasedAuthentication()) {
+        if (!gitRepoCtx.getKeyBasedAuthentication()) {
             UsernamePasswordCredentialsProvider credentialsProvider = createCredentialsProvider(gitRepoCtx);
             if (credentialsProvider != null)
                 pullCmd.setCredentialsProvider(credentialsProvider);
@@ -540,7 +667,7 @@ public class GitBasedArtifactRepository {
                 }
 
                 // execute artifact update extension
-                ExtensionUtils.executeArtifactsUpdatedExtension();
+                extensionHandler.onArtifactUpdateSchedulerEvent(String.valueOf(gitRepoCtx.getTenantId()));
             }
 
         } catch (InvalidConfigurationException e) {
@@ -550,7 +677,7 @@ public class GitBasedArtifactRepository {
             Utilities.deleteFolderStructure(new File(gitRepoCtx.getGitLocalRepoPath()));
             cloneRepository(gitRepoCtx);
             // execute artifact update extension
-            ExtensionUtils.executeArtifactsUpdatedExtension();
+            extensionHandler.onArtifactUpdateSchedulerEvent(String.valueOf(gitRepoCtx.getTenantId()));
             return true;
 
         } catch (JGitInternalException e) {
@@ -567,7 +694,7 @@ public class GitBasedArtifactRepository {
             Utilities.deleteFolderStructure(new File(gitRepoCtx.getGitLocalRepoPath()));
             cloneRepository(gitRepoCtx);
             // execute artifact update extension
-            ExtensionUtils.executeArtifactsUpdatedExtension();
+            extensionHandler.onArtifactUpdateSchedulerEvent(String.valueOf(gitRepoCtx.getTenantId()));
             return true;
 
         } catch (GitAPIException e) {
@@ -576,6 +703,62 @@ public class GitBasedArtifactRepository {
             return false;
         }
         return true;
+    }*/
+
+    private boolean pullArtifacts (RepositoryContext gitRepoCtx) throws CheckoutConflictException {
+
+        PullCommand pullCmd = gitRepoCtx.getGit().pull();
+
+        UsernamePasswordCredentialsProvider credentialsProvider = createCredentialsProvider(gitRepoCtx);
+
+        if (credentialsProvider == null) {
+            log.warn ("Remote repository credentials not available for tenant " + gitRepoCtx.getTenantId() +
+                    ", aborting pull");
+            return false;
+        }
+        pullCmd.setCredentialsProvider(credentialsProvider);
+
+        try {
+            PullResult pullResult = pullCmd.call();
+            // check if we have received any updates
+            if (!pullResult.getFetchResult().getTrackingRefUpdates().isEmpty()) {
+                if (log.isDebugEnabled()) {
+                    log.debug("Artifacts were updated as a result of the pull operation, thread: " + Thread.currentThread().getName() + " - " +
+                            Thread.currentThread().getId());
+                }
+
+                // execute artifact update extension
+                extensionHandler.onArtifactUpdateSchedulerEvent(String.valueOf(gitRepoCtx.getTenantId()));
+            }
+
+        } catch (InvalidConfigurationException e) {
+            log.warn("Git pull unsuccessful for tenant " + gitRepoCtx.getTenantId() + ", invalid configuration. " + e.getMessage());
+            // FileUtilities.deleteFolderStructure(new File(gitRepoCtx.getLocalRepoPath()));
+            //cloneRepository(gitRepoCtx);
+            Utilities.deleteFolderStructure(new File(gitRepoCtx.getGitLocalRepoPath()));
+            cloneRepository(gitRepoCtx);
+            // execute artifact update extension
+            extensionHandler.onArtifactUpdateSchedulerEvent(String.valueOf(gitRepoCtx.getTenantId()));
+            return true;
+
+        } catch (JGitInternalException e) {
+            log.warn("Git pull unsuccessful for tenant " + gitRepoCtx.getTenantId() + ", " + e.getMessage());
+            return false;
+
+        } catch (TransportException e) {
+            log.error("Accessing remote git repository " + gitRepoCtx.getGitRemoteRepoUrl() + " failed for tenant " + gitRepoCtx.getTenantId(), e);
+            return false;
+
+        } catch (CheckoutConflictException e) {
+            log.warn("Git pull unsuccessful for tenant " + gitRepoCtx.getTenantId() + ", conflicts detected");
+            throw e;
+
+        } catch (GitAPIException e) {
+            log.error("Git pull operation for tenant " + gitRepoCtx.getTenantId() + " failed", e);
+            return false;
+        }
+
+        return true;
     }
 
     /**
@@ -583,30 +766,30 @@ public class GitBasedArtifactRepository {
      *
      * @param gitRepoCtx RepositoryContext instance of the tenant
      */
-    private void handleInvalidConfigurationError (RepositoryContext gitRepoCtx) {
+    private void handleInvalidConfigurationError(RepositoryContext gitRepoCtx) {
 
         StoredConfig storedConfig = gitRepoCtx.getLocalRepo().getConfig();
         boolean modifiedConfig = false;
-        if(storedConfig != null) {
+        if (storedConfig != null) {
 
-            if(storedConfig.getString("branch", "master", "remote") == null ||
+            if (storedConfig.getString("branch", "master", "remote") == null ||
                     storedConfig.getString("branch", "master", "remote").isEmpty()) {
 
                 storedConfig.setString("branch", "master", "remote", "origin");
                 modifiedConfig = true;
             }
 
-            if(storedConfig.getString("branch", "master", "merge") == null ||
+            if (storedConfig.getString("branch", "master", "merge") == null ||
                     storedConfig.getString("branch", "master", "merge").isEmpty()) {
 
                 storedConfig.setString("branch", "master", "merge", "refs/heads/master");
                 modifiedConfig = true;
             }
 
-            if(modifiedConfig) {
+            if (modifiedConfig) {
                 try {
                     storedConfig.save();
-                   // storedConfig.load();
+                    // storedConfig.load();
 
                 } catch (IOException e) {
                     log.error("Error saving git configuration file in local repo at " + gitRepoCtx.getGitLocalRepoPath(), e);
@@ -623,27 +806,26 @@ public class GitBasedArtifactRepository {
      *
      * @param gitRepoCtx RepositoryContext for the tenant
      */
-    private static void cloneRepository (RepositoryContext gitRepoCtx) { //should happen only at the beginning
+    /*private static void cloneRepository(RepositoryContext gitRepoCtx) { //should happen only at the beginning
 
         File gitRepoDir = new File(gitRepoCtx.getGitLocalRepoPath());
         if (gitRepoDir.exists()) {
-            if(isValidGitRepo(gitRepoCtx)) { //check if a this is a valid git repo
+            if (isValidGitRepo(gitRepoCtx)) { //check if a this is a valid git repo
                 log.info("Existing git repository detected for tenant " + gitRepoCtx.getTenantId() + ", no clone required");
                 gitRepoCtx.setCloneExists(true);
                 return;
-            }
-            else {
-                if(log.isDebugEnabled())
+            } else {
+                if (log.isDebugEnabled())
                     log.debug("Repository for tenant " + gitRepoCtx.getTenantId() + " is not a valid git repo");
                 Utilities.deleteFolderStructure(gitRepoDir); //if not a valid git repo but non-empty, delete it (else the clone will not work)
             }
         }
 
-        CloneCommand cloneCmd =  gitRepoCtx.getGit().cloneRepository().
-                        setURI(gitRepoCtx.getGitRemoteRepoUrl()).
-                        setDirectory(gitRepoDir);
+        CloneCommand cloneCmd = gitRepoCtx.getGit().cloneRepository().
+                setURI(gitRepoCtx.getGitRemoteRepoUrl()).
+                setDirectory(gitRepoDir);
 
-        if(!gitRepoCtx.getKeyBasedAuthentication()) {
+        if (!gitRepoCtx.getKeyBasedAuthentication()) {
             UsernamePasswordCredentialsProvider credentialsProvider = createCredentialsProvider(gitRepoCtx);
             if (credentialsProvider != null)
                 cloneCmd.setCredentialsProvider(credentialsProvider);
@@ -662,6 +844,42 @@ public class GitBasedArtifactRepository {
             log.error("Git clone operation for tenant " + gitRepoCtx.getTenantId() + " failed", e);
             e.printStackTrace();
         }
+    }*/
+
+    private boolean cloneRepository (RepositoryContext gitRepoCtx) { //should happen only at the beginning
+
+        boolean cloneSuccess = false;
+
+        File gitRepoDir = new File(gitRepoCtx.getGitLocalRepoPath());
+
+        CloneCommand cloneCmd =  Git.cloneRepository().
+                setURI(gitRepoCtx.getGitRemoteRepoUrl()).
+                setDirectory(gitRepoDir).
+                setBranch(GitDeploymentSynchronizerConstants.GIT_REFS_HEADS_MASTER);
+
+        UsernamePasswordCredentialsProvider credentialsProvider = createCredentialsProvider(gitRepoCtx);
+
+        if (credentialsProvider == null) {
+            log.warn ("Remote repository credentials not available for tenant " + gitRepoCtx.getTenantId() +
+                    ", aborting clone");
+            return false;
+        }
+        cloneCmd.setCredentialsProvider(credentialsProvider);
+
+        try {
+            cloneCmd.call();
+            log.info("Git clone operation for tenant " + gitRepoCtx.getTenantId() + " successful");
+            gitRepoCtx.setCloneExists(true);
+            cloneSuccess = true;
+
+        } catch (TransportException e) {
+            log.error("Accessing remote git repository failed for tenant " + gitRepoCtx.getTenantId(), e);
+
+        } catch (GitAPIException e) {
+            log.error("Git clone operation for tenant " + gitRepoCtx.getTenantId() + " failed", e);
+        }
+
+        return cloneSuccess;
     }
 
     /**
@@ -669,11 +887,10 @@ public class GitBasedArtifactRepository {
      * and creates a UsernamePasswordCredentialsProvider from a valid username and a password
      *
      * @param gitRepoCtx RepositoryContext instance
-     *
      * @return UsernamePasswordCredentialsProvider instance or null if service invocation failed or
      * username/password is not valid
      */
-    private static UsernamePasswordCredentialsProvider createCredentialsProvider (RepositoryContext gitRepoCtx) {
+    private static UsernamePasswordCredentialsProvider createCredentialsProvider(RepositoryContext gitRepoCtx) {
         return new UsernamePasswordCredentialsProvider(gitRepoCtx.getRepoUsername(), gitRepoCtx.getRepoPassword());
     }
 
@@ -681,10 +898,15 @@ public class GitBasedArtifactRepository {
      * Checks if an existing local repository is a valid git repository
      *
      * @param gitRepoCtx RepositoryContext instance
-     *
      * @return true if a valid git repo, else false
      */
-    private static boolean isValidGitRepo (RepositoryContext gitRepoCtx) {
+    private static boolean isValidGitRepo(RepositoryContext gitRepoCtx) {
+
+        // check if has been marked as cloned before
+        if(gitRepoCtx.cloneExists()) {
+            // repo is valid
+            return true;
+        }
 
         for (Ref ref : gitRepoCtx.getLocalRepo().getAllRefs().values()) { //check if has been previously cloned successfully, not empty
             if (ref.getObjectId() == null)
@@ -695,6 +917,55 @@ public class GitBasedArtifactRepository {
         return false;
     }
 
+    public static void InitGitRepository (File gitRepoDir) throws Exception {
+
+        try {
+            Git.init().setDirectory(gitRepoDir).setBare(false).call();
+
+        } catch (GitAPIException e) {
+            String errorMsg = "Initializing local repo at " + gitRepoDir.getPath() + " failed";
+            log.error(errorMsg, e);
+            throw new Exception(errorMsg, e);
+        }
+    }
+
+    public static boolean addRemote (Repository repository, String remoteUrl) {
+
+        boolean remoteAdded = false;
+
+        StoredConfig config = repository.getConfig();
+        config.setString(GitDeploymentSynchronizerConstants.REMOTE,
+                GitDeploymentSynchronizerConstants.ORIGIN,
+                GitDeploymentSynchronizerConstants.URL,
+                remoteUrl);
+
+        config.setString(GitDeploymentSynchronizerConstants.REMOTE,
+                GitDeploymentSynchronizerConstants.ORIGIN,
+                GitDeploymentSynchronizerConstants.FETCH,
+                GitDeploymentSynchronizerConstants.FETCH_LOCATION);
+
+        config.setString(GitDeploymentSynchronizerConstants.BRANCH,
+                GitDeploymentSynchronizerConstants.MASTER,
+                GitDeploymentSynchronizerConstants.REMOTE,
+                GitDeploymentSynchronizerConstants.ORIGIN);
+
+        config.setString(GitDeploymentSynchronizerConstants.BRANCH,
+                GitDeploymentSynchronizerConstants.MASTER,
+                GitDeploymentSynchronizerConstants.MERGE,
+                GitDeploymentSynchronizerConstants.GIT_REFS_HEADS_MASTER);
+
+        try {
+            config.save();
+            remoteAdded = true;
+
+        } catch (IOException e) {
+            log.error("Error in adding remote origin " + remoteUrl + " for local repository " +
+                    repository.toString(), e);
+        }
+
+        return remoteAdded;
+    }
+
 
     public void cleanupAutoCheckout() {
 
@@ -705,17 +976,30 @@ public class GitBasedArtifactRepository {
         return null;
     }
 
-	private class ArtifactSyncTask implements Runnable {
+    private class ArtifactSyncTask implements Runnable {
 
         private RepositoryInformation repositoryInformation;
+        private boolean autoCheckout;
+        private boolean autoCommit;
 
-        public ArtifactSyncTask (RepositoryInformation repositoryInformation) {
+        public ArtifactSyncTask(RepositoryInformation repositoryInformation, boolean autoCheckout, boolean autoCommit) {
             this.repositoryInformation = repositoryInformation;
+            this.autoCheckout = autoCheckout;
+            this.autoCommit = autoCommit;
         }
 
         @Override
         public void run() {
-            checkout(repositoryInformation);
+            try {
+                if (autoCheckout) {
+                    checkout(repositoryInformation);
+                }
+            } catch (Exception e) {
+                log.error(e);
+            }
+            if (autoCommit) {
+                commit(repositoryInformation);
+            }
         }
     }
 
@@ -723,7 +1007,7 @@ public class GitBasedArtifactRepository {
 
         private String localRepoPath;
 
-        public ArtifactSyncTaskThreadFactory (String localRepoPath) {
+        public ArtifactSyncTaskThreadFactory(String localRepoPath) {
             this.localRepoPath = localRepoPath;
         }
 
diff --git a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/artifact/deployment/synchronizer/git/internal/GitDeploymentSynchronizerConstants.java b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/artifact/deployment/synchronizer/git/internal/GitDeploymentSynchronizerConstants.java
index 19c104d..dcada46 100644
--- a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/artifact/deployment/synchronizer/git/internal/GitDeploymentSynchronizerConstants.java
+++ b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/artifact/deployment/synchronizer/git/internal/GitDeploymentSynchronizerConstants.java
@@ -58,4 +58,16 @@ public class GitDeploymentSynchronizerConstants {
     public static final String USERNAME_REGEX = "username:(.*?),";
     public static final String PASSWORD_REGEX = "password:(.*?)}";
 
+    //Git based constants
+    public static final String GIT_REFS_HEADS_MASTER = "refs/heads/master";
+    public static final String REMOTES_ORIGIN_MASTER = "remotes/origin/master";
+    public static final String REMOTE = "remote";
+    public static final String ORIGIN = "origin";
+    public static final String URL = "url";
+    public static final String FETCH = "fetch";
+    public static final String BRANCH = "branch";
+    public static final String MASTER = "master";
+    public static final String MERGE = "merge";
+    public static final String FETCH_LOCATION = "+refs/heads/*:refs/remotes/origin/*";
+
 }
diff --git a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/artifact/deployment/synchronizer/git/util/Utilities.java b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/artifact/deployment/synchronizer/git/util/Utilities.java
index a6c2f4b..6d9bec6 100644
--- a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/artifact/deployment/synchronizer/git/util/Utilities.java
+++ b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/artifact/deployment/synchronizer/git/util/Utilities.java
@@ -64,6 +64,9 @@ public class Utilities {
 
         try {
             FileUtils.deleteDirectory(existingDir);
+            if(log.isDebugEnabled()) {
+            	log.debug(" Directory [" + existingDir + "] deleted. ");
+            }
 
         } catch (IOException e) {
             log.error("Deletion of existing non-git repository structure failed");
diff --git a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/config/CartridgeAgentConfiguration.java b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/config/CartridgeAgentConfiguration.java
index 7c378f6..947329d 100644
--- a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/config/CartridgeAgentConfiguration.java
+++ b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/config/CartridgeAgentConfiguration.java
@@ -28,11 +28,7 @@ import org.apache.stratos.cartridge.agent.util.CartridgeAgentConstants;
 import org.apache.stratos.cartridge.agent.util.CartridgeAgentUtils;
 
 import java.io.File;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Scanner;
+import java.util.*;
 
 /**
  * Cartridge agent configuration.
@@ -41,7 +37,7 @@ public class CartridgeAgentConfiguration {
 
     private static final Log log = LogFactory.getLog(CartridgeAgentConfiguration.class);
     private static volatile CartridgeAgentConfiguration instance;
-
+    private final String serviceGroup;
     private final String serviceName;
     private final String clusterId;
     private final String networkPartitionId;
@@ -52,16 +48,32 @@ public class CartridgeAgentConfiguration {
     private final String repoUrl;
     private final List<Integer> ports;
     private final List<String> logFilePaths;
+    private final boolean isCommitsEnabled;
+    private final boolean isCheckoutEnabled;
+    private final String listenAddress;
+    private final String lbClusterId;
+    private final String tenantId;
+    private final String isClustered;
+    private final String minCount;
     private Map<String, String> parameters;
     private boolean isMultitenant;
     private String persistenceMappings;
-    private final boolean isCommitsEnabled;
-    private final String listenAddress;
+    private boolean isInternalRepo;
+    private String isPrimary;
+    private String lbPrivateIp;
+    private String lbPublicIp;
+    private String deployment;
+    private String managerServiceName;
+    private String workerServiceName;
+    private String superTenantRepositoryPath;
+    private String tenantRepositoryPath;
 
     private CartridgeAgentConfiguration() {
-    	parameters = loadParametersFile();
+        parameters = loadParametersFile();
 
         try {
+            serviceGroup = readServiceGroup();
+            isClustered = readClustering();
             serviceName = readParameterValue(CartridgeAgentConstants.SERVICE_NAME);
             clusterId = readParameterValue(CartridgeAgentConstants.CLUSTER_ID);
             networkPartitionId = readParameterValue(CartridgeAgentConstants.NETWORK_PARTITION_ID);
@@ -73,19 +85,34 @@ public class CartridgeAgentConfiguration {
             ports = readPorts();
             logFilePaths = readLogFilePaths();
             isMultitenant = readMultitenant(CartridgeAgentConstants.MULTITENANT);
-            persistenceMappings = readPersisenceMapping();
-            isCommitsEnabled = readCommitsEnabled(CartridgeAgentConstants.COMMIT_ENABLED);
-            listenAddress = System.getProperty(CartridgeAgentConstants.LISTEN_ADDRESS);
+            persistenceMappings = readPersistenceMapping();
+            isCommitsEnabled = readCommitParameterValue();
+            isCheckoutEnabled = Boolean.parseBoolean(System.getProperty(CartridgeAgentConstants.AUTO_CHECKOUT));
 
+            listenAddress = System.getProperty(CartridgeAgentConstants.LISTEN_ADDRESS);
+            isInternalRepo = readInternalRepo(CartridgeAgentConstants.PROVIDER);
+            tenantId = readParameterValue(CartridgeAgentConstants.TENANT_ID);
+            lbClusterId = readParameterValue(CartridgeAgentConstants.LB_CLUSTER_ID);
+            minCount = readParameterValue(CartridgeAgentConstants.MIN_INSTANCE_COUNT);
+            // not mandatory
+            lbPrivateIp = System.getProperty(CartridgeAgentConstants.LB_PRIVATE_IP);
+            lbPublicIp = System.getProperty(CartridgeAgentConstants.LB_PUBLIC_IP);
+            tenantRepositoryPath =  System.getProperty(CartridgeAgentConstants.TENANT_REPO_PATH);
+            superTenantRepositoryPath = System.getProperty(CartridgeAgentConstants.SUPER_TENANT_REPO_PATH);
+
+            deployment = readDeployment();
+            managerServiceName = readManagerServiceType();
+            workerServiceName = readWorkerServiceType();
+            isPrimary = readIsPrimary();
         } catch (ParameterNotFoundException e) {
             throw new RuntimeException(e);
         }
 
-        if(log.isInfoEnabled()) {
+        if (log.isInfoEnabled()) {
             log.info("Cartridge agent configuration initialized");
         }
 
-        if(log.isDebugEnabled()) {
+        if (log.isDebugEnabled()) {
             log.debug(String.format("service-name: %s", serviceName));
             log.debug(String.format("cluster-id: %s", clusterId));
             log.debug(String.format("network-partition-id: %s", networkPartitionId));
@@ -95,26 +122,76 @@ public class CartridgeAgentConfiguration {
             log.debug(String.format("app-path: %s", appPath));
             log.debug(String.format("repo-url: %s", repoUrl));
             log.debug(String.format("ports: %s", ports.toString()));
+            log.debug(String.format("lb-private-ip: %s", lbPrivateIp));
+            log.debug(String.format("lb-public-ip: %s", lbPublicIp));
         }
     }
 
-    private boolean readCommitsEnabled(String commitEnabled) {
-    	boolean isCommitEnabled = false;
-    	try {
-    		isCommitEnabled = Boolean.parseBoolean(readParameterValue(commitEnabled));
-		} catch (ParameterNotFoundException e) {
-			// Missing commits enabled flag is not an exception
-			log.error(" Commits enabled payload parameter is not found");
-		}
-		return isCommitEnabled;
-	}
+    private String readDeployment(){
+        if (parameters.containsKey(CartridgeAgentConstants.DEPLOYMENT)) {
+            return parameters.get(CartridgeAgentConstants.DEPLOYMENT);
+        }
+        return null;
+    }
 
-	private boolean readMultitenant(String multitenant) throws ParameterNotFoundException {
-    	String multitenantStringValue = readParameterValue(multitenant);
-    	return Boolean.parseBoolean(multitenantStringValue);
-	}
+    private String readManagerServiceType(){
+
+        if (deployment == null) {
+            return null;
+        }
+
+        if (getDeployment().equalsIgnoreCase(CartridgeAgentConstants.DEPLOYMENT_MANAGER)) {
+            // if this is a manager, manager service type = service name
+            return serviceName;
+
+        } else if (getDeployment().equalsIgnoreCase(CartridgeAgentConstants.DEPLOYMENT_WORKER)) {
+            // if a worker, need to read the manager service type sent by payload
+            if (parameters.containsKey(CartridgeAgentConstants.MANAGER_SERVICE_TYPE)) {
+                return parameters.get(CartridgeAgentConstants.MANAGER_SERVICE_TYPE);
+            }
+
+        } else if (getDeployment().equalsIgnoreCase(CartridgeAgentConstants.DEPLOYMENT_DEFAULT)) {
+            // for default deployment, no manager service type
+            return null;
+
+        }
+
+        return null;
+    }
+
+    private String readWorkerServiceType(){
+
+        if (deployment == null) {
+            return null;
+        }
+
+        if (getDeployment().equalsIgnoreCase(CartridgeAgentConstants.DEPLOYMENT_WORKER)) {
+            // if this is a worker, worker service type = service name
+            return serviceName;
+
+        } else if (getDeployment().equalsIgnoreCase(CartridgeAgentConstants.DEPLOYMENT_MANAGER)) {
+            // if a manager, need to read the worker service type sent by payload
+            if (parameters.containsKey(CartridgeAgentConstants.WORKER_SERVICE_TYPE)) {
+                return parameters.get(CartridgeAgentConstants.WORKER_SERVICE_TYPE);
+            }
 
-	/**
+        } else if (getDeployment().equalsIgnoreCase(CartridgeAgentConstants.DEPLOYMENT_DEFAULT)) {
+            // for default deployment, no worker service type
+            return null;
+
+        }
+
+        return null;
+    }
+
+    private String readIsPrimary(){
+        if (parameters.containsKey(CartridgeAgentConstants.CLUSTERING_PRIMARY_KEY)) {
+            return parameters.get(CartridgeAgentConstants.CLUSTERING_PRIMARY_KEY);
+        }
+        return null;
+    }
+
+    /**
      * Get cartridge agent configuration singleton instance.
      *
      * @return
@@ -130,7 +207,40 @@ public class CartridgeAgentConfiguration {
         return instance;
     }
 
-    private String readPersisenceMapping() {
+    private boolean readCommitsEnabled(String commitEnabled) {
+        boolean isCommitEnabled = false;
+        try {
+            isCommitEnabled = Boolean.parseBoolean(readParameterValue(commitEnabled));
+
+        } catch (ParameterNotFoundException e) {
+            // Missing commits enabled flag is not an exception
+            log.error(" Commits enabled payload parameter is not found");
+        }
+        return isCommitEnabled;
+    }
+
+    private boolean readMultitenant(String multitenant) throws ParameterNotFoundException {
+        String multitenantStringValue = readParameterValue(multitenant);
+        return Boolean.parseBoolean(multitenantStringValue);
+    }
+
+    private boolean readInternalRepo(String internalRepo) {
+        String internalRepoStringValue = null;
+        try {
+            internalRepoStringValue = readParameterValue(internalRepo);
+        } catch (ParameterNotFoundException e) {
+            // Missing INTERNAL parameter is not an exception
+            log.info(" INTERNAL payload parameter is not found");
+        }
+
+        if(internalRepoStringValue.equals(CartridgeAgentConstants.INTERNAL)) {
+            return true;
+        } else{
+            return false;
+        }
+    }
+
+    private String readPersistenceMapping() {
         String persistenceMapping = null;
         try {
             persistenceMapping = readParameterValue("PERSISTENCE_MAPPING");
@@ -145,14 +255,14 @@ public class CartridgeAgentConfiguration {
         return persistenceMapping;
     }
 
-    
+
     private Map<String, String> loadParametersFile() {
-    	Map<String, String> parameters = new HashMap<String, String>();
-    	try {
+        Map<String, String> parameters = new HashMap<String, String>();
+        try {
 
             // read launch params
             File file = new File(System.getProperty(CartridgeAgentConstants.PARAM_FILE_PATH));
-            if(!file.exists()) {
+            if (!file.exists()) {
                 log.warn(String.format("File not found: %s", CartridgeAgentConstants.PARAM_FILE_PATH));
                 return parameters;
             }
@@ -161,48 +271,81 @@ public class CartridgeAgentConfiguration {
                 String line = scanner.nextLine();
                 String[] params = line.split(",");
                 for (String string : params) {
-					if (string != null) {
-						String[] var = string.split("=");
-						if (var.length >= 2) {
-							parameters.put(var[0], var[1]);
-						}
-					}
+                    if (string != null) {
+                        String[] var = string.split("=");
+                        if (var.length >= 2) {
+                            parameters.put(var[0], var[1]);
+                        }
+                    }
                 }
             }
             scanner.close();
         } catch (Exception e) {
-        	String message = "Could not read launch parameter file, hence trying to read from System properties.";
-        	log.warn(message, e);
+            String message = "Could not read launch parameter file, hence trying to read from System properties.";
+            log.warn(message, e);
+        }
+
+        return parameters;
+    }
+
+    private String readServiceGroup() {
+        if (parameters.containsKey(CartridgeAgentConstants.SERVICE_GROUP)) {
+            return parameters.get(CartridgeAgentConstants.SERVICE_GROUP);
+        } else {
+            return null;
+        }
+    }
+
+    private String readClustering() {
+        if (parameters.containsKey(CartridgeAgentConstants.CLUSTERING)) {
+            return parameters.get(CartridgeAgentConstants.CLUSTERING);
+        } else {
+            return null;
         }
-    	
-    	return parameters;
     }
 
-	private String readParameterValue(String parameterName) throws ParameterNotFoundException{
+    private String readParameterValue(String parameterName) throws ParameterNotFoundException {
 
-		if (parameters.containsKey(parameterName)) {
-			return parameters.get(parameterName);
-		}
+        if (parameters.containsKey(parameterName)) {
+            return parameters.get(parameterName);
+        }
 
-		if (System.getProperty(parameterName) != null) {
-			return System.getProperty(parameterName);
-		}
+        if (System.getProperty(parameterName) != null) {
+            return System.getProperty(parameterName);
+        }
 
-		String message = "Cannot find the value of required parameter: "+parameterName;
-		throw new ParameterNotFoundException(message);
-	}
+        String message = "Cannot find the value of required parameter: " + parameterName;
+        throw new ParameterNotFoundException(message);
+    }
+
+    private boolean readCommitParameterValue() throws ParameterNotFoundException {
+
+        if (parameters.containsKey(CartridgeAgentConstants.COMMIT_ENABLED)) {
+            return Boolean.parseBoolean(parameters.get(CartridgeAgentConstants.COMMIT_ENABLED));
+        }
+
+        if (System.getProperty(CartridgeAgentConstants.COMMIT_ENABLED) != null) {
+            return Boolean.parseBoolean(System.getProperty(CartridgeAgentConstants.COMMIT_ENABLED));
+        }
+
+        if (System.getProperty(CartridgeAgentConstants.AUTO_COMMIT) != null) {
+            return Boolean.parseBoolean(System.getProperty(CartridgeAgentConstants.AUTO_COMMIT));
+        }
+        log.info(CartridgeAgentConstants.COMMIT_ENABLED + " is not found and setting it to false");
+        return false;
+    }
 
     private List<Integer> readPorts() throws ParameterNotFoundException {
         List<Integer> ports = new ArrayList<Integer>();
         String portsStr = readParameterValue(CartridgeAgentConstants.PORTS);
         List<String> portsStrList = CartridgeAgentUtils.splitUsingTokenizer(portsStr, "|");
-        for(String port : portsStrList) {
+        for (String port : portsStrList) {
             ports.add(Integer.parseInt(port));
         }
         return ports;
     }
 
-    private List<String> readLogFilePaths () {
+    private List<String> readLogFilePaths() {
 
         String logFileStr = null;
         try {
@@ -258,20 +401,99 @@ public class CartridgeAgentConfiguration {
         return logFilePaths;
     }
 
-	public boolean isMultitenant() {
-		return isMultitenant;
-	}
+    public boolean isMultitenant() {
+        return isMultitenant;
+    }
 
     public String getPersistenceMappings() {
         return persistenceMappings;
     }
 
-	public boolean isCommitsEnabled() {
-		return isCommitsEnabled;
-	}
-
+    public boolean isCommitsEnabled() {
+        return isCommitsEnabled;
+    }
 
     public String getListenAddress() {
         return listenAddress;
     }
+
+    public boolean isInternalRepo() {
+        return isInternalRepo;
+    }
+
+    public String getTenantId() {
+        return tenantId;
+    }
+
+    public String getLbClusterId() {
+        return lbClusterId;
+    }
+
+    public String getServiceGroup() {
+        return serviceGroup;
+    }
+
+    public String getIsClustered() {
+        return isClustered;
+    }
+
+    public String getMinCount() {
+        return minCount;
+    }
+
+    public String getIsPrimary() {
+        return isPrimary;
+    }
+
+	public String getLbPublicIp() {
+		return lbPublicIp;
+	}
+
+	public void setLbPublicIp(String lbPublicIp) {
+		this.lbPublicIp = lbPublicIp;
+	}
+
+	public String getLbPrivateIp() {
+		return lbPrivateIp;
+	}
+
+	public void setLbPrivateIp(String lbPrivateIp) {
+		this.lbPrivateIp = lbPrivateIp;
+	}
+
+    public String getDeployment() {
+        return deployment;
+    }
+
+    public void setDeployment(String deployment) {
+        this.deployment = deployment;
+    }
+
+    public String getManagerServiceName() {
+        return managerServiceName;
+    }
+
+    public void setManagerServiceName(String managerServiceName) {
+        this.managerServiceName = managerServiceName;
+    }
+
+    public String getWorkerServiceName() {
+        return workerServiceName;
+    }
+
+    public void setWorkerServiceName(String workerServiceName) {
+        this.workerServiceName = workerServiceName;
+    }
+
+    public String getSuperTenantRepositoryPath() {
+        return superTenantRepositoryPath;
+    }
+
+    public String getTenantRepositoryPath() {
+        return tenantRepositoryPath;
+    }
+
+    public boolean isCheckoutEnabled() {
+        return isCheckoutEnabled;
+    }
 }
diff --git a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/config/configurator/JndiConfigurator.java b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/config/configurator/JndiConfigurator.java
index 072734d..838dfd7 100644
--- a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/config/configurator/JndiConfigurator.java
+++ b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/config/configurator/JndiConfigurator.java
@@ -23,8 +23,6 @@ import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.apache.stratos.cartridge.agent.config.CartridgeAgentConfiguration;
-import org.wso2.carbon.utils.CarbonUtils;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -38,7 +36,7 @@ public class JndiConfigurator {
     private static final Log log = LogFactory.getLog(JndiConfigurator.class);
 
     public static void configure() {
-        if(log.isDebugEnabled()) {
+        if (log.isDebugEnabled()) {
             log.debug("Configuring jndi.properties file");
         }
         generateJndiPropertiesFile();
@@ -46,26 +44,25 @@ public class JndiConfigurator {
 
     private static void generateJndiPropertiesFile() {
         String mbIp = System.getProperty("mb.ip");
-        if(StringUtils.isBlank(mbIp)) {
+        if (StringUtils.isBlank(mbIp)) {
             throw new RuntimeException("System property not found: mb.ip");
         }
         String mbPort = System.getProperty("mb.port");
-        if(StringUtils.isBlank(mbPort)) {
+        if (StringUtils.isBlank(mbPort)) {
             throw new RuntimeException("System property not found: mb.port");
         }
-        String templateFilePath =  System.getProperty("jndi.properties.template.file.path");
-        if(StringUtils.isBlank(templateFilePath)) {
+        String templateFilePath = System.getProperty("jndi.properties.template.file.path");
+        if (StringUtils.isBlank(templateFilePath)) {
             throw new RuntimeException("System property not found: jndi.properties.template.file.path");
         }
         String jndiFileDir = System.getProperty("jndi.properties.dir");
-        if(StringUtils.isBlank(jndiFileDir)) {
+        if (StringUtils.isBlank(jndiFileDir)) {
             throw new RuntimeException("System property not found: jndi.properties.dir");
         }
         String jndiFilePath = null;
-        if(jndiFileDir.endsWith("/")) {
+        if (jndiFileDir.endsWith("/")) {
             jndiFilePath = jndiFileDir + "jndi.properties";
-        }
-        else {
+        } else {
             jndiFilePath = jndiFileDir + "/" + "jndi.properties";
         }
 
@@ -83,7 +80,7 @@ public class JndiConfigurator {
 
             // Write jndi.properties file
             writeFileContent(content, jndiFilePath);
-            if(log.isDebugEnabled()) {
+            if (log.isDebugEnabled()) {
                 log.debug(String.format("jndi.properties file written to: %s", jndiFilePath));
             }
         } catch (Exception e) {
diff --git a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/data/publisher/log/Constants.java b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/data/publisher/log/Constants.java
index 8a721fc..067961d 100644
--- a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/data/publisher/log/Constants.java
+++ b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/data/publisher/log/Constants.java
@@ -26,4 +26,17 @@ public class Constants {
     public static String TAIL_COMMAND = "tail -n 100 -F ";
     public static String MEMBER_ID = "memberId";
     public static String LOG_EVENT = "logEvent";
+    
+    public static String DATE_FORMATTER = "yyyy-MM-dd";
+    public static String DATE_TIME_FORMATTER = "yyyy-MM-dd HH:mm:ss,SSS";
+    public static String TENANT_ID = "tenantID";
+    public static String SERVER_NAME = "serverName";
+    public static String APP_NAME = "appName";
+    public static String LOG_TIME = "logTime";
+    public static String PRIORITY = "priority";
+    public static String MESSAGE = "message";
+    public static String LOGGER = "logger";
+    public static String IP = "ip";  
+    public static String INSTANCE = "instance";
+    public static String STACKTRACE = "stacktrace";
 }
diff --git a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/data/publisher/log/FileBasedLogPublisher.java b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/data/publisher/log/FileBasedLogPublisher.java
index f75aa27..01e681e 100644
--- a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/data/publisher/log/FileBasedLogPublisher.java
+++ b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/data/publisher/log/FileBasedLogPublisher.java
@@ -39,9 +39,9 @@ public class FileBasedLogPublisher extends LogPublisher implements Runnable {
     private Process process;
     private Scanner scanner;
 
-    public FileBasedLogPublisher(DataPublisherConfiguration dataPublisherConfig, StreamDefinition streamDefinition, String filePath, String memberId) {
+    public FileBasedLogPublisher(DataPublisherConfiguration dataPublisherConfig, StreamDefinition streamDefinition, String filePath, String memberId, String tenantId, String alias, Long datetime) {
 
-        super(dataPublisherConfig, streamDefinition, filePath, memberId);
+    	super(dataPublisherConfig, streamDefinition, filePath, memberId, tenantId, alias, datetime);
         this.executorService = Executors.newSingleThreadExecutor(new FileBasedLogPublisherTaskThreadFactory(filePath));
     }
 
@@ -88,7 +88,7 @@ public class FileBasedLogPublisher extends LogPublisher implements Runnable {
             // set the relevant data
             dataContext.setCorrelationData(null);
             dataContext.setMetaData(new Object[] {memberId});
-            dataContext.setPayloadData(new Object[] {scanner.nextLine()});
+            dataContext.setPayloadData(new Object[] {tenantId, alias, "", datetime, "", scanner.nextLine(), "","",memberId, ""});
             // publish data
             publish(dataContext);
         }
diff --git a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/data/publisher/log/LogPublisher.java b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/data/publisher/log/LogPublisher.java
index 306f109..ae7412c 100644
--- a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/data/publisher/log/LogPublisher.java
+++ b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/data/publisher/log/LogPublisher.java
@@ -31,12 +31,19 @@ public abstract class LogPublisher extends DataPublisher {
 
     protected String memberId;
     protected String filePath;
+    protected String tenantId;
+    protected String alias;
+    protected Long datetime;
+    protected String serverName;
 
-    public LogPublisher (DataPublisherConfiguration dataPublisherConfig, StreamDefinition streamDefinition, String filePath, String memberId) {
+    public LogPublisher (DataPublisherConfiguration dataPublisherConfig, StreamDefinition streamDefinition, String filePath, String memberId, String tenantId, String alias, Long datetime) {
 
         super(dataPublisherConfig, streamDefinition);
         this.filePath = filePath;
         this.memberId = memberId;
+        this.tenantId = tenantId;
+        this.alias = alias;
+        this.datetime = datetime;
     }
 
     public void start () {
diff --git a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/data/publisher/log/LogPublisherManager.java b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/data/publisher/log/LogPublisherManager.java
index 02b8e63..5ca3c89 100644
--- a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/data/publisher/log/LogPublisherManager.java
+++ b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/data/publisher/log/LogPublisherManager.java
@@ -19,21 +19,25 @@
 
 package org.apache.stratos.cartridge.agent.data.publisher.log;
 
+import java.io.File;
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.stratos.cartridge.agent.config.CartridgeAgentConfiguration;
 import org.apache.stratos.cartridge.agent.data.publisher.DataPublisherConfiguration;
 import org.apache.stratos.cartridge.agent.data.publisher.exception.DataPublisherException;
 import org.apache.stratos.cartridge.agent.util.CartridgeAgentUtils;
+import org.wso2.carbon.base.MultitenantConstants;
 import org.wso2.carbon.databridge.commons.Attribute;
 import org.wso2.carbon.databridge.commons.AttributeType;
 import org.wso2.carbon.databridge.commons.StreamDefinition;
 import org.wso2.carbon.databridge.commons.exception.MalformedStreamDefinitionException;
 
-import java.io.File;
-import java.util.ArrayList;
-import java.util.List;
-
 public class LogPublisherManager {
 
     private static final Log log = LogFactory.getLog(LogPublisherManager.class);
@@ -58,7 +62,7 @@ public class LogPublisherManager {
 
         // stream definition identifier = {log.publisher.<cluster id>}
         try {
-            streamDefinition = new StreamDefinition(Constants.LOG_PUBLISHER_STREAM_PREFIX + CartridgeAgentConfiguration.getInstance().getClusterId(),
+        	streamDefinition = new StreamDefinition(Constants.LOG_PUBLISHER_STREAM_PREFIX + getValidTenantId(CartridgeAgentConfiguration.getInstance().getTenantId()) + "." + getAlias(CartridgeAgentConfiguration.getInstance().getClusterId()) + "." + getCurrentDate(),
                     Constants.LOG_PUBLISHER_STREAM_VERSION);
 
         } catch (MalformedStreamDefinitionException e) {
@@ -71,8 +75,17 @@ public class LogPublisherManager {
         metaDataDefinition.add(new Attribute(Constants.MEMBER_ID, AttributeType.STRING));
 
         List<Attribute> payloadDataDefinition = new ArrayList<Attribute>();
-        payloadDataDefinition.add(new Attribute(Constants.LOG_EVENT, AttributeType.STRING));
-
+        payloadDataDefinition.add(new Attribute(Constants.TENANT_ID, AttributeType.STRING));
+        payloadDataDefinition.add(new Attribute(Constants.SERVER_NAME, AttributeType.STRING));
+        payloadDataDefinition.add(new Attribute(Constants.APP_NAME, AttributeType.STRING));
+        payloadDataDefinition.add(new Attribute(Constants.LOG_TIME, AttributeType.LONG));
+        payloadDataDefinition.add(new Attribute(Constants.PRIORITY, AttributeType.STRING));
+        payloadDataDefinition.add(new Attribute(Constants.MESSAGE, AttributeType.STRING));
+        payloadDataDefinition.add(new Attribute(Constants.LOGGER, AttributeType.STRING));
+        payloadDataDefinition.add(new Attribute(Constants.IP, AttributeType.STRING));
+        payloadDataDefinition.add(new Attribute(Constants.INSTANCE, AttributeType.STRING));
+        payloadDataDefinition.add(new Attribute(Constants.STACKTRACE, AttributeType.STRING));
+                 
         streamDefinition.setMetaData(metaDataDefinition);
         streamDefinition.setPayloadData(payloadDataDefinition);
     }
@@ -85,7 +98,10 @@ public class LogPublisherManager {
         }
 
         LogPublisher fileBasedLogPublisher = new FileBasedLogPublisher(dataPublisherConfig, streamDefinition, filePath,
-               CartridgeAgentConfiguration.getInstance().getMemberId());
+        		CartridgeAgentConfiguration.getInstance().getMemberId(),
+        		getValidTenantId(CartridgeAgentConfiguration.getInstance().getTenantId()),
+        		getAlias(CartridgeAgentConfiguration.getInstance().getClusterId()),
+        		getDateTime());
 
         fileBasedLogPublisher.initialize();
         fileBasedLogPublisher.start();
@@ -102,4 +118,37 @@ public class LogPublisherManager {
            }
        }
     }
+    
+	private String getCurrentDate() {
+		Date now = new Date();
+		DateFormat formatter = new SimpleDateFormat(Constants.DATE_FORMATTER);
+		String formattedDate = formatter.format(now);
+		return formattedDate.replace("-", ".");
+	}
+
+	private String getAlias(String clusterId) {
+		String alias;
+		try {
+			alias = clusterId.split("\\.")[0];
+		} catch (Exception e) {
+			e.printStackTrace();
+			alias = clusterId;
+		}
+		return alias;
+	}
+
+	private Long getDateTime() {
+		Date date = new Date();
+		return date.getTime();
+	}
+
+	private String getValidTenantId(String tenantId) {
+		if (tenantId.equals(String
+				.valueOf(MultitenantConstants.INVALID_TENANT_ID))
+				|| tenantId.equals(String
+						.valueOf(MultitenantConstants.SUPER_TENANT_ID))) {
+			return "0";
+		}
+		return tenantId;
+	}
 }
diff --git a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/event/publisher/CartridgeAgentEventPublisher.java b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/event/publisher/CartridgeAgentEventPublisher.java
index 9c2e21f..1046482 100644
--- a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/event/publisher/CartridgeAgentEventPublisher.java
+++ b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/event/publisher/CartridgeAgentEventPublisher.java
@@ -25,7 +25,6 @@ import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.stratos.cartridge.agent.config.CartridgeAgentConfiguration;
 import org.apache.stratos.cartridge.agent.statistics.publisher.HealthStatisticsNotifier;
-import org.apache.stratos.cartridge.agent.util.ExtensionUtils;
 import org.apache.stratos.messaging.broker.publish.EventPublisher;
 import org.apache.stratos.messaging.broker.publish.EventPublisherPool;
 import org.apache.stratos.messaging.event.instance.status.InstanceActivatedEvent;
@@ -63,7 +62,6 @@ public class CartridgeAgentEventPublisher {
                 log.info("Instance started event published");
             }
 
-            ExtensionUtils.executeInstanceStartedExtension();
         } else {
             if (log.isWarnEnabled()) {
                 log.warn("Instance already started");
@@ -81,7 +79,8 @@ public class CartridgeAgentEventPublisher {
                     CartridgeAgentConfiguration.getInstance().getClusterId(),
                     CartridgeAgentConfiguration.getInstance().getNetworkPartitionId(),
                     CartridgeAgentConfiguration.getInstance().getPartitionId(),
-                    CartridgeAgentConfiguration.getInstance().getMemberId());
+                    CartridgeAgentConfiguration.getInstance().getMemberId()
+            );
 
             // Event publisher connection will
             EventPublisher eventPublisher = EventPublisherPool.getPublisher(Constants.INSTANCE_STATUS_TOPIC);
@@ -90,8 +89,6 @@ public class CartridgeAgentEventPublisher {
                 log.info("Instance activated event published");
             }
 
-            ExtensionUtils.executeInstanceActivatedExtension();
-
             if (log.isInfoEnabled()) {
                 log.info("Starting health statistics notifier");
             }
@@ -108,7 +105,7 @@ public class CartridgeAgentEventPublisher {
         }
     }
 
-     public static void publishInstanceReadyToShutdownEvent() {
+    public static void publishInstanceReadyToShutdownEvent() {
         if (!isReadyToShutdown()) {
             if (log.isInfoEnabled()) {
                 log.info("Publishing instance activated event");
@@ -133,7 +130,7 @@ public class CartridgeAgentEventPublisher {
         }
     }
 
-     public static void publishMaintenanceModeEvent() {
+    public static void publishMaintenanceModeEvent() {
         if (!isMaintenance()) {
             if (log.isInfoEnabled()) {
                 log.info("Publishing instance maintenance mode event");
diff --git a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/extensions/DefaultExtensionHandler.java b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/extensions/DefaultExtensionHandler.java
new file mode 100644
index 0000000..e861819
--- /dev/null
+++ b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/extensions/DefaultExtensionHandler.java
@@ -0,0 +1,992 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.stratos.cartridge.agent.extensions;
+
+import com.google.gson.Gson;
+import com.google.gson.reflect.TypeToken;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.stratos.cartridge.agent.artifact.deployment.synchronizer.RepositoryInformation;
+import org.apache.stratos.cartridge.agent.artifact.deployment.synchronizer.git.impl.GitBasedArtifactRepository;
+import org.apache.stratos.cartridge.agent.config.CartridgeAgentConfiguration;
+import org.apache.stratos.cartridge.agent.event.publisher.CartridgeAgentEventPublisher;
+import org.apache.stratos.cartridge.agent.util.CartridgeAgentConstants;
+import org.apache.stratos.cartridge.agent.util.CartridgeAgentUtils;
+import org.apache.stratos.cartridge.agent.util.ExtensionUtils;
+import org.apache.stratos.messaging.domain.tenant.Tenant;
+import org.apache.stratos.messaging.domain.topology.*;
+import org.apache.stratos.messaging.event.instance.notifier.ArtifactUpdatedEvent;
+import org.apache.stratos.messaging.event.instance.notifier.InstanceCleanupClusterEvent;
+import org.apache.stratos.messaging.event.instance.notifier.InstanceCleanupMemberEvent;
+import org.apache.stratos.messaging.event.tenant.CompleteTenantEvent;
+import org.apache.stratos.messaging.event.tenant.SubscriptionDomainAddedEvent;
+import org.apache.stratos.messaging.event.tenant.SubscriptionDomainRemovedEvent;
+import org.apache.stratos.messaging.event.topology.*;
+import org.apache.stratos.messaging.message.receiver.tenant.TenantManager;
+import org.apache.stratos.messaging.message.receiver.topology.TopologyManager;
+import org.wso2.andes.util.Serial;
+
+import java.io.File;
+import java.lang.reflect.Type;
+import java.util.*;
+
+public class DefaultExtensionHandler implements ExtensionHandler {
+
+    private static final Log log = LogFactory.getLog(DefaultExtensionHandler.class);
+    private static final Gson gson = new Gson();
+    private static final Type memberType = new TypeToken<Collection<Member>>() {
+    }.getType();
+    private static final Type tenantType = new TypeToken<Collection<Tenant>>() {
+    }.getType();
+    private static final Type serviceType = new TypeToken<Collection<Service>>() {
+    }.getType();
+    private final ArrayList<Member> wkMembers = new ArrayList<Member>();
+
+    @Override
+    public void onInstanceStartedEvent() {
+        try {
+            if (log.isDebugEnabled()) {
+                log.debug("Processing instance started event...");
+            }
+            Map<String, String> env = new HashMap<String, String>();
+            ExtensionUtils.executeInstanceStartedExtension(env);
+        } catch (Exception e) {
+            if (log.isErrorEnabled()) {
+                log.error("Error processing instance started event", e);
+            }
+        }
+    }
+
+    @Override
+    public void onInstanceActivatedEvent() {
+        ExtensionUtils.executeInstanceActivatedExtension();
+    }
+
+    @Override
+    public void onArtifactUpdatedEvent(ArtifactUpdatedEvent artifactUpdatedEvent) {
+        if (log.isInfoEnabled()) {
+            log.info(String.format("Artifact update event received: [tenant] %s [cluster] %s [status] %s",
+                    artifactUpdatedEvent.getTenantId(), artifactUpdatedEvent.getClusterId(), artifactUpdatedEvent.getStatus()));
+        }
+
+        String clusterIdInMessage = artifactUpdatedEvent.getClusterId();
+        String clusterIdInPayload = CartridgeAgentConfiguration.getInstance().getClusterId();
+        String repoURL = artifactUpdatedEvent.getRepoURL();
+
+        // we need to execute the logic if only the update is relevant to this cluster domain
+        if (StringUtils.isNotEmpty(repoURL) && (clusterIdInPayload != null) && clusterIdInPayload.equals(clusterIdInMessage)) {
+
+            String localRepoPath = CartridgeAgentConfiguration.getInstance().getAppPath();
+            String repoPassword = CartridgeAgentUtils.decryptPassword(artifactUpdatedEvent.getRepoPassword());
+            String repoUsername = artifactUpdatedEvent.getRepoUserName();
+            String tenantId = artifactUpdatedEvent.getTenantId();
+            boolean isMultitenant = CartridgeAgentConfiguration.getInstance().isMultitenant();
+
+            if (log.isInfoEnabled()) {
+                log.info("Executing git checkout");
+            }
+            RepositoryInformation repoInformation = new RepositoryInformation();
+            repoInformation.setRepoUsername(repoUsername);
+            if (repoPassword == null) {
+                repoInformation.setRepoPassword("");
+            } else {
+                repoInformation.setRepoPassword(repoPassword);
+            }
+            repoInformation.setRepoUrl(repoURL);
+            repoInformation.setRepoPath(localRepoPath);
+            repoInformation.setTenantId(tenantId);
+            repoInformation.setMultitenant(isMultitenant);
+            boolean cloneExists = GitBasedArtifactRepository.getInstance().cloneExists(repoInformation);
+            try {
+                GitBasedArtifactRepository.getInstance().checkout(repoInformation);
+            } catch (Exception e) {
+                log.error(e);
+            }
+            Map<String, String> env = new HashMap<String, String>();
+            env.put("STRATOS_ARTIFACT_UPDATED_CLUSTER_ID", artifactUpdatedEvent.getClusterId());
+            env.put("STRATOS_ARTIFACT_UPDATED_TENANT_ID", artifactUpdatedEvent.getTenantId());
+            env.put("STRATOS_ARTIFACT_UPDATED_REPO_URL", artifactUpdatedEvent.getRepoURL());
+            env.put("STRATOS_ARTIFACT_UPDATED_REPO_PASSWORD", artifactUpdatedEvent.getRepoPassword());
+            env.put("STRATOS_ARTIFACT_UPDATED_REPO_USERNAME", artifactUpdatedEvent.getRepoUserName());
+            env.put("STRATOS_ARTIFACT_UPDATED_STATUS", artifactUpdatedEvent.getStatus());
+            ExtensionUtils.executeArtifactsUpdatedExtension(env);
+
+            if (!cloneExists) {
+                // Executed git clone, publish instance activated event
+                CartridgeAgentEventPublisher.publishInstanceActivatedEvent();
+            }
+
+            // Start the artifact update task
+            boolean artifactUpdateEnabled = Boolean.parseBoolean(System.getProperty(CartridgeAgentConstants.ENABLE_ARTIFACT_UPDATE));
+            if (artifactUpdateEnabled) {
+
+                boolean autoCommit = CartridgeAgentConfiguration.getInstance().isCommitsEnabled();
+                boolean autoCheckout = CartridgeAgentConfiguration.getInstance().isCheckoutEnabled();
+
+                long artifactUpdateInterval = 10;
+                // get update interval
+                String artifactUpdateIntervalStr = System.getProperty(CartridgeAgentConstants.ARTIFACT_UPDATE_INTERVAL);
+
+                if (artifactUpdateIntervalStr != null && !artifactUpdateIntervalStr.isEmpty()) {
+                    try {
+                        artifactUpdateInterval = Long.parseLong(artifactUpdateIntervalStr);
+
+                    } catch (NumberFormatException e) {
+                        log.error("Invalid artifact sync interval specified ", e);
+                        artifactUpdateInterval = 10;
+                    }
+                }
+
+                log.info("Artifact updating task enabled, update interval: " + artifactUpdateInterval + "s");
+                if (autoCommit) {
+                    log.info("Auto Commit is turned on ");
+                }  else {
+                    log.info("Auto Commit is turned off ");
+                }
+
+                if (autoCheckout) {
+                    log.info("Auto Checkout is turned on ");
+                } else {
+                    log.info("Auto Checkout is turned off ");
+                }
+
+                GitBasedArtifactRepository.getInstance().scheduleSyncTask(repoInformation, autoCheckout, autoCommit, artifactUpdateInterval);
+
+            } else {
+                log.info("Artifact updating task disabled");
+            }
+            
+            // If supert tenant temp app path is available,
+            // copy the artifacts to carbon server's deployment path
+            String src = CartridgeAgentConstants.SUPERTENANT_TEMP_PATH;
+            if (new File(src).exists() && tenantId.equals("-1234")) {
+                ExtensionUtils.executeCopyArtifactsExtension(src,
+    					CartridgeAgentConfiguration.getInstance().getAppPath()+ "/repository/deployment/server/");
+            }
+
+        }
+    }
+
+    @Override
+    public void onArtifactUpdateSchedulerEvent(String tenantId) {
+        Map<String, String> env = new HashMap<String, String>();
+        env.put("STRATOS_ARTIFACT_UPDATED_TENANT_ID", tenantId);
+        env.put("STRATOS_ARTIFACT_UPDATED_SCHEDULER", "true");
+        ExtensionUtils.executeArtifactsUpdatedExtension(env);
+    }
+
+    @Override
+    public void onInstanceCleanupClusterEvent(InstanceCleanupClusterEvent instanceCleanupClusterEvent) {
+        cleanup();
+    }
+
+    @Override
+    public void onInstanceCleanupMemberEvent(InstanceCleanupMemberEvent instanceCleanupMemberEvent) {
+        cleanup();
+    }
+
+    private void cleanup() {
+        if (log.isInfoEnabled()) {
+            log.info("Executing cleaning up the data in the cartridge instance...");
+        }
+        //sending event on the maintenance mode
+        CartridgeAgentEventPublisher.publishMaintenanceModeEvent();
+
+        //cleaning up the cartridge instance's data
+        ExtensionUtils.executeCleanupExtension();
+        if (log.isInfoEnabled()) {
+            log.info("cleaning up finished in the cartridge instance...");
+        }
+        if (log.isInfoEnabled()) {
+            log.info("publishing ready to shutdown event...");
+        }
+        //publishing the Ready to shutdown event after performing the cleanup
+        CartridgeAgentEventPublisher.publishInstanceReadyToShutdownEvent();
+    }
+
+
+    @Override
+    public void onMemberActivatedEvent(MemberActivatedEvent memberActivatedEvent) {
+        if (log.isInfoEnabled()) {
+            log.info(String.format("Member activated event received: [service] %s [cluster] %s [member] %s",
+                    memberActivatedEvent.getServiceName(), memberActivatedEvent.getClusterId(), memberActivatedEvent.getMemberId()));
+        }
+
+        if (log.isDebugEnabled()) {
+            String msg = gson.toJson(memberActivatedEvent);
+            log.debug("Member activated event msg:" + msg);
+        }
+
+        boolean isConsistent = ExtensionUtils.checkTopologyConsistency(memberActivatedEvent.getServiceName(),
+                memberActivatedEvent.getClusterId(), memberActivatedEvent.getMemberId());
+        if (!isConsistent) {
+            if (log.isErrorEnabled()) {
+                log.error("Topology is inconsistent...failed to execute member activated event");
+            }
+            return;
+        }
+
+        Topology topology = TopologyManager.getTopology();
+        Service service = topology.getService(memberActivatedEvent.getServiceName());
+        Cluster cluster = service.getCluster(memberActivatedEvent.getClusterId());
+        String lbClusterId = cluster.getMember(memberActivatedEvent.getMemberId()).getLbClusterId();
+        Member member = cluster.getMember(memberActivatedEvent.getMemberId());
+
+        // check whether member activated event is received from the same cluster, lbcluster or service group
+        if (ExtensionUtils.isRelevantMemberEvent(memberActivatedEvent.getServiceName(), memberActivatedEvent.getClusterId(), lbClusterId)) {
+            Map<String, String> env = new HashMap<String, String>();
+            env.put("STRATOS_MEMBER_ACTIVATED_MEMBER_IP", memberActivatedEvent.getMemberIp());
+            env.put("STRATOS_MEMBER_ACTIVATED_MEMBER_ID", memberActivatedEvent.getMemberId());
+            env.put("STRATOS_MEMBER_ACTIVATED_CLUSTER_ID", memberActivatedEvent.getClusterId());
+            env.put("STRATOS_MEMBER_ACTIVATED_LB_CLUSTER_ID", lbClusterId);
+            env.put("STRATOS_MEMBER_ACTIVATED_NETWORK_PARTITION_ID", memberActivatedEvent.getNetworkPartitionId());
+            env.put("STRATOS_MEMBER_ACTIVATED_SERVICE_NAME", memberActivatedEvent.getServiceName());
+
+            Collection<Port> ports = memberActivatedEvent.getPorts();
+            String ports_str = "";
+            for (Port port : ports) {
+                ports_str += port.getProtocol() + "," + port.getValue() + "," + port.getProxy() + "|";
+            }
+            env.put("STRATOS_MEMBER_ACTIVATED_PORTS", ports_str);
+
+            Collection<Member> members = cluster.getMembers();
+            env.put("STRATOS_MEMBER_ACTIVATED_MEMBER_LIST_JSON", gson.toJson(members, memberType));
+            String[] memberIps = ExtensionUtils.getLbMemberIp(lbClusterId);
+            if (memberIps != null && memberIps.length > 1) {
+                env.put("STRATOS_MEMBER_ACTIVATED_LB_IP", memberIps[0]);
+                env.put("STRATOS_MEMBER_ACTIVATED_LB_PUBLIC_IP", memberIps[1]);
+            }
+            env.put("STRATOS_TOPOLOGY_JSON", gson.toJson(topology.getServices(), serviceType));
+            ExtensionUtils.addProperties(service.getProperties(), env, "MEMBER_ACTIVATED_SERVICE_PROPERTY");
+            ExtensionUtils.addProperties(cluster.getProperties(), env, "MEMBER_ACTIVATED_CLUSTER_PROPERTY");
+            ExtensionUtils.addProperties(member.getProperties(), env, "MEMBER_ACTIVATED_MEMBER_PROPERTY");
+            
+            // if clustering is enabled check activated member is WK member
+            String flagClustering = CartridgeAgentConfiguration.getInstance().getIsClustered();
+
+            // if WK member is re-spawned, update axis2.xml
+            if (member.getProperties() != null && "true".equals(member.getProperties().getProperty(CartridgeAgentConstants.CLUSTERING_PRIMARY_KEY)) &&
+                    flagClustering != null && "true".equals(flagClustering.toLowerCase())){
+            	if(log.isDebugEnabled()) {
+            		log.debug(" If WK member is re-spawned, update axis2.xml ");
+            	}
+                boolean hasWKIpChanged = true;
+                for (Member m : this.wkMembers){
+                    if (m.getMemberIp().equals(memberActivatedEvent.getMemberIp())){
+                        hasWKIpChanged = false;
+                    }
+                }
+                if(log.isDebugEnabled()) {
+                	log.debug(" hasWKIpChanged " + hasWKIpChanged);
+                }
+                int minCount = Integer.parseInt(CartridgeAgentConfiguration.getInstance().getMinCount());                
+                boolean isWKMemberGroupReady = isWKMemberGroupReady(env, minCount);
+                if(log.isDebugEnabled()) {
+                	log.debug("minCount " + minCount);
+                	log.debug("isWKMemberGroupReady " + isWKMemberGroupReady);
+                }
+                if (hasWKIpChanged && isWKMemberGroupReady){
+                	if(log.isDebugEnabled()) {
+                		log.debug("Setting env var STRATOS_UPDATE_WK_IP to true");
+                	}
+                    env.put("STRATOS_UPDATE_WK_IP", "true");
+                }
+            }      
+            if(log.isDebugEnabled()) {
+            	log.debug("Setting env var STRATOS_CLUSTERING to " + flagClustering);
+            }
+            env.put("STRATOS_CLUSTERING", flagClustering);
+            env.put("STRATOS_WK_MEMBER_COUNT", CartridgeAgentConfiguration.getInstance().getMinCount());
+            ExtensionUtils.executeMemberActivatedExtension(env);
+        } else {
+            if (log.isDebugEnabled()) {
+                log.debug("Member activated event is not relevant...skipping agent extension");
+            }
+        }
+    }
+
+
+    @Override
+    public void onCompleteTopologyEvent(CompleteTopologyEvent completeTopologyEvent) {
+        if (log.isDebugEnabled()) {
+            log.debug("Complete topology event received");
+
+        }
+        String serviceNameInPayload = CartridgeAgentConfiguration.getInstance().getServiceName();
+        String clusterIdInPayload = CartridgeAgentConfiguration.getInstance().getClusterId();
+        String memberIdInPayload = CartridgeAgentConfiguration.getInstance().getMemberId();
+        ExtensionUtils.checkTopologyConsistency(serviceNameInPayload, clusterIdInPayload, memberIdInPayload);
+
+        Topology topology = completeTopologyEvent.getTopology();
+        Service service = topology.getService(serviceNameInPayload);
+        Cluster cluster = service.getCluster(clusterIdInPayload);
+
+        Map<String, String> env = new HashMap<String, String>();
+        env.put("STRATOS_TOPOLOGY_JSON", gson.toJson(topology.getServices(), serviceType));
+        env.put("STRATOS_MEMBER_LIST_JSON", gson.toJson(cluster.getMembers(), memberType));
+        ExtensionUtils.executeCompleteTopologyExtension(env);
+    }
+
+    @Override
+    public void onCompleteTenantEvent(CompleteTenantEvent completeTenantEvent) {
+        if (log.isDebugEnabled()) {
+            log.debug("Complete tenant event received");
+        }
+        String tenantListJson = gson.toJson(completeTenantEvent.getTenants(), tenantType);
+        if (log.isDebugEnabled()) {
+            log.debug("Complete tenants:" + tenantListJson);
+        }
+        Map<String, String> env = new HashMap<String, String>();
+        env.put("STRATOS_TENANT_LIST_JSON", tenantListJson);
+        ExtensionUtils.executeCompleteTenantExtension(env);
+    }
+
+    @Override
+    public void onMemberTerminatedEvent(MemberTerminatedEvent memberTerminatedEvent) {
+        if (log.isInfoEnabled()) {
+            log.info(String.format("Member terminated event received: [service] %s [cluster] %s [member] %s",
+                    memberTerminatedEvent.getServiceName(), memberTerminatedEvent.getClusterId(), memberTerminatedEvent.getMemberId()));
+        }
+
+        if (log.isDebugEnabled()) {
+            String msg = gson.toJson(memberTerminatedEvent);
+            log.debug("Member terminated event msg:" + msg);
+        }
+
+        boolean isConsistent = ExtensionUtils.checkTopologyConsistency(memberTerminatedEvent.getServiceName(),
+                memberTerminatedEvent.getClusterId(), memberTerminatedEvent.getMemberId());
+        if (!isConsistent) {
+            if (log.isErrorEnabled()) {
+                log.error("Topology is inconsistent...failed to execute member terminated event");
+            }
+            return;
+        }
+
+        Topology topology = TopologyManager.getTopology();
+        Service service = topology.getService(memberTerminatedEvent.getServiceName());
+        Cluster cluster = service.getCluster(memberTerminatedEvent.getClusterId());
+        Member terminatedMember = cluster.getMember(memberTerminatedEvent.getMemberId());
+        String lbClusterId = cluster.getMember(memberTerminatedEvent.getClusterId()).getLbClusterId();
+
+        // check whether terminated member is within the same cluster, LB cluster or service group
+        if (ExtensionUtils.isRelevantMemberEvent(memberTerminatedEvent.getServiceName(),
+                memberTerminatedEvent.getClusterId(), lbClusterId)) {
+
+            Collection<Member> members = cluster.getMembers();
+            Map<String, String> env = new HashMap<String, String>();
+            env.put("STRATOS_MEMBER_TERMINATED_MEMBER_IP", terminatedMember.getMemberIp());
+            env.put("STRATOS_MEMBER_TERMINATED_MEMBER_ID", memberTerminatedEvent.getMemberId());
+            env.put("STRATOS_MEMBER_TERMINATED_CLUSTER_ID", memberTerminatedEvent.getClusterId());
+            env.put("STRATOS_MEMBER_TERMINATED_LB_CLUSTER_ID", lbClusterId);
+            env.put("STRATOS_MEMBER_TERMINATED_NETWORK_PARTITION_ID", memberTerminatedEvent.getNetworkPartitionId());
+            env.put("STRATOS_MEMBER_TERMINATED_SERVICE_NAME", memberTerminatedEvent.getServiceName());
+            env.put("STRATOS_MEMBER_TERMINATED_MEMBER_LIST_JSON", gson.toJson(members, memberType));
+            env.put("STRATOS_TOPOLOGY_JSON", gson.toJson(topology.getServices(), serviceType));
+            String[] memberIps = ExtensionUtils.getLbMemberIp(lbClusterId);
+            if (memberIps != null && memberIps.length > 1) {
+                env.put("STRATOS_MEMBER_TERMINATED_LB_IP", memberIps[0]);
+                env.put("STRATOS_MEMBER_TERMINATED_LB_PUBLIC_IP", memberIps[1]);
+            }
+
+            ExtensionUtils.addProperties(service.getProperties(), env, "MEMBER_TERMINATED_SERVICE_PROPERTY");
+            ExtensionUtils.addProperties(cluster.getProperties(), env, "MEMBER_TERMINATED_CLUSTER_PROPERTY");
+            ExtensionUtils.addProperties(terminatedMember.getProperties(), env, "MEMBER_TERMINATED_MEMBER_PROPERTY");
+            ExtensionUtils.executeMemberTerminatedExtension(env);
+        } else {
+            if (log.isDebugEnabled()) {
+                log.debug("Member terminated event is not relevant...skipping agent extension");
+            }
+        }
+    }
+
+    @Override
+    public void onMemberSuspendedEvent(MemberSuspendedEvent memberSuspendedEvent) {
+        if (log.isInfoEnabled()) {
+            log.info(String.format("Member suspended event received: [service] %s [cluster] %s [member] %s",
+                    memberSuspendedEvent.getServiceName(), memberSuspendedEvent.getClusterId(), memberSuspendedEvent.getMemberId()));
+        }
+
+        if (log.isDebugEnabled()) {
+            String msg = gson.toJson(memberSuspendedEvent);
+            log.debug("Member suspended event msg:" + msg);
+        }
+
+        boolean isConsistent = ExtensionUtils.checkTopologyConsistency(memberSuspendedEvent.getServiceName(),
+                memberSuspendedEvent.getClusterId(), memberSuspendedEvent.getMemberId());
+        if (!isConsistent) {
+            if (log.isErrorEnabled()) {
+                log.error("Topology is inconsistent...failed to execute member suspended event");
+            }
+            return;
+        }
+
+        String clusterId = memberSuspendedEvent.getClusterId();
+        Topology topology = TopologyManager.getTopology();
+        Service service = topology.getService(memberSuspendedEvent.getServiceName());
+        Cluster cluster = service.getCluster(memberSuspendedEvent.getClusterId());
+        Member suspendedMember = cluster.getMember(memberSuspendedEvent.getMemberId());
+        String lbClusterId = cluster.getMember(memberSuspendedEvent.getClusterId()).getLbClusterId();
+
+        // check whether new member is in the same member cluster or LB cluster of this instance
+        if (ExtensionUtils.isRelevantMemberEvent(memberSuspendedEvent.getServiceName(),
+                memberSuspendedEvent.getClusterId(), lbClusterId)) {
+            Collection<Member> members = cluster.getMembers();
+            Map<String, String> env = new HashMap<String, String>();
+            env.put("STRATOS_MEMBER_SUSPENDED_MEMBER_IP", suspendedMember.getMemberIp());
+            env.put("STRATOS_MEMBER_SUSPENDED_MEMBER_ID", memberSuspendedEvent.getMemberId());
+            env.put("STRATOS_MEMBER_SUSPENDED_CLUSTER_ID", memberSuspendedEvent.getClusterId());
+            env.put("STRATOS_MEMBER_SUSPENDED_LB_CLUSTER_ID", lbClusterId);
+            env.put("STRATOS_MEMBER_SUSPENDED_NETWORK_PARTITION_ID", memberSuspendedEvent.getNetworkPartitionId());
+            env.put("STRATOS_MEMBER_SUSPENDED_SERVICE_NAME", memberSuspendedEvent.getServiceName());
+            env.put("STRATOS_MEMBER_SUSPENDED_MEMBER_LIST_JSON", gson.toJson(members, memberType));
+            env.put("STRATOS_TOPOLOGY_JSON", gson.toJson(topology.getServices(), serviceType));
+            String[] memberIps = ExtensionUtils.getLbMemberIp(lbClusterId);
+            if (memberIps != null && memberIps.length > 1) {
+                env.put("STRATOS_MEMBER_SUSPENDED_LB_IP", memberIps[0]);
+                env.put("STRATOS_MEMBER_SUSPENDED_LB_PUBLIC_IP", memberIps[1]);
+            }
+            ExtensionUtils.addProperties(service.getProperties(), env, "MEMBER_SUSPENDED_SERVICE_PROPERTY");
+            ExtensionUtils.addProperties(cluster.getProperties(), env, "MEMBER_SUSPENDED_CLUSTER_PROPERTY");
+            ExtensionUtils.addProperties(suspendedMember.getProperties(), env, "MEMBER_SUSPENDED_MEMBER_PROPERTY");
+            ExtensionUtils.executeMemberSuspendedExtension(env);
+        } else {
+            if (log.isDebugEnabled()) {
+                log.debug("Member suspended event is not relevant...skipping agent extension");
+            }
+        }
+    }
+
+    @Override
+    public void onMemberStartedEvent(MemberStartedEvent memberStartedEvent) {
+        if (log.isInfoEnabled()) {
+            log.info(String.format("Member started event received: [service] %s [cluster] %s [member] %s",
+                    memberStartedEvent.getServiceName(), memberStartedEvent.getClusterId(), memberStartedEvent.getMemberId()));
+        }
+
+        if (log.isDebugEnabled()) {
+            String msg = gson.toJson(memberStartedEvent);
+            log.debug("Member started event msg:" + msg);
+        }
+
+        boolean isConsistent = ExtensionUtils.checkTopologyConsistency(memberStartedEvent.getServiceName(),
+                memberStartedEvent.getClusterId(), memberStartedEvent.getMemberId());
+        if (!isConsistent) {
+            if (log.isErrorEnabled()) {
+                log.error("Topology is inconsistent...failed to execute member started event");
+            }
+            return;
+        }
+        String clusterId = memberStartedEvent.getClusterId();
+        Topology topology = TopologyManager.getTopology();
+        Service service = topology.getService(memberStartedEvent.getServiceName());
+        Cluster cluster = service.getCluster(memberStartedEvent.getClusterId());
+        Member startedMember = cluster.getMember(memberStartedEvent.getMemberId());
+        String lbClusterId = cluster.getMember(memberStartedEvent.getMemberId()).getLbClusterId();
+
+        // check whether new member is in the same member cluster or LB cluster of this instance
+        if (ExtensionUtils.isRelevantMemberEvent(memberStartedEvent.getServiceName(),
+                memberStartedEvent.getClusterId(), lbClusterId)) {
+            Collection<Member> members = cluster.getMembers();
+            Map<String, String> env = new HashMap<String, String>();
+            env.put("STRATOS_MEMBER_STARTED_MEMBER_IP", startedMember.getMemberIp());
+            env.put("STRATOS_MEMBER_STARTED_MEMBER_ID", memberStartedEvent.getMemberId());
+            env.put("STRATOS_MEMBER_STARTED_CLUSTER_ID", memberStartedEvent.getClusterId());
+            env.put("STRATOS_MEMBER_STARTED_LB_CLUSTER_ID", lbClusterId);
+            env.put("STRATOS_MEMBER_STARTED_NETWORK_PARTITION_ID", memberStartedEvent.getNetworkPartitionId());
+            env.put("STRATOS_MEMBER_STARTED_SERVICE_NAME", memberStartedEvent.getServiceName());
+            env.put("STRATOS_MEMBER_STARTED_MEMBER_LIST_JSON", gson.toJson(members, memberType));
+            env.put("STRATOS_MEMBER_STARTED_TOPOLOGY_JSON", gson.toJson(topology.getServices(), serviceType));
+            String[] memberIps = ExtensionUtils.getLbMemberIp(lbClusterId);
+            if (memberIps != null && memberIps.length > 1) {
+                env.put("STRATOS_MEMBER_STARTED_LB_IP", memberIps[0]);
+                env.put("STRATOS_MEMBER_STARTED_LB_PUBLIC_IP", memberIps[1]);
+            }
+            ExtensionUtils.addProperties(service.getProperties(), env, "MEMBER_STARTED_SERVICE_PROPERTY");
+            ExtensionUtils.addProperties(cluster.getProperties(), env, "MEMBER_STARTED_CLUSTER_PROPERTY");
+            ExtensionUtils.addProperties(startedMember.getProperties(), env, "MEMBER_STARTED_MEMBER_PROPERTY");
+            ExtensionUtils.executeMemberStartedExtension(env);
+        } else {
+            if (log.isDebugEnabled()) {
+                log.debug("Member started event is not relevant...skipping agent extension");
+            }
+        }
+    }
+
+    private boolean isWKMemberGroupReady(Map<String, String> envParameters, int minCount) {
+        Topology topology = TopologyManager.getTopology();
+        if (topology == null || !topology.isInitialized()) {
+            return false;
+        }
+        String serviceGroupInPayload = CartridgeAgentConfiguration.getInstance().getServiceGroup();
+        if (serviceGroupInPayload != null) {
+            envParameters.put("STRATOS_SERVICE_GROUP", serviceGroupInPayload);
+        }
+
+        // clustering logic for apimanager
+        if (serviceGroupInPayload != null && serviceGroupInPayload.equals("apim")) {
+
+            // handle apistore and publisher case
+            if (CartridgeAgentConfiguration.getInstance().getServiceName().equals("apistore") ||
+                    CartridgeAgentConfiguration.getInstance().getServiceName().equals("publisher")) {
+
+                Collection<Cluster> apistoreClusterCollection = topology.getService("apistore").getClusters();
+                Collection<Cluster> publisherClusterCollection = topology.getService("publisher").getClusters();
+
+                List<Member> apistoreMemberList = new ArrayList<Member>();
+                for (Member member : apistoreClusterCollection.iterator().next().getMembers()) {
+                    if (member.getStatus().equals(MemberStatus.Starting) || member.getStatus().equals(MemberStatus.Activated)) {
+                        apistoreMemberList.add(member);
+                        this.wkMembers.add(member);
+                    }
+                }
+                if (apistoreMemberList.isEmpty()) {
+                    if (log.isDebugEnabled()) {
+                        log.debug("API Store members not yet created");
+                    }
+                    return false;
+                }
+                Member apistoreMember = apistoreMemberList.get(0);
+                envParameters.put("STRATOS_WK_APISTORE_MEMBER_IP", apistoreMember.getMemberIp());
+                if (log.isDebugEnabled()) {
+                    log.debug("STRATOS_WK_APISTORE_MEMBER_IP: " + apistoreMember.getMemberIp());
+                }
+
+                List<Member> publisherMemberList = new ArrayList<Member>();
+                for (Member member : publisherClusterCollection.iterator().next().getMembers()) {
+                    if (member.getStatus().equals(MemberStatus.Starting) || member.getStatus().equals(MemberStatus.Activated)) {
+                        publisherMemberList.add(member);
+                        this.wkMembers.add(member);
+                    }
+                }
+                if (publisherMemberList.isEmpty()) {
+                    if (log.isDebugEnabled()) {
+                        log.debug("API Publisher members not yet created");
+                    }
+                    return false;
+                }
+                Member publisherMember = publisherMemberList.get(0);
+                envParameters.put("STRATOS_WK_PUBLISHER_MEMBER_IP", publisherMember.getMemberIp());
+                if (log.isDebugEnabled()) {
+                    log.debug("STRATOS_WK_PUBLISHER_MEMBER_IP: " + publisherMember.getMemberIp());
+                }
+
+                return true;
+
+            } else if (CartridgeAgentConfiguration.getInstance().getServiceName().equals("gatewaymgt") ||
+                    CartridgeAgentConfiguration.getInstance().getServiceName().equals("gateway")) {
+
+                if (CartridgeAgentConfiguration.getInstance().getDeployment() != null) {
+                    // check if deployment is Manager Worker separated
+                    if (CartridgeAgentConfiguration.getInstance().getDeployment().equalsIgnoreCase(CartridgeAgentConstants.DEPLOYMENT_MANAGER) ||
+                            CartridgeAgentConfiguration.getInstance().getDeployment().equalsIgnoreCase(CartridgeAgentConstants.DEPLOYMENT_WORKER)) {
+
+                        log.info("Deployment pattern for the node: " + CartridgeAgentConfiguration.getInstance().getDeployment());
+                        envParameters.put("DEPLOYMENT", CartridgeAgentConfiguration.getInstance().getDeployment());
+                        // check if WKA members of Manager Worker separated deployment is ready
+                        return isManagerWorkerWKAGroupReady(envParameters);
+                    }
+                }
+
+
+            } else if (CartridgeAgentConfiguration.getInstance().getServiceName().equals("keymanager")) {
+                return true;
+            }
+        } else {
+
+            if (CartridgeAgentConfiguration.getInstance().getDeployment() != null) {
+                // check if deployment is Manager Worker separated
+                if (CartridgeAgentConfiguration.getInstance().getDeployment().equalsIgnoreCase(CartridgeAgentConstants.DEPLOYMENT_MANAGER) ||
+                        CartridgeAgentConfiguration.getInstance().getDeployment().equalsIgnoreCase(CartridgeAgentConstants.DEPLOYMENT_WORKER)) {
+
+                    log.info("Deployment pattern for the node: " + CartridgeAgentConfiguration.getInstance().getDeployment());
+                    envParameters.put("DEPLOYMENT", CartridgeAgentConfiguration.getInstance().getDeployment());
+                    // check if WKA members of Manager Worker separated deployment is ready
+                    return isManagerWorkerWKAGroupReady(envParameters);
+                }
+            }
+
+            String serviceNameInPayload = CartridgeAgentConfiguration.getInstance().getServiceName();
+            String clusterIdInPayload = CartridgeAgentConfiguration.getInstance().getClusterId();
+            Service service = topology.getService(serviceNameInPayload);
+            Cluster cluster = service.getCluster(clusterIdInPayload);
+
+            List<Member> wkMembers = new ArrayList<Member>();
+            for (Member member : cluster.getMembers()) {
+                if (member.getProperties() != null &&
+                        member.getProperties().containsKey("PRIMARY") &&
+                        member.getProperties().getProperty("PRIMARY").toLowerCase().equals("true") &&
+                        (member.getStatus().equals(MemberStatus.Starting) || member.getStatus().equals(MemberStatus.Activated))
+                        ) {
+                    wkMembers.add(member);
+                    this.wkMembers.add(member);
+                    if (log.isDebugEnabled()) {
+                        log.debug("Found WKA: STRATOS_WK_MEMBER_IP: " + member.getMemberIp());
+                    }
+                }
+            }
+            if (wkMembers.size() >= minCount) {
+                int idx = 0;
+                for (Member member : wkMembers) {
+                    envParameters.put("STRATOS_WK_MEMBER_" + idx + "_IP", member.getMemberIp());
+                    if (log.isDebugEnabled()) {
+                        log.debug("STRATOS_WK_MEMBER_" + idx + "_IP: " + member.getMemberIp());
+                    }
+                    idx++;
+                }
+                return true;
+            }
+        }
+        return false;
+    }
+
+    // generic worker manager separated clustering logic
+    private boolean isManagerWorkerWKAGroupReady (Map<String, String> envParameters) {
+
+        // for this, we need both manager cluster service name and worker cluster service name
+        String managerServiceName =  CartridgeAgentConfiguration.getInstance().getManagerServiceName();
+        String workerServiceName =  CartridgeAgentConfiguration.getInstance().getWorkerServiceName();
+
+        // managerServiceName and workerServiceName both should not be null /empty
+        if (managerServiceName == null || managerServiceName.isEmpty()) {
+            log.error("Manager service name [ "+ managerServiceName +" ] is invalid");
+            return false;
+        }
+        if (workerServiceName == null || workerServiceName.isEmpty()) {
+            log.error("Worker service name [ "+ workerServiceName +" ] is invalid");
+            return false;
+        }
+
+        boolean minManagerInstancesAvailable = false;
+        boolean minWorkerInstancesAvailable = false;
+
+        TopologyManager.acquireReadLock();
+
+        try {
+            Service managerService = TopologyManager.getTopology().getService(managerServiceName);
+            Service workerService = TopologyManager.getTopology().getService(workerServiceName);
+
+            if (managerService == null) {
+                log.warn("Service [ "+managerServiceName+" ] is not found");
+                return false;
+            }
+
+            if (workerService == null) {
+                log.warn("Service [ "+workerServiceName+" ] is not found");
+                return false;
+            }
+
+            // manager clusters
+            Collection<Cluster> managerClusters = managerService.getClusters();
+            if (managerClusters == null || managerClusters.isEmpty()) {
+                log.warn("No clusters found for service [ "+ managerServiceName + " ]");
+                return false;
+            }
+
+            int managerMinInstanceCount = 1;
+            boolean managerMinInstanceCountFound = false;
+
+            List<Member> managerWkaMembers = new ArrayList<Member>();
+            for (Member member : managerClusters.iterator().next().getMembers()) {
+
+                if (member.getProperties() != null && member.getProperties().containsKey("PRIMARY") &&
+                            member.getProperties().getProperty("PRIMARY").toLowerCase().equals("true") &&
+                            (member.getStatus().equals(MemberStatus.Starting) || member.getStatus().equals(MemberStatus.Activated))) {
+
+                    managerWkaMembers.add(member);
+                    this.wkMembers.add(member);
+                    
+                    // get the min instance count
+                    if (!managerMinInstanceCountFound) {
+                        managerMinInstanceCount = getMinInstanceCountFromMemberProperties(member);
+                        managerMinInstanceCountFound = true;
+                        log.info("Manager min instance count: " + managerMinInstanceCount);
+
+                    }
+                }
+            }
+
+            if (managerWkaMembers.size() >= managerMinInstanceCount) {
+                minManagerInstancesAvailable = true;
+                int idx = 0;
+                for (Member member : managerWkaMembers) {
+                    envParameters.put("STRATOS_WK_MANAGER_MEMBER_" + idx + "_IP", member.getMemberIp());
+                    if(log.isDebugEnabled()) {
+                        log.debug("STRATOS_WK_MANAGER_MEMBER_" + idx + "_IP: " + member.getMemberIp());
+                    }
+                    idx++;
+                }
+
+                envParameters.put("STRATOS_WK_MANAGER_MEMBER_COUNT", Integer.toString(managerMinInstanceCount));
+            }
+            
+            // If all the manager members are non primary and is greate than or equal to mincount, 
+            // minManagerInstancesAvailable should be true
+            boolean allManagersNonPrimary = true;
+            for (Member member : managerClusters.iterator().next().getMembers()) {
+            	
+            	// get the min instance count
+                if (!managerMinInstanceCountFound) {
+                    managerMinInstanceCount = getMinInstanceCountFromMemberProperties(member);
+                    managerMinInstanceCountFound = true;
+                    log.info("Manager min instance count when allManagersNonPrimary true : " + managerMinInstanceCount);
+                }
+                
+                if (member.getProperties() != null && member.getProperties().containsKey("PRIMARY") &&
+                            member.getProperties().getProperty("PRIMARY").toLowerCase().equals("true") ) {
+                	allManagersNonPrimary = false;
+                	break;
+                }
+            }
+            if(log.isDebugEnabled()){
+            	log.debug(" allManagerNonPrimary & managerMinInstanceCount [" 
+            		 + allManagersNonPrimary + "], [" + managerMinInstanceCount+"] ");
+            }
+			if (allManagersNonPrimary &&  managerClusters.size() >= managerMinInstanceCount) {
+				minManagerInstancesAvailable = true;
+			}
+
+            // worker cluster
+            Collection<Cluster> workerClusters = workerService.getClusters();
+            if (workerClusters == null || workerClusters.isEmpty()) {
+                log.warn("No clusters found for service [ "+ workerServiceName + " ]");
+                return false;
+            }
+
+            int workerMinInstanceCount = 1;
+            boolean workerMinInstanceCountFound = false;
+
+            List<Member> workerWkaMembers = new ArrayList<Member>();
+            for (Member member : workerClusters.iterator().next().getMembers()) {
+            	if (log.isDebugEnabled()) {
+            		log.debug("Checking member : " + member.getMemberId());
+            	}
+                if (member.getProperties() != null &&
+                        member.getProperties().containsKey("PRIMARY") &&
+                        member.getProperties().getProperty("PRIMARY").toLowerCase().equals("true") &&
+                        (member.getStatus().equals(MemberStatus.Starting) || member.getStatus().equals(MemberStatus.Activated))) {
+                	if (log.isDebugEnabled()) {
+                		log.debug("Added worker member " + member.getMemberId());
+                	}
+                    workerWkaMembers.add(member);
+                    this.wkMembers.add(member);
+
+                    // get the min instance count
+                    if (!workerMinInstanceCountFound) {
+                        workerMinInstanceCount = getMinInstanceCountFromMemberProperties(member);
+                        workerMinInstanceCountFound = true;
+                        if (log.isDebugEnabled()) {
+                            log.debug("Worker min instance count: " + workerMinInstanceCount);
+                        }
+                    }
+                }
+            }
+
+            if (workerWkaMembers.size() >= workerMinInstanceCount) {
+                minWorkerInstancesAvailable = true;
+                int idx = 0;
+                for (Member member : workerWkaMembers) {
+                    envParameters.put("STRATOS_WK_WORKER_MEMBER_" + idx + "_IP", member.getMemberIp());
+                    if (log.isDebugEnabled()) {
+                        log.debug("STRATOS_WK_WORKER_MEMBER_" + idx + "_IP: " + member.getMemberIp());
+                    }
+                    idx++;
+                }
+
+                envParameters.put("STRATOS_WK_WORKER_MEMBER_COUNT", Integer.toString(workerMinInstanceCount));
+            }
+
+        } finally {
+            TopologyManager.releaseReadLock();
+        }
+
+        if (log.isDebugEnabled()) {
+        	log.debug(" Returnning values minManagerInstancesAvailable && minWorkerInstancesAvailable [" +
+        		minManagerInstancesAvailable + "],  ["+ minWorkerInstancesAvailable+"] ");
+        }
+        return (minManagerInstancesAvailable && minWorkerInstancesAvailable);
+    }
+
+
+    private int getMinInstanceCountFromMemberProperties (Member member) {
+
+        // default value is 1
+        int minInstanceCount = 1;
+
+        if(member.getProperties().containsKey("MIN_COUNT")) {
+            minInstanceCount = Integer.parseInt(member.getProperties().getProperty("MIN_COUNT"));
+        }
+
+        return minInstanceCount;
+    }
+
+    private void waitForWKMembers(Map<String, String> envParameters) {
+        int minCount = Integer.parseInt(CartridgeAgentConfiguration.getInstance().getMinCount());
+        boolean isWKMemberGroupReady = false;
+        while (!isWKMemberGroupReady) {
+            if (log.isInfoEnabled()) {
+                log.info(String.format("Waiting for %d well known members...", minCount));
+            }
+            try {
+                Thread.sleep(5000);
+            } catch (InterruptedException e) {
+            }
+
+            TopologyManager.acquireReadLock();
+            isWKMemberGroupReady = isWKMemberGroupReady(envParameters, minCount);
+            TopologyManager.releaseReadLock();
+        }
+    }
+
+    @Override
+    public void startServerExtension() {
+
+        // wait until complete topology message is received to get LB IP
+        ExtensionUtils.waitForCompleteTopology();
+        if (log.isInfoEnabled()) {
+            log.info("[start server extension] complete topology event received");
+        }
+        String serviceNameInPayload = CartridgeAgentConfiguration.getInstance().getServiceName();
+        String clusterIdInPayload = CartridgeAgentConfiguration.getInstance().getClusterId();
+        String memberIdInPayload = CartridgeAgentConfiguration.getInstance().getMemberId();
+
+        try {
+            TopologyManager.acquireReadLock();
+            boolean isConsistent = ExtensionUtils.checkTopologyConsistency(serviceNameInPayload,
+                    clusterIdInPayload, memberIdInPayload);
+            if (!isConsistent) {
+                if (log.isErrorEnabled()) {
+                    log.error("Topology is inconsistent...failed to execute start server event");
+                }
+                return;
+            }
+            Topology topology = TopologyManager.getTopology();
+            Service service = topology.getService(serviceNameInPayload);
+            Cluster cluster = service.getCluster(clusterIdInPayload);
+
+            // store environment variable parameters to be passed to extension shell script
+            Map<String, String> env = new HashMap<String, String>();
+
+            // if clustering is enabled wait until all well known members have started
+            String flagClustering = CartridgeAgentConfiguration.getInstance().getIsClustered();
+            if (flagClustering != null && flagClustering.toLowerCase().equals("true")) {
+                env.put("STRATOS_CLUSTERING", "true");
+                env.put("STRATOS_WK_MEMBER_COUNT", CartridgeAgentConfiguration.getInstance().getMinCount());
+                if (CartridgeAgentConfiguration.getInstance().getIsPrimary().toLowerCase().equals("true")) {
+                    env.put("STRATOS_PRIMARY", "true");
+                } else {
+                    env.put("STRATOS_PRIMARY", "false");
+                }
+                TopologyManager.releaseReadLock();
+                waitForWKMembers(env);
+                if (log.isInfoEnabled()) {
+                    log.info(String.format("All well known members have started! Resuming start server extension..."));
+                }
+                TopologyManager.acquireReadLock();
+            }
+
+            env.put("STRATOS_TOPOLOGY_JSON", gson.toJson(topology.getServices(), serviceType));
+            env.put("STRATOS_MEMBER_LIST_JSON", gson.toJson(cluster.getMembers(), memberType));
+            ExtensionUtils.executeStartServersExtension(env);
+        } catch (Exception e) {
+            if (log.isErrorEnabled()) {
+                log.error("Error processing start servers event", e);
+            }
+        } finally {
+            TopologyManager.releaseReadLock();
+        }
+    }
+
+    @Override
+    public void volumeMountExtension(String persistenceMappingsPayload) {
+        ExtensionUtils.executeVolumeMountExtension(persistenceMappingsPayload);
+    }
+
+    @Override
+    public void onSubscriptionDomainAddedEvent(SubscriptionDomainAddedEvent subscriptionDomainAddedEvent) {
+        String tenantDomain = findTenantDomain(subscriptionDomainAddedEvent.getTenantId());
+        if (log.isInfoEnabled()) {
+            log.info(String.format("Subscription domain added event received: [tenant-id] %d [tenant-domain] %s " +
+                            "[domain-name] %s [application-context] %s",
+                    subscriptionDomainAddedEvent.getTenantId(),
+                    tenantDomain,
+                    subscriptionDomainAddedEvent.getDomainName(),
+                    subscriptionDomainAddedEvent.getApplicationContext()
+            ));
+        }
+
+        if (log.isDebugEnabled()) {
+            String msg = gson.toJson(subscriptionDomainAddedEvent);
+            log.debug("Subscription domain added event msg:" + msg);
+        }
+
+        Map<String, String> env = new HashMap<String, String>();
+        env.put("STRATOS_SUBSCRIPTION_SERVICE_NAME", subscriptionDomainAddedEvent.getServiceName());
+        env.put("STRATOS_SUBSCRIPTION_DOMAIN_NAME", subscriptionDomainAddedEvent.getDomainName());
+        env.put("STRATOS_SUBSCRIPTION_TENANT_ID", Integer.toString(subscriptionDomainAddedEvent.getTenantId()));
+        env.put("STRATOS_SUBSCRIPTION_TENANT_DOMAIN", tenantDomain);
+        env.put("STRATOS_SUBSCRIPTION_APPLICATION_CONTEXT", subscriptionDomainAddedEvent.getApplicationContext());
+        ExtensionUtils.executeSubscriptionDomainAddedExtension(env);
+    }
+
+    private String findTenantDomain(int tenantId) {
+        try {
+            TenantManager.acquireReadLock();
+            Tenant tenant = TenantManager.getInstance().getTenant(tenantId);
+            if (tenant == null) {
+                throw new RuntimeException(String.format("Tenant could not be found: [tenant-id] %d", tenantId));
+            }
+            return tenant.getTenantDomain();
+        } finally {
+            TenantManager.releaseReadLock();
+        }
+    }
+
+    @Override
+    public void onSubscriptionDomainRemovedEvent(SubscriptionDomainRemovedEvent subscriptionDomainRemovedEvent) {
+        String tenantDomain = findTenantDomain(subscriptionDomainRemovedEvent.getTenantId());
+        if (log.isInfoEnabled()) {
+            log.info(String.format("Subscription domain removed event received: [tenant-id] %d [tenant-domain] %s " +
+                            "[domain-name] %s",
+                    subscriptionDomainRemovedEvent.getTenantId(),
+                    tenantDomain,
+                    subscriptionDomainRemovedEvent.getDomainName()
+            ));
+        }
+
+        if (log.isDebugEnabled()) {
+            String msg = gson.toJson(subscriptionDomainRemovedEvent);
+            log.debug("Subscription domain removed event msg:" + msg);
+        }
+
+        Map<String, String> env = new HashMap<String, String>();
+        env.put("STRATOS_SUBSCRIPTION_SERVICE_NAME", subscriptionDomainRemovedEvent.getServiceName());
+        env.put("STRATOS_SUBSCRIPTION_DOMAIN_NAME", subscriptionDomainRemovedEvent.getDomainName());
+        env.put("STRATOS_SUBSCRIPTION_TENANT_ID", Integer.toString(subscriptionDomainRemovedEvent.getTenantId()));
+        env.put("STRATOS_SUBSCRIPTION_TENANT_DOMAIN", tenantDomain);
+        ExtensionUtils.executeSubscriptionDomainRemovedExtension(env);
+    }
+
+    @Override
+    public void onCopyArtifactsExtension(String src, String des) {
+        ExtensionUtils.executeCopyArtifactsExtension(src, des);
+    }
+
+}
\ No newline at end of file
diff --git a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/extensions/ExtensionHandler.java b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/extensions/ExtensionHandler.java
new file mode 100644
index 0000000..1ab380c
--- /dev/null
+++ b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/extensions/ExtensionHandler.java
@@ -0,0 +1,64 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.stratos.cartridge.agent.extensions;
+
+import org.apache.stratos.messaging.event.instance.notifier.ArtifactUpdatedEvent;
+import org.apache.stratos.messaging.event.instance.notifier.InstanceCleanupClusterEvent;
+import org.apache.stratos.messaging.event.instance.notifier.InstanceCleanupMemberEvent;
+import org.apache.stratos.messaging.event.tenant.CompleteTenantEvent;
+import org.apache.stratos.messaging.event.tenant.SubscriptionDomainAddedEvent;
+import org.apache.stratos.messaging.event.tenant.SubscriptionDomainRemovedEvent;
+import org.apache.stratos.messaging.event.topology.*;
+
+public interface ExtensionHandler {
+    public void onInstanceStartedEvent();
+
+    public void onInstanceActivatedEvent();
+
+    public void onArtifactUpdatedEvent(ArtifactUpdatedEvent event);
+
+    public void onArtifactUpdateSchedulerEvent(String tenantId);
+
+    public void onInstanceCleanupClusterEvent(InstanceCleanupClusterEvent instanceCleanupClusterEvent);
+
+    public void onInstanceCleanupMemberEvent(InstanceCleanupMemberEvent instanceCleanupMemberEvent);
+
+    public void onMemberActivatedEvent(MemberActivatedEvent memberActivatedEvent);
+
+    public void onCompleteTopologyEvent(CompleteTopologyEvent completeTopologyEvent);
+
+    public void onCompleteTenantEvent(CompleteTenantEvent completeTenantEvent);
+
+    public void onMemberTerminatedEvent(MemberTerminatedEvent memberTerminatedEvent);
+
+    public void onMemberSuspendedEvent(MemberSuspendedEvent memberSuspendedEvent);
+
+    public void onMemberStartedEvent(MemberStartedEvent memberStartedEvent);
+
+    public void startServerExtension();
+
+    public void volumeMountExtension(String persistenceMappingsPayload);
+
+    public void onSubscriptionDomainAddedEvent(SubscriptionDomainAddedEvent subscriptionDomainAddedEvent);
+
+    public void onSubscriptionDomainRemovedEvent(SubscriptionDomainRemovedEvent subscriptionDomainRemovedEvent);
+
+    public void onCopyArtifactsExtension(String src, String des);
+}
\ No newline at end of file
diff --git a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/util/CartridgeAgentConstants.java b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/util/CartridgeAgentConstants.java
index c36eb8c..eb70a3b 100644
--- a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/util/CartridgeAgentConstants.java
+++ b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/util/CartridgeAgentConstants.java
@@ -27,32 +27,68 @@ public class CartridgeAgentConstants implements Serializable{
 	public static final String PARAM_FILE_PATH = "param.file.path";
     public static final String EXTENSIONS_DIR = "extensions.dir";
 
-    public static final String INSTANCE_STARTED_SH = "instance-started.sh";
-    public static final String START_SERVERS_SH = "start-servers.sh";
-    public static final String INSTANCE_ACTIVATED_SH = "instance-activated.sh";
-    public static final String ARTIFACTS_UPDATED_SH = "artifacts-updated.sh";
-    public static final String CLEAN_UP_SH = "clean.sh";
-    public static final String MOUNT_VOLUMES_SH = "mount_volumes.sh";
-    public static final String SUBSCRIPTION_DOMAIN_ADDED_SH = "subscription-domain-added.sh";
-    public static final String SUBSCRIPTION_DOMAIN_REMOVED_SH = "subscription-domain-removed.sh";
-	
+	// payload parameters keys
 	public static final String CARTRIDGE_KEY = "CARTRIDGE_KEY";
 	public static final String APP_PATH = "APP_PATH";
-	public static final String SERVICE_NAME = "SERVICE_NAME";
+    public static final String SERVICE_GROUP = "SERIVCE_GROUP";
+    public static final String SERVICE_NAME = "SERVICE_NAME";
     public static final String CLUSTER_ID = "CLUSTER_ID";
+    public static final String LB_CLUSTER_ID = "LB_CLUSTER_ID";
     public static final String NETWORK_PARTITION_ID = "NETWORK_PARTITION_ID";
     public static final String PARTITION_ID = "PARTITION_ID";
     public static final String MEMBER_ID = "MEMBER_ID";
+    public static final String TENANT_ID= "TENANT_ID";
     public static final String REPO_URL = "REPO_URL";
     public static final String PORTS = "PORTS";
+    public static final String DEPLOYMENT = "DEPLOYMENT";
+    public static final String MANAGER_SERVICE_TYPE = "MANAGER_SERVICE_TYPE";
+    public static final String WORKER_SERVICE_TYPE = "WORKER_SERVICE_TYPE";
+
+    // stratos.sh environment variables keys
     public static final String LOG_FILE_PATHS = "LOG_FILE_PATHS";
     public static final String MEMORY_CONSUMPTION = "memory_consumption";
     public static final String LOAD_AVERAGE = "load_average";
     public static final String PORTS_NOT_OPEN = "ports_not_open";
     public static final String MULTITENANT = "MULTITENANT";
+    public static final String CLUSTERING = "CLUSTERING";
+    public static final String MIN_INSTANCE_COUNT = "MIN_COUNT";
     public static final String ENABLE_ARTIFACT_UPDATE = "enable.artifact.update";
     public static final String ARTIFACT_UPDATE_INTERVAL = "artifact.update.interval";
     public static final String COMMIT_ENABLED = "COMMIT_ENABLED";
-
+    public static final String AUTO_COMMIT = "auto.commit";
+    public static final String AUTO_CHECKOUT = "auto.checkout";
     public static final String LISTEN_ADDRESS = "listen.address";
+    public static final String PROVIDER = "PROVIDER";
+    public static final String INTERNAL = "internal";
+    public static final String LB_PRIVATE_IP = "lb.private.ip";
+    public static final String LB_PUBLIC_IP = "lb.public.ip";
+
+    // stratos.sh extension points shell scripts names keys
+    public static final String INSTANCE_STARTED_SCRIPT = "extension.instance.started";
+    public static final String START_SERVERS_SCRIPT = "extension.start.servers";
+    public static final String INSTANCE_ACTIVATED_SCRIPT = "extension.instance.activated";
+    public static final String ARTIFACTS_UPDATED_SCRIPT = "extension.artifacts.updated";
+    public static final String CLEAN_UP_SCRIPT = "extension.clean";
+    public static final String MOUNT_VOLUMES_SCRIPT = "extension.mount.volumes";
+    public static final String MEMBER_ACTIVATED_SCRIPT = "extension.member.activated";
+    public static final String MEMBER_TERMINATED_SCRIPT = "extension.member.terminated";
+    public static final String MEMBER_SUSPENDED_SCRIPT = "extension.member.suspended";
+    public static final String MEMBER_STARTED_SCRIPT = "extension.member.started";
+    public static final String COMPLETE_TOPOLOGY_SCRIPT = "extension.complete.topology";
+    public static final String COMPLETE_TENANT_SCRIPT = "extension.complete.tenant";
+    public static final String SUBSCRIPTION_DOMAIN_ADDED_SCRIPT = "extension.subscription.domain.added";
+    public static final String SUBSCRIPTION_DOMAIN_REMOVED_SCRIPT = "extension.subscription.domain.removed";
+    public static final String ARTIFACTS_COPY_SCRIPT = "extension.artifacts.copy";
+
+    public static final String SERVICE_GROUP_TOPOLOGY_KEY = "payload_parameter.SERIVCE_GROUP";
+    public static final String CLUSTERING_TOPOLOGY_KEY = "payload_parameter.CLUSTERING";
+    public static final String CLUSTERING_PRIMARY_KEY = "PRIMARY";
+    
+    public static final String SUPERTENANT_TEMP_PATH = "/tmp/-1234/";
+
+    public static final String DEPLOYMENT_MANAGER = "manager";
+    public static final String DEPLOYMENT_WORKER = "worker";
+    public static final String DEPLOYMENT_DEFAULT = "default";
+    public static final String SUPER_TENANT_REPO_PATH = "super.tenant.repository.path";
+    public static final String TENANT_REPO_PATH = "tenant.repository.path";
 }
diff --git a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/util/ExtensionUtils.java b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/util/ExtensionUtils.java
index a29cc8b..ed7d3bb 100644
--- a/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/util/ExtensionUtils.java
+++ b/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/util/ExtensionUtils.java
@@ -24,8 +24,18 @@ import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.stratos.cartridge.agent.config.CartridgeAgentConfiguration;
 import org.apache.stratos.common.util.CommandUtils;
+import org.apache.stratos.messaging.domain.topology.Cluster;
+import org.apache.stratos.messaging.domain.topology.Member;
+import org.apache.stratos.messaging.domain.topology.Service;
+import org.apache.stratos.messaging.domain.topology.Topology;
+import org.apache.stratos.messaging.message.receiver.topology.TopologyManager;
 
 import java.io.File;
+import java.io.FileNotFoundException;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Properties;
 
 /**
  * Cartridge agent extension utility methods.
@@ -35,81 +45,272 @@ public class ExtensionUtils {
 
     private static String getExtensionsDir() {
         String extensionsDir = System.getProperty(CartridgeAgentConstants.EXTENSIONS_DIR);
-        if(StringUtils.isBlank(extensionsDir)) {
+        if (StringUtils.isBlank(extensionsDir)) {
             throw new RuntimeException(String.format("System property not found: %s", CartridgeAgentConstants.EXTENSIONS_DIR));
         }
         return extensionsDir;
     }
 
-    private static String prepareCommand(String scriptFile) {
+    private static String prepareCommand(String scriptFile) throws FileNotFoundException {
         String extensionsDir = getExtensionsDir();
-        return (extensionsDir.endsWith(File.separator)) ?
-                extensionsDir + scriptFile:
+        String filePath = (extensionsDir.endsWith(File.separator)) ?
+                extensionsDir + scriptFile :
                 extensionsDir + File.separator + scriptFile;
+
+        File file = new File(filePath);
+        if (file.exists() && !file.isDirectory()) {
+            return filePath;
+        }
+
+        throw new FileNotFoundException("Script file not found:" + filePath);
     }
 
-    public static void executeStartServersExtension() {
-        try {
-            if(log.isDebugEnabled()) {
-                log.debug("Executing start servers extension");
+    public static void addPayloadParameters(Map<String, String> envParameters){
+        envParameters.put("STRATOS_APP_PATH", CartridgeAgentConfiguration.getInstance().getAppPath());
+        envParameters.put("STRATOS_PARAM_FILE_PATH", System.getProperty(CartridgeAgentConstants.PARAM_FILE_PATH));
+        envParameters.put("STRATOS_SERVICE_NAME", CartridgeAgentConfiguration.getInstance().getServiceName());
+        envParameters.put("STRATOS_TENANT_ID", CartridgeAgentConfiguration.getInstance().getTenantId());
+        envParameters.put("STRATOS_CARTRIDGE_KEY", CartridgeAgentConfiguration.getInstance().getCartridgeKey());
+        envParameters.put("STRATOS_LB_CLUSTER_ID", CartridgeAgentConfiguration.getInstance().getLbClusterId());
+        envParameters.put("STRATOS_CLUSTER_ID", CartridgeAgentConfiguration.getInstance().getClusterId());
+        envParameters.put("STRATOS_NETWORK_PARTITION_ID", CartridgeAgentConfiguration.getInstance().getNetworkPartitionId());
+        envParameters.put("STRATOS_PARTITION_ID", CartridgeAgentConfiguration.getInstance().getPartitionId());
+        envParameters.put("STRATOS_PERSISTENCE_MAPPINGS", CartridgeAgentConfiguration.getInstance().getPersistenceMappings());
+        envParameters.put("STRATOS_REPO_URL", CartridgeAgentConfiguration.getInstance().getRepoUrl());
+
+        // Add LB instance public/private IPs to environment parameters
+        String lbClusterIdInPayload = CartridgeAgentConfiguration.getInstance().getLbClusterId();
+        String[] memberIps = getLbMemberIp(lbClusterIdInPayload);
+        String lbIp, lbPublicIp;
+        if (memberIps != null && memberIps.length > 1) {
+        	lbIp = memberIps[0];
+        	lbPublicIp = memberIps[1];
+        } else {
+        	lbIp = CartridgeAgentConfiguration.getInstance().getLbPrivateIp();
+        	lbPublicIp = CartridgeAgentConfiguration.getInstance().getLbPublicIp();
+        }
+        
+        envParameters.put("STRATOS_LB_IP", lbIp);
+        envParameters.put("STRATOS_LB_PUBLIC_IP", lbPublicIp);
+
+        Topology topology = TopologyManager.getTopology();
+        if (topology.isInitialized()){
+            Service service = topology.getService(CartridgeAgentConfiguration.getInstance().getServiceName());
+            Cluster cluster = service.getCluster(CartridgeAgentConfiguration.getInstance().getClusterId());
+            String memberIdInPayload = CartridgeAgentConfiguration.getInstance().getMemberId();
+            addProperties(service.getProperties(), envParameters, "SERVICE_PROPERTY");
+            addProperties(cluster.getProperties(), envParameters, "CLUSTER_PROPERTY");
+            addProperties(cluster.getMember(memberIdInPayload).getProperties(), envParameters, "MEMBER_PROPERTY");
+        }
+    }
+
+    public static void addProperties(Properties properties, Map<String, String> envParameters, String prefix){
+        if (properties == null || properties.entrySet() == null){
+            return;
+        }
+        for (Map.Entry<Object, Object> entry : properties.entrySet()) {
+            envParameters.put("STRATOS_ " + prefix + "_" + entry.getKey().toString(), entry.getValue().toString());
+            if (log.isDebugEnabled()) {
+                log.debug(String.format("Property added: [key] %s [value] %s",
+                        "STRATOS_ " + prefix + "_" + entry.getKey().toString(), entry.getValue().toString()));
+            }
+        }
+    }
+
+    public static String[] getLbMemberIp(String lbClusterId) {
+        Topology topology = TopologyManager.getTopology();
+        Collection<Service> serviceCollection = topology.getServices();
+
+        for (Service service : serviceCollection) {
+            Collection<Cluster> clusterCollection = service.getClusters();
+            for (Cluster cluster : clusterCollection) {
+                Collection<Member> memberCollection = cluster.getMembers();
+                for (Member member : memberCollection) {
+                    if (member.getClusterId().equals(lbClusterId)) {
+                        return new String[]{member.getMemberIp(), member.getMemberPublicIp()};
+                    }
+                }
             }
-            String command = prepareCommand(CartridgeAgentConstants.START_SERVERS_SH);
-            CommandUtils.executeCommand(command);
         }
-        catch (Exception e) {
-            log.error("Could not execute start servers extension", e);
+        return null;
+    }
+
+    public static boolean isRelevantMemberEvent(String serviceName, String clusterId, String lbClusterId) {
+        String clusterIdInPayload = CartridgeAgentConfiguration.getInstance().getClusterId();
+        if (clusterIdInPayload == null) {
+            return false;
+        }
+        Topology topology = TopologyManager.getTopology();
+        if (topology == null || !topology.isInitialized()) {
+            return false;
+        }
+
+        if (clusterIdInPayload.equals(clusterId)) {
+            return true;
         }
+
+        if (clusterIdInPayload.equals(lbClusterId)) {
+            return true;
+        }
+
+        String serviceGroupInPayload = CartridgeAgentConfiguration.getInstance().getServiceGroup();
+        if (serviceGroupInPayload != null) {
+            Properties serviceProperties = topology.getService(serviceName).getProperties();
+            if (serviceProperties == null) {
+                return false;
+            }
+            String memberServiceGroup = serviceProperties.getProperty(CartridgeAgentConstants.SERVICE_GROUP_TOPOLOGY_KEY);
+            if (memberServiceGroup != null && memberServiceGroup.equals(serviceGroupInPayload)) {            	
+            	if(serviceName.equals(CartridgeAgentConfiguration.getInstance().getServiceName())) {
+            		if (log.isDebugEnabled()) {
+            			log.debug("Service names are same");
+            		}
+            		return true;
+            	}else if(CartridgeAgentConfiguration.getInstance().getServiceName().equals("apistore") && "publisher".equals(serviceName)) {
+            		if (log.isDebugEnabled()) {
+            			log.debug("Service name in payload is [store]. Serivce name in event is ["+serviceName+"] ");
+            		}
+            		return true;
+            	}else if(CartridgeAgentConfiguration.getInstance().getServiceName().equals("publisher") && "apistore".equals(serviceName)) {
+            		if (log.isDebugEnabled()) {
+            			log.debug("Service name in payload is [publisher]. Serivce name in event is ["+serviceName+"] ");
+            		}
+            		return true;
+            	}else if(CartridgeAgentConstants.DEPLOYMENT_WORKER.equals(CartridgeAgentConfiguration.getInstance().getDeployment()) &&
+            			serviceName.equals(CartridgeAgentConfiguration.getInstance().getManagerServiceName())) {
+            		if (log.isDebugEnabled()) {
+            			log.debug("Deployment is worker. Worker's manager service name & service name in event are same");
+            		}
+            		return true;
+            	}else if (CartridgeAgentConstants.DEPLOYMENT_MANAGER.equals(CartridgeAgentConfiguration.getInstance().getDeployment()) &&
+            			serviceName.equals(CartridgeAgentConfiguration.getInstance().getWorkerServiceName())) {
+            		if (log.isDebugEnabled()) {
+            			log.debug("Deployment is manager. Manager's worker service name & service name in event are same");
+            		}
+            		return true;
+            	}
+            }
+        }
+                
+        return false;
     }
 
-    public static void executeCleanupExtension() {
+    private static Map<String, String> cleanProcessParameters(Map<String, String> envParameters) {
+        Iterator<Map.Entry<String, String>> iter = envParameters.entrySet().iterator();
+        while (iter.hasNext()) {
+            Map.Entry<String, String> entry = iter.next();
+            if (entry.getValue() == null) {
+                iter.remove();
+            }
+        }
+        return envParameters;
+    }
+
+    public static void executeStartServersExtension(Map<String, String> envParameters) {
         try {
-            if(log.isDebugEnabled()) {
+            if (log.isDebugEnabled()) {
                 log.debug("Executing start servers extension");
             }
-            String command = prepareCommand(CartridgeAgentConstants.CLEAN_UP_SH);
-            CommandUtils.executeCommand(command);
+            String script = System.getProperty(CartridgeAgentConstants.START_SERVERS_SCRIPT);
+            String command = prepareCommand(script);
+            addPayloadParameters(envParameters);
+            cleanProcessParameters(envParameters);
+            String output = CommandUtils.executeCommand(command, envParameters);
+            if (log.isDebugEnabled()) {
+                log.debug("Start server script returned:" + output);
+            }
+        } catch (Exception e) {
+            if (log.isErrorEnabled()) {
+                log.error("Could not execute start servers extension", e);
+            }
         }
-        catch (Exception e) {
-            log.error("Could not execute start servers extension", e);
+    }
+
+    public static void executeCleanupExtension() {
+        try {
+            if (log.isDebugEnabled()) {
+                log.debug("Executing cleanup extension");
+            }
+            String script = System.getProperty(CartridgeAgentConstants.CLEAN_UP_SCRIPT);
+            String command = prepareCommand(script);
+            String output = CommandUtils.executeCommand(command);
+            if (log.isDebugEnabled()) {
+                log.debug("Cleanup script returned:" + output);
+            }
+        } catch (Exception e) {
+            if (log.isErrorEnabled()) {
+                log.error("Could not execute cleanup extension", e);
+            }
         }
     }
 
-    public static void executeInstanceStartedExtension() {
+    public static void executeInstanceStartedExtension(Map<String, String> envParameters) {
         try {
-            if(log.isDebugEnabled()) {
+            if (log.isDebugEnabled()) {
                 log.debug("Executing instance started extension");
             }
-            String command = prepareCommand(CartridgeAgentConstants.INSTANCE_STARTED_SH);
-            CommandUtils.executeCommand(command);
-        }
-        catch (Exception e) {
-            log.error("Could not execute instance started extension", e);
+            String script = System.getProperty(CartridgeAgentConstants.INSTANCE_STARTED_SCRIPT);
+            String command = prepareCommand(script);
+            addPayloadParameters(envParameters);
+            cleanProcessParameters(envParameters);
+            String output = CommandUtils.executeCommand(command, envParameters);
+            if (log.isDebugEnabled()) {
+                log.debug("Instance started script returned:" + output);
+            }
+        } catch (Exception e) {
+            if (log.isErrorEnabled()) {
+                log.error("Could not execute instance started extension", e);
+            }
         }
     }
 
     public static void executeInstanceActivatedExtension() {
         try {
-            if(log.isDebugEnabled()) {
+            if (log.isDebugEnabled()) {
                 log.debug("Executing instance activated extension");
             }
-            String command = prepareCommand(CartridgeAgentConstants.INSTANCE_ACTIVATED_SH);
-            CommandUtils.executeCommand(command);
-        }
-        catch (Exception e) {
-            log.error("Could not execute instance activated extension", e);
+            String script = System.getProperty(CartridgeAgentConstants.INSTANCE_ACTIVATED_SCRIPT);
+            String command = prepareCommand(script);
+            String output = CommandUtils.executeCommand(command);
+            if (log.isDebugEnabled()) {
+                log.debug("Instance activated script returned:" + output);
+            }
+        } catch (Exception e) {
+            if (log.isErrorEnabled()) {
+                log.error("Could not execute instance activated extension", e);
+            }
         }
     }
 
-    public static void executeArtifactsUpdatedExtension() {
+    public static void executeArtifactsUpdatedExtension(Map<String, String> envParameters) {
         try {
-            if(log.isDebugEnabled()) {
+            if (log.isDebugEnabled()) {
                 log.debug("Executing artifacts updated extension");
             }
-            String command = prepareCommand(CartridgeAgentConstants.ARTIFACTS_UPDATED_SH);
-            CommandUtils.executeCommand(command);
+            String script = System.getProperty(CartridgeAgentConstants.ARTIFACTS_UPDATED_SCRIPT);
+            String command = prepareCommand(script);
+            addPayloadParameters(envParameters);
+            cleanProcessParameters(envParameters);
+            String output = CommandUtils.executeCommand(command, envParameters);
+            if (log.isDebugEnabled()) {
+                log.debug("Artifacts updated script returned:" + output);
+            }
+        } catch (Exception e) {
+            if (log.isErrorEnabled()) {
+                log.error("Could not execute artifacts updated extension", e);
+            }
         }
-        catch (Exception e) {
-            log.error("Could not execute artifacts updated extension", e);
+    }
+
+    public static void executeCopyArtifactsExtension(String source, String destination) {
+        try {
+            if (log.isDebugEnabled()) {
+                log.debug("Executing artifacts copy extension");
+            }
+            String command = prepareCommand(System.getProperty(CartridgeAgentConstants.ARTIFACTS_COPY_SCRIPT));
+            CommandUtils.executeCommand(command + " " + source + " " + destination);
+        } catch (Exception e) {
+            log.error("Could not execute artifacts copy extension", e);
         }
     }
 
@@ -119,45 +320,228 @@ public class ExtensionUtils {
      */
     public static void executeVolumeMountExtension(String persistenceMappingsPayload) {
         try {
-            if(log.isDebugEnabled()) {
-                    log.debug(String.format("Executing volume mounting extension: [payload] %s", persistenceMappingsPayload));
+            if (log.isDebugEnabled()) {
+                log.debug(String.format("Executing volume mounting extension: [payload] %s", persistenceMappingsPayload));
             }
-            String command = prepareCommand(CartridgeAgentConstants.MOUNT_VOLUMES_SH);
+            String script = System.getProperty(CartridgeAgentConstants.MOUNT_VOLUMES_SCRIPT);
+            String command = prepareCommand(script);
             //String payloadPath = System.getProperty(CartridgeAgentConstants.PARAM_FILE_PATH);
             // add payload file path as argument so inside the script we can source
             // it  to get the env variables set by the startup script
-            CommandUtils.executeCommand(command + " " + persistenceMappingsPayload);
-        }
-        catch (Exception e) {
+            String output = CommandUtils.executeCommand(command + " " + persistenceMappingsPayload);
+            if (log.isDebugEnabled()) {
+                log.debug("Volume mount script returned:" + output);
+            }
+        } catch (Exception e) {
+            if (log.isErrorEnabled()) {
                 log.error("Could not execute volume mounting extension", e);
+            }
         }
     }
 
-    public static void executeSubscriptionDomainAddedExtension(int tenantId, String tenantDomain, String domainName, String applicationContext) {
+    public static void executeMemberActivatedExtension(Map<String, String> envParameters) {
         try {
-            if(log.isDebugEnabled()) {
-                log.debug(String.format("Executing subscription domain added extension: [tenant-id] %d [tenant-domain] %s " +
-                        "[domain-name] %s [application-context] %s", tenantId, tenantDomain, domainName, applicationContext));
+            if (log.isDebugEnabled()) {
+                log.debug("Executing member activated extension");
+            }
+            String script = System.getProperty(CartridgeAgentConstants.MEMBER_ACTIVATED_SCRIPT);
+            String command = prepareCommand(script);
+            addPayloadParameters(envParameters);
+            cleanProcessParameters(envParameters);
+            String output = CommandUtils.executeCommand(command, envParameters);
+            if (log.isDebugEnabled()) {
+                log.debug("Member activated script returned:" + output);
+            }
+        } catch (Exception e) {
+            if (log.isErrorEnabled()) {
+                log.error("Could not execute member activated extension", e);
             }
-            String command = prepareCommand(CartridgeAgentConstants.SUBSCRIPTION_DOMAIN_ADDED_SH + " " + domainName + " " + applicationContext);
-            CommandUtils.executeCommand(command);
         }
-        catch (Exception e) {
-            log.error("Could not execute subscription domain added extension", e);
+    }
+
+    public static void executeMemberTerminatedExtension(Map<String, String> envParameters) {
+        try {
+            if (log.isDebugEnabled()) {
+                log.debug("Executing member terminated extension");
+            }
+            String script = System.getProperty(CartridgeAgentConstants.MEMBER_TERMINATED_SCRIPT);
+            String command = prepareCommand(script);
+            addPayloadParameters(envParameters);
+            cleanProcessParameters(envParameters);
+            String output = CommandUtils.executeCommand(command, envParameters);
+            if (log.isDebugEnabled()) {
+                log.debug("Member terminated script returned:" + output);
+            }
+        } catch (Exception e) {
+            if (log.isErrorEnabled()) {
+                log.error("Could not execute member terminated extension", e);
+            }
+        }
+    }
+
+    public static void executeMemberStartedExtension(Map<String, String> envParameters) {
+        try {
+            if (log.isDebugEnabled()) {
+                log.debug("Executing member started extension");
+            }
+            String script = System.getProperty(CartridgeAgentConstants.MEMBER_STARTED_SCRIPT);
+            String command = prepareCommand(script);
+            addPayloadParameters(envParameters);
+            cleanProcessParameters(envParameters);
+            String output = CommandUtils.executeCommand(command, envParameters);
+            if (log.isDebugEnabled()) {
+                log.debug("Member started script returned:" + output);
+            }
+        } catch (Exception e) {
+            if (log.isErrorEnabled()) {
+                log.error("Could not execute member started extension", e);
+            }
+        }
+    }
+
+    public static void executeMemberSuspendedExtension(Map<String, String> envParameters) {
+        try {
+            if (log.isDebugEnabled()) {
+                log.debug("Executing member suspended extension");
+            }
+            String script = System.getProperty(CartridgeAgentConstants.MEMBER_SUSPENDED_SCRIPT);
+            String command = prepareCommand(script);
+            addPayloadParameters(envParameters);
+            cleanProcessParameters(envParameters);
+            String output = CommandUtils.executeCommand(command, envParameters);
+            if (log.isDebugEnabled()) {
+                log.debug("Member suspended script returned:" + output);
+            }
+        } catch (Exception e) {
+            if (log.isErrorEnabled()) {
+                log.error("Could not execute member suspended extension", e);
+            }
+        }
+    }
+
+    public static void executeCompleteTopologyExtension(Map<String, String> envParameters) {
+        try {
+            if (log.isDebugEnabled()) {
+                log.debug("Executing complete topology extension");
+            }
+            String script = System.getProperty(CartridgeAgentConstants.COMPLETE_TOPOLOGY_SCRIPT);
+            String command = prepareCommand(script);
+            addPayloadParameters(envParameters);
+            cleanProcessParameters(envParameters);
+            String output = CommandUtils.executeCommand(command, envParameters);
+            if (log.isDebugEnabled()) {
+                log.debug("Complete topology script returned:" + output);
+            }
+        } catch (Exception e) {
+            if (log.isErrorEnabled()) {
+                log.error("Could not execute complete topology extension", e);
+            }
+        }
+    }
+
+    public static void executeCompleteTenantExtension(Map<String, String> envParameters) {
+        try {
+            if (log.isDebugEnabled()) {
+                log.debug("Executing complete tenant extension");
+            }
+            String script = System.getProperty(CartridgeAgentConstants.COMPLETE_TENANT_SCRIPT);
+            String command = prepareCommand(script);
+            addPayloadParameters(envParameters);
+            cleanProcessParameters(envParameters);
+            String output = CommandUtils.executeCommand(command, envParameters);
+            if (log.isDebugEnabled()) {
+                log.debug("Complete tenant script returned:" + output);
+            }
+        } catch (Exception e) {
+            if (log.isErrorEnabled()) {
+                log.error("Could not execute complete tenant extension", e);
+            }
         }
     }
 
-    public static void executeSubscriptionDomainRemovedExtension(int tenantId, String tenantDomain, String domainName) {
+    public static void executeSubscriptionDomainAddedExtension(Map<String, String> envParameters) {
         try {
-            if(log.isDebugEnabled()) {
-                log.debug(String.format("Executing subscription domain removed extension: [tenant-id] %d [tenant-domain] %s " +
-                        "[domain-name] %s [application-context] %s", tenantId, tenantDomain, domainName));
+            if (log.isDebugEnabled()) {
+                log.debug("Executing subscription domain added extension");
+            }
+            String script = System.getProperty(CartridgeAgentConstants.SUBSCRIPTION_DOMAIN_ADDED_SCRIPT);
+            String command = prepareCommand(script);
+            addPayloadParameters(envParameters);
+            cleanProcessParameters(envParameters);
+            String output = CommandUtils.executeCommand(command, envParameters);
+            if (log.isDebugEnabled()) {
+                log.debug("Subscription domain added script returned:" + output);
             }
-            String command = prepareCommand(CartridgeAgentConstants.SUBSCRIPTION_DOMAIN_REMOVED_SH + " " + domainName);
-            CommandUtils.executeCommand(command);
+        } catch (Exception e) {
+            if (log.isErrorEnabled()) {
+                log.error("Could not execute subscription domain added extension", e);
+            }
+        }
+    }
+
+    public static void executeSubscriptionDomainRemovedExtension(Map<String, String> envParameters) {
+        try {
+            if (log.isDebugEnabled()) {
+                log.debug("Executing subscription domain removed extension");
+            }
+            String script = System.getProperty(CartridgeAgentConstants.SUBSCRIPTION_DOMAIN_REMOVED_SCRIPT);
+            String command = prepareCommand(script);
+            addPayloadParameters(envParameters);
+            cleanProcessParameters(envParameters);
+            String output = CommandUtils.executeCommand(command, envParameters);
+            if (log.isDebugEnabled()) {
+                log.debug("Subscription domain removed script returned:" + output);
+            }
+        } catch (Exception e) {
+            if (log.isErrorEnabled()) {
+                log.error("Could not execute subscription domain removed extension", e);
+            }
+
         }
-        catch (Exception e) {
-            log.error("Could not execute subscription domain removed extension", e);
+    }
+
+    public static boolean isTopologyInitialized() {
+        TopologyManager.acquireReadLock();
+        boolean active = TopologyManager.getTopology().isInitialized();
+        TopologyManager.releaseReadLock();
+        return active;
+    }
+
+    public static void waitForCompleteTopology() {
+        while (!isTopologyInitialized()) {
+            if (log.isInfoEnabled()) {
+                log.info("Waiting for complete topology event...");
+            }
+            try {
+                Thread.sleep(5000);
+            } catch (InterruptedException e) {
+            }
+        }
+    }
+
+    public static boolean checkTopologyConsistency(String serviceName, String clusterId, String memberId){
+        Topology topology = TopologyManager.getTopology();
+        Service service = topology.getService(serviceName);
+        if (service == null) {
+            if (log.isErrorEnabled()) {
+                log.error(String.format("Service not found in topology [service] %s", serviceName));
+            }
+            return false;
+        }
+        Cluster cluster = service.getCluster(clusterId);
+        if (cluster == null) {
+            if (log.isErrorEnabled()) {
+                log.error(String.format("Cluster id not found in topology [cluster] %s", clusterId));
+            }
+            return false;
+        }
+        Member activatedMember = cluster.getMember(memberId);
+        if (activatedMember == null) {
+            if (log.isErrorEnabled()) {
+                log.error(String.format("Member id not found in topology [member] %s", memberId));
+            }
+            return false;
         }
+        return true;
     }
 }
diff --git a/components/org.apache.stratos.cartridge.mgt.ui/pom.xml b/components/org.apache.stratos.cartridge.mgt.ui/pom.xml
index c038759..f89e35b 100644
--- a/components/org.apache.stratos.cartridge.mgt.ui/pom.xml
+++ b/components/org.apache.stratos.cartridge.mgt.ui/pom.xml
@@ -23,7 +23,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
 	<modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.cli/pom.xml b/components/org.apache.stratos.cli/pom.xml
index 1643665..a6466aa 100644
--- a/components/org.apache.stratos.cli/pom.xml
+++ b/components/org.apache.stratos.cli/pom.xml
@@ -22,7 +22,7 @@
 	<parent>
 		<groupId>org.apache.stratos</groupId>
 		<artifactId>stratos-components-parent</artifactId>
-		<version>4.0.0-SNAPSHOT</version>
+		<version>4.0.0</version>
 	</parent>
 
 	<modelVersion>4.0.0</modelVersion>
@@ -34,7 +34,6 @@
 	
 	<properties>
 		<slf4j.version>1.7.6</slf4j.version>
-		<wiremock.version>1.46</wiremock.version>
 	</properties>
 
 	<dependencies>
@@ -120,7 +119,7 @@
 					<descriptors>
 						<descriptor>src/main/assembly/src.xml</descriptor>
 					</descriptors>
-					<appendAssemblyId>false</appendAssemblyId>
+                    <appendAssemblyId>false</appendAssemblyId>
 				</configuration>
 				<executions>
 					<execution>
@@ -132,152 +131,7 @@
 					</execution>
 				</executions>
 			</plugin>
-			<plugin>  
-				<groupId>org.apache.maven.plugins</groupId> 
-				<artifactId>maven-dependency-plugin</artifactId> 
-				<version>2.7</version> 
-				<executions>
-					<execution> 
-						<id>copy</id> 
-						<phase>pre-integration-test</phase>
-						<goals> 
-							<goal>copy</goal>
-						</goals> 
-						<configuration> 
-							<artifactItems>
-								<!-- Copy the CLI --> 
-								<artifactItem> 
-									<groupId>${project.groupId}</groupId> 
-									<artifactId>${project.artifactId}</artifactId> 
-									<version>${project.version}</version> 
-									<type>jar</type> 
-									<overWrite>true</overWrite> 
-									<outputDirectory>${maven.output.build.path}</outputDirectory> 
-								</artifactItem> 
-							</artifactItems> 
-							<artifactItems> 
-								<artifactItem> 
-									<groupId>com.github.tomakehurst</groupId> 
-									<artifactId>wiremock</artifactId> 
-									<version>${wiremock.version}</version> 
-									<classifier>standalone</classifier> 
-									<type>jar</type> 
-									<overWrite>true</overWrite> 
-									<outputDirectory>${maven.output.build.path}</outputDirectory> 
-								</artifactItem> 
-							</artifactItems> 
-						</configuration> 
-					</execution> 
-				</executions> 
-			</plugin> 
 		</plugins>
 	</build>
 
-	<profiles>
-		<!-- Integration testing the CLI -->
-		<profile>
-			<id>cli-test</id>
-			<build>
-				<plugins>
-					<plugin>
-						<artifactId>maven-antrun-plugin</artifactId>
-						<version>1.7</version>
-						<executions>
-							<execution>
-								<phase>pre-integration-test</phase>
-								<configuration>
-									<tasks>
-										<mkdir dir="${project.build.directory}/downloads/"/>
-										<get src="https://pypi.python.org/packages/source/p/pexpect/pexpect-3.2.tar.gz" 
-											dest="${project.build.directory}/downloads/"
-											verbose="true"/>
-										<gunzip src="${project.build.directory}/downloads/pexpect-3.2.tar.gz" 
-											dest="${project.build.directory}/downloads/pexpect-3.2.tar"/>
-										<untar src="${project.build.directory}/downloads/pexpect-3.2.tar" 
-											dest="${project.build.directory}/"/>
-									</tasks>
-								</configuration>
-								<goals>
-									<goal>run</goal>
- 								</goals>
-							</execution>
-						</executions>
-					</plugin>
-					<plugin>
-						<groupId>org.codehaus.mojo</groupId>
-						<artifactId>exec-maven-plugin</artifactId>
-						<version>1.3</version>
-						<executions>
-							<execution>
-								<configuration>
-									<executable>python</executable>
-									<workingDirectory>src/test/python</workingDirectory>
-									<!-- tests common to both interactive and non-interactive use cases -->
-									<arguments>
-										<argument>test_common.py</argument>
-									</arguments>
-									<environmentVariables>
-										<PYTHONPATH>../../main/python:${project.build.directory}/pexpect-3.2:$PYTHONPATH</PYTHONPATH>
-										<CLI_JAR>${project.build.directory}/${project.build.finalName}.jar</CLI_JAR>
-										<WIREMOCK_JAR>${project.build.directory}/dependency/wiremock-${wiremock.version}-standalone.jar</WIREMOCK_JAR>
-										<WIREMOCK_HTTP_PORT>8080</WIREMOCK_HTTP_PORT>
-										<WIREMOCK_HTTPS_PORT>9443</WIREMOCK_HTTPS_PORT>
-									</environmentVariables>
-								</configuration>
-								<id>python-test-common</id>
-								<phase>integration-test</phase>
-								<goals>
-									<goal>exec</goal>
-								</goals>
-							</execution>
-							<execution>
-								<configuration>
-									<executable>python</executable>
-									<workingDirectory>src/test/python</workingDirectory>
-									<!-- interactive use cases -->
-									<arguments>
-										<argument>test_interactive.py</argument>
-									</arguments>
-									<environmentVariables>
-										<PYTHONPATH>../../main/python:${project.build.directory}/pexpect-3.2:$PYTHONPATH</PYTHONPATH>
-										<CLI_JAR>${project.build.directory}/${project.build.finalName}.jar</CLI_JAR>
-										<WIREMOCK_JAR>${project.build.directory}/dependency/wiremock-${wiremock.version}-standalone.jar</WIREMOCK_JAR>
-										<WIREMOCK_HTTP_PORT>8080</WIREMOCK_HTTP_PORT>
-										<WIREMOCK_HTTPS_PORT>9443</WIREMOCK_HTTPS_PORT>
-									</environmentVariables>
-								</configuration>
-								<id>python-test-interactive</id>
-								<phase>integration-test</phase>
-								<goals>
-									<goal>exec</goal>
-								</goals>
-							</execution>
-							<execution>
-								<configuration>
-									<executable>python</executable>
-									<workingDirectory>src/test/python</workingDirectory>
-									<!-- non-interactive use cases -->
-									<arguments>
-										<argument>test_noninteractive.py</argument>
-									</arguments>
-									<environmentVariables>
-										<PYTHONPATH>../../main/python:${project.build.directory}/pexpect-3.2:$PYTHONPATH</PYTHONPATH>
-										<CLI_JAR>${project.build.directory}/${project.build.finalName}.jar</CLI_JAR>
-										<WIREMOCK_JAR>${project.build.directory}/dependency/wiremock-${wiremock.version}-standalone.jar</WIREMOCK_JAR>
-										<WIREMOCK_HTTP_PORT>8080</WIREMOCK_HTTP_PORT>
-										<WIREMOCK_HTTPS_PORT>9443</WIREMOCK_HTTPS_PORT>
-									</environmentVariables>
-								</configuration>
-								<id>python-test-noninteractive</id>
-								<phase>integration-test</phase>
-								<goals>
-									<goal>exec</goal>
-								</goals>
-							</execution>
-						</executions>
-					</plugin>
-				</plugins>
-			</build>
-		</profile>
-	</profiles>
 </project>
diff --git a/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/RestCommandLineService.java b/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/RestCommandLineService.java
index 8299d0d..857d1a1 100644
--- a/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/RestCommandLineService.java
+++ b/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/RestCommandLineService.java
@@ -94,6 +94,8 @@ public class RestCommandLineService {
     private final String deactivateTenantRestEndPoint = "/stratos/admin/tenant/deactivate";
     private final String activateTenantRestEndPoint = "/stratos/admin/tenant/activate";
     private final String listAllTenantRestEndPoint = "/stratos/admin/tenant/list";
+    private final String getListAvailableCartridgeInfoRestEndPoint = "/stratos/admin/cartridge/available/info";
+
 
     private static class SingletonHolder {
 		private final static RestCommandLineService INSTANCE = new RestCommandLineService();
@@ -210,6 +212,84 @@ public class RestCommandLineService {
         this.restClient = restClient;
     }
 
+    public Cartridge listCartridge(String cartridgeType) throws CommandException{
+        DefaultHttpClient httpClient = new DefaultHttpClient();
+        HttpResponse response = null;
+
+        try {
+            String endpoint = restClient.getBaseURL() + getListAvailableCartridgeInfoRestEndPoint + "/" + cartridgeType;
+            response = restClient.doGet(httpClient, endpoint);
+
+            String responseCode = "" + response.getStatusLine().getStatusCode();
+            String resultString = getHttpResponseString(response);
+            if (resultString == null) {
+                return null;
+            }
+
+            GsonBuilder gsonBuilder = new GsonBuilder();
+            Gson gson = gsonBuilder.create();
+
+            if (!responseCode.equals(CliConstants.RESPONSE_OK)) {
+                ExceptionMapper exception = gson.fromJson(resultString, ExceptionMapper.class);
+                System.out.println(exception);
+                return null;
+            }
+
+            String cartridgeString = resultString.substring(13, resultString.length() -1);
+            Cartridge cartridge = gson.fromJson(cartridgeString, Cartridge.class);
+            return cartridge;
+
+        } catch (Exception e) {
+            handleException("Exception in listing cartridge info", e);
+            return null;
+        } finally {
+            httpClient.getConnectionManager().shutdown();
+        }
+    }
+
+    public ArrayList<Cartridge> listCartridges(String serviceGroup) throws CommandException{
+        DefaultHttpClient httpClient = new DefaultHttpClient();
+        HttpResponse response = null;
+
+        try {
+            response = restClient.doGet(httpClient, restClient.getBaseURL() + listAvailableCartridgesRestEndpoint);
+
+            String responseCode = "" + response.getStatusLine().getStatusCode();
+            String resultString = getHttpResponseString(response);
+
+            if (resultString == null) {
+                return null;
+            }
+
+            GsonBuilder gsonBuilder = new GsonBuilder();
+            Gson gson = gsonBuilder.create();
+
+            if (!responseCode.equals(CliConstants.RESPONSE_OK)) {
+                ExceptionMapper exception = gson.fromJson(resultString, ExceptionMapper.class);
+                System.out.println(exception);
+                return null;
+            }
+
+            CartridgeList cartridgeList = gson.fromJson(resultString, CartridgeList.class);
+
+            ArrayList<Cartridge> cartridgesInServiceGroup = new ArrayList<Cartridge>();
+
+            for (int i = 0; i < cartridgeList.getCartridge().size(); i++) {
+                if (serviceGroup.equals(cartridgeList.getCartridge().get(i).getServiceGroup())) {
+                    cartridgesInServiceGroup.add(cartridgeList.getCartridge().get(i));
+                }
+            }
+
+            return cartridgesInServiceGroup;
+
+        } catch (Exception e) {
+            handleException("Exception in listing cartridge info", e);
+            return null;
+        } finally {
+            httpClient.getConnectionManager().shutdown();
+        }
+    }
+
     // List currently available multi tenant and single tenant cartridges
     public void listAvailableCartridges() throws CommandException {
         DefaultHttpClient httpClient = new DefaultHttpClient();
@@ -244,7 +324,14 @@ public class RestCommandLineService {
             ArrayList<Cartridge> multiTenetCartridge = new ArrayList<Cartridge>();
             ArrayList<Cartridge> singleTentCartridge = new ArrayList<Cartridge>();
 
+            HashSet<String> existingServiceGroups = new HashSet<String>();
+
             for (Cartridge cartridge : cartridgeList.getCartridge()) {
+                if(existingServiceGroups.contains(cartridge.getServiceGroup())){
+                    continue;
+                }else{
+                    existingServiceGroups.add(cartridge.getServiceGroup());
+                }
                 if (cartridge.isMultiTenant()) {
                     multiTenetCartridge.add(cartridge);
                 }
@@ -361,7 +448,6 @@ public class RestCommandLineService {
 
             String responseCode = "" + response.getStatusLine().getStatusCode();
             String resultString = getHttpResponseString(response);
-            
             GsonBuilder gsonBuilder = new GsonBuilder();
             Gson gson = gsonBuilder.create();
             
@@ -489,7 +575,7 @@ public class RestCommandLineService {
             System.out.println("\tTenancy Model	: "	+ tenancy);
             System.out.println("\tAlias : "	+ cartridge.getCartridgeAlias());
             System.out.println("\tStatus : "	+ cartridge.getStatus());
-            String instanceCount  = cartridge.isMultiTenant() ? "N/A" : String.valueOf(cartridge.getActiveInstances());
+            String instanceCount  = String.valueOf(cartridge.getActiveInstances());
             System.out.println("\tRunning Instances	: " + instanceCount);
             System.out.println("\tAccess URL(s) : " + getAccessURLs(cartridge));
 			if (cartridge.getRepoURL() != null) {
@@ -534,7 +620,7 @@ public class RestCommandLineService {
             // Invoke  cluster/{clusterId}
             for (String clusterId : lbClusterIdSet) {
 				HttpResponse responseCluster = restClient.doGet(httpClient, restClient.getBaseURL()
-						+ listClusterRestEndpoint + "clusterId/" + clusterId);
+						+ listClusterRestEndpoint + "lb");
 
                 String responseCode = "" + responseCluster.getStatusLine().getStatusCode();
                 String resultStringCluster = getHttpResponseString(responseCluster);
@@ -548,8 +634,8 @@ public class RestCommandLineService {
                     return null;
                 }
 
-                Cluster cluster = getClusterObjectFromString(resultStringCluster);
-
+                ArrayList<Cluster> clusterList = getClusterListObjectFromString(resultStringCluster);
+                Cluster cluster = clusterList.get(0);
                 if (cluster == null) {
                     System.out.println("Subscribe cartridge list is null");
                     return null;
@@ -683,6 +769,14 @@ public class RestCommandLineService {
 		Cluster cluster = gson.fromJson(resultString, Cluster.class);
 		return cluster;
 	}
+	
+	private ArrayList<Cluster> getClusterListObjectFromString(String resultString) {
+		GsonBuilder gsonBuilder = new GsonBuilder();
+		Gson gson = gsonBuilder.create();
+
+		ClusterList clusterlist = gson.fromJson(resultString, ClusterList.class);
+		return clusterlist.getCluster();
+	}
 
     private void printLBs(String resultString) {
     	
@@ -719,35 +813,107 @@ public class RestCommandLineService {
 		}
 	}
 
+    private String getAsPolicyFromServiceDefinition(String cartridgeType) throws CommandException{
+        DefaultHttpClient httpClient = new DefaultHttpClient();
+        try {
+            HttpResponse response = restClient.doGet(httpClient, restClient.getBaseURL()
+                    + listDeployServicesRestEndPoint + "/" + cartridgeType);
+
+            String responseCode = "" + response.getStatusLine().getStatusCode();
+
+            GsonBuilder gsonBuilder = new GsonBuilder();
+            Gson gson = gsonBuilder.create();
+
+            if ( ! responseCode.equals(CliConstants.RESPONSE_OK)) {
+                String resultString = getHttpResponseString(response);
+                ExceptionMapper exception = gson.fromJson(resultString, ExceptionMapper.class);
+                System.out.println(exception);
+                return null;
+            }
+
+            String resultString = getHttpResponseString(response);
+            if (resultString == null) {
+                System.out.println("Response content is empty");
+                return null;
+            }
+
+            String  serviceDefinitionString =  resultString.substring(25, resultString.length() -1);
+            ServiceDefinitionBean serviceDefinition= gson.fromJson(serviceDefinitionString, ServiceDefinitionBean.class);
+            if (serviceDefinition == null) {
+                System.out.println("Deploy service list is empty");
+                return null;
+            }
+
+            return serviceDefinition.getAutoscalingPolicyName();
+
+        } catch (Exception e) {
+            handleException("Exception in listing deploy services", e);
+            return null;
+        } finally {
+            httpClient.getConnectionManager().shutdown();
+        }
+    }
+
+    private String getDeploymentPolicyFromServiceDefinition(String cartridgeType) throws CommandException{
+        DefaultHttpClient httpClient = new DefaultHttpClient();
+        try {
+            HttpResponse response = restClient.doGet(httpClient, restClient.getBaseURL()
+                    + listDeployServicesRestEndPoint + "/" + cartridgeType);
+
+            String responseCode = "" + response.getStatusLine().getStatusCode();
+
+            GsonBuilder gsonBuilder = new GsonBuilder();
+            Gson gson = gsonBuilder.create();
+
+            if ( ! responseCode.equals(CliConstants.RESPONSE_OK)) {
+                String resultString = getHttpResponseString(response);
+                ExceptionMapper exception = gson.fromJson(resultString, ExceptionMapper.class);
+                System.out.println(exception);
+                return null;
+            }
+
+            String resultString = getHttpResponseString(response);
+            if (resultString == null) {
+                System.out.println("Response content is empty");
+                return null;
+            }
+
+            String  serviceDefinitionString =  resultString.substring(25, resultString.length() -1);
+            ServiceDefinitionBean serviceDefinition= gson.fromJson(serviceDefinitionString, ServiceDefinitionBean.class);
+            if (serviceDefinition == null) {
+                System.out.println("Deploy service list is empty");
+                return null;
+            }
+
+            return serviceDefinition.getDeploymentPolicyName();
+
+        } catch (Exception e) {
+            handleException("Exception in listing deploy services", e);
+            return null;
+        } finally {
+            httpClient.getConnectionManager().shutdown();
+        }
+    }
+
 	// This method does the cartridge subscription
     public void subscribe(String cartridgeType, String alias, String externalRepoURL, boolean privateRepo, String username,
                           String password,String asPolicy,
                           String depPolicy, String size, boolean remoOnTermination, boolean persistanceMapping,
-                          boolean enableCommits, String volumeId)
+                          boolean enableCommits)
             throws CommandException {
         DefaultHttpClient httpClient = new DefaultHttpClient();
 
         CartridgeInfoBean cartridgeInfoBean = new CartridgeInfoBean();
-        cartridgeInfoBean.setCartridgeType(null);
-        cartridgeInfoBean.setAlias(null);
-        cartridgeInfoBean.setRepoURL(null);
-        cartridgeInfoBean.setPrivateRepo(false);
-        cartridgeInfoBean.setRepoUsername(null);
-        cartridgeInfoBean.setRepoPassword(null);
-        cartridgeInfoBean.setAutoscalePolicy(null);
-        cartridgeInfoBean.setDeploymentPolicy(null);
-        cartridgeInfoBean.setSize(size);
-
-        cartridgeInfoBean.setRemoveOnTermination(remoOnTermination);
-        cartridgeInfoBean.setPersistanceRequired(persistanceMapping);
-        cartridgeInfoBean.setCommitsEnabled(enableCommits);
-
         GsonBuilder gsonBuilder = new GsonBuilder();
         Gson gson = gsonBuilder.create();
 
-        String jsonSubscribeString = gson.toJson(cartridgeInfoBean, CartridgeInfoBean.class);
-
         try {
+            Cartridge cartridge = listCartridge(cartridgeType);
+            if (cartridge.isMultiTenant()) {
+                asPolicy = getAsPolicyFromServiceDefinition(cartridgeType);
+                depPolicy = getDeploymentPolicyFromServiceDefinition(cartridgeType);
+            }
+
             cartridgeInfoBean.setCartridgeType(cartridgeType);
             cartridgeInfoBean.setAlias(alias);
             cartridgeInfoBean.setRepoURL(externalRepoURL);
@@ -760,9 +926,8 @@ public class RestCommandLineService {
             cartridgeInfoBean.setRemoveOnTermination(remoOnTermination);
             cartridgeInfoBean.setPersistanceRequired(persistanceMapping);
             cartridgeInfoBean.setCommitsEnabled(enableCommits);
-            cartridgeInfoBean.setVolumeId(volumeId);
             
-            jsonSubscribeString = gson.toJson(cartridgeInfoBean, CartridgeInfoBean.class);
+            String jsonSubscribeString = gson.toJson(cartridgeInfoBean, CartridgeInfoBean.class);
 
             HttpResponse response = restClient.doPost(httpClient, restClient.getBaseURL() + subscribCartridgeRestEndpoint,
                     jsonSubscribeString);
@@ -783,7 +948,7 @@ public class RestCommandLineService {
                 return;
             }
 
-            String  subscriptionOutputJSON = subscriptionOutput.substring(20, subscriptionOutput.length() -1);
+            String  subscriptionOutputJSON=  subscriptionOutput.substring(20, subscriptionOutput.length() -1);
             SubscriptionInfo subcriptionInfo = gson.fromJson(subscriptionOutputJSON, SubscriptionInfo.class);
 
             System.out.format("You have successfully subscribed to %s cartridge with alias %s.%n", cartridgeType, alias);
@@ -1231,14 +1396,12 @@ public class RestCommandLineService {
             }
 
             String resultString = getHttpResponseString(response);
-
             if (resultString == null) {
                 System.out.println("Response content is empty");
                 return;
             }
 
             ServiceDefinitionList definitionList = gson.fromJson(resultString, ServiceDefinitionList.class);
-
             if (definitionList == null) {
                 System.out.println("Deploy service list is empty");
                 return;
@@ -1247,14 +1410,12 @@ public class RestCommandLineService {
             RowMapper<ServiceDefinitionBean> deployServiceMapper = new RowMapper<ServiceDefinitionBean>() {
 
                 public String[] getData(ServiceDefinitionBean definition) {
-                    String[] data = new String[7];
-                    data[0] = definition.getServiceName();
-                    data[1] = definition.getCartridgeType();
-                    data[2] = definition.getDeploymentPolicyName();
-                    data[3] = definition.getAutoscalingPolicyName();
-                    data[4] = definition.getClusterDomain();
-                    data[5] = definition.getClusterSubDomain();
-                    data[6] = definition.getTenantRange();
+                    String[] data = new String[5];
+                    data[0] = definition.getCartridgeType();
+                    data[1] = definition.getDeploymentPolicyName();
+                    data[2] = definition.getAutoscalingPolicyName();
+                    data[3] = definition.getClusterDomain();
+                    data[4] = definition.getTenantRange();
                     return data;
                 }
             };
@@ -1270,17 +1431,10 @@ public class RestCommandLineService {
                 return;
             }
 
-            List<String> headers = new ArrayList<String>();
-            headers.add("Service Name");
-            headers.add("Cartridge Type");
-            headers.add("Deployment Policy Name");
-            headers.add("Autoscaling Policy Name");
-            headers.add("Cluster Domain");
-            headers.add("Cluster Sub Domain");
-            headers.add("Tenant Range");
-
             System.out.println("Available Deploy Services :");
-            CommandLineUtils.printTable(definitionArry, deployServiceMapper, headers.toArray(new String[headers.size()]));
+            CommandLineUtils.printTable(definitionArry, deployServiceMapper, "Cartridge Type", "Deployment Policy Name",
+                    "Autoscaling Policy Name", "Cluster Domain", "Tenant Range");
+            System.out.println();
 
         } catch (Exception e) {
             handleException("Exception in listing deploy services", e);
@@ -1714,18 +1868,18 @@ public class RestCommandLineService {
 
     // This class convert JSON string to servicedefinitionbean object
     private class ServiceDefinitionList {
-        private ArrayList<ServiceDefinitionBean> serviceDefinition;
+        private ArrayList<ServiceDefinitionBean> serviceDefinitionBean;
 
         public ArrayList<ServiceDefinitionBean> getServiceDefinition() {
-            return serviceDefinition;
+            return serviceDefinitionBean;
         }
 
-        public void setServiceDefinition(ArrayList<ServiceDefinitionBean> serviceDefinition) {
-            this.serviceDefinition = serviceDefinition;
+        public void setServiceDefinition(ArrayList<ServiceDefinitionBean> serviceDefinitionBean) {
+            this.serviceDefinitionBean = serviceDefinitionBean;
         }
 
         ServiceDefinitionList() {
-            serviceDefinition = new ArrayList<ServiceDefinitionBean>();
+            serviceDefinitionBean = new ArrayList<ServiceDefinitionBean>();
         }
     }
 
@@ -1780,6 +1934,19 @@ public class RestCommandLineService {
         }
     }
 
+    private class ClusterList{
+        private ArrayList<Cluster> cluster;
+
+        public ArrayList<Cluster> getCluster() {
+            return cluster;
+        }
+
+        public void setCluster(ArrayList<Cluster> clusters) {
+            this.cluster = clusters;
+        }
+        ClusterList(){cluster = new ArrayList<Cluster>();};
+    }
+
     // This will return access url from a given cartridge
     private String getAccessURLs(Cartridge cartridge) {
     	PortMapping[] portMappings = cartridge.getPortMappings();
@@ -1900,4 +2067,53 @@ public class RestCommandLineService {
 		public CartridgeWrapper() {
 		}
 	}
+
+    public boolean isMultiTenant(String type) throws CommandException {
+        DefaultHttpClient httpClient = new DefaultHttpClient();
+        try {
+            HttpResponse response = restClient.doGet(httpClient, restClient.getBaseURL() + listAvailableCartridgesRestEndpoint);
+
+            String responseCode = "" + response.getStatusLine().getStatusCode();
+            String resultString = getHttpResponseString(response);
+            if (resultString == null) {
+                return false;
+            }
+
+            GsonBuilder gsonBuilder = new GsonBuilder();
+            Gson gson = gsonBuilder.create();
+
+            if (!responseCode.equals(CliConstants.RESPONSE_OK)) {
+                ExceptionMapper exception = gson.fromJson(resultString, ExceptionMapper.class);
+                System.out.println(exception);
+                return false;
+            }
+
+            CartridgeList cartridgeList = gson.fromJson(resultString, CartridgeList.class);
+
+            if (cartridgeList == null) {
+                System.out.println("Available cartridge list is null");
+                return false;
+            }
+
+            ArrayList<Cartridge> multiTenetCartridge = new ArrayList<Cartridge>();
+
+            for (Cartridge cartridge : cartridgeList.getCartridge()) {
+                if (cartridge.isMultiTenant() && cartridge.getCartridgeType().equals(type)) {
+                    multiTenetCartridge.add(cartridge);
+                }
+            }
+
+            if (multiTenetCartridge.size() > 0) {
+                return true;
+            } else {
+                return false;
+            }
+
+        } catch (Exception e) {
+            handleException("Exception in listing available cartridges", e);
+            return false;
+        } finally {
+            httpClient.getConnectionManager().shutdown();
+        }
+    }
 }
diff --git a/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/StratosApplication.java b/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/StratosApplication.java
index dc76667..41a6635 100644
--- a/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/StratosApplication.java
+++ b/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/StratosApplication.java
@@ -468,6 +468,17 @@ public class StratosApplication extends CommandLineApplication<StratosCommandCon
 		username = System.getenv(CliConstants.STRATOS_USERNAME_ENV_PROPERTY);
 		password = System.getenv(CliConstants.STRATOS_PASSWORD_ENV_PROPERTY);
 
+        int slashCount = StringUtils.countMatches(stratosURL, "/");
+        int colonCount = StringUtils.countMatches(stratosURL, ":");
+
+        if ( ! (colonCount == 2 && (slashCount == 3 || slashCount == 2))) {
+            if (logger.isDebugEnabled()) {
+                logger.debug("Invalid STRATOS_URL");
+            }
+
+            System.out.println("Invalid STRATOS_URL. Please enter correct STRATOS_URL");
+            return false;
+        }
 		if (StringUtils.isBlank(stratosURL)) {
 			if (logger.isDebugEnabled()) {
 				logger.debug("Required configuration not found.");
@@ -476,38 +487,30 @@ public class StratosApplication extends CommandLineApplication<StratosCommandCon
 			System.out.format("Could not find required \"%s\" variable in your environment.%n",
 					CliConstants.STRATOS_URL_ENV_PROPERTY);
 			return false;
-		}
-
-		if (logger.isDebugEnabled()) {
-			logger.debug("Required configuration found. Validating {}", stratosURL);
-		}
-
-		int slashCount = StringUtils.countMatches(stratosURL, "/");
-		int colonCount = StringUtils.countMatches(stratosURL, ":");
-
-		UrlValidator urlValidator = new UrlValidator(new String[] { "https" },UrlValidator.ALLOW_LOCAL_URLS);
-		
-		// port must be provided, so colonCount must be 2
-		// context path must not be provided, so slashCount must not be >3
-		
-		if (!urlValidator.isValid(stratosURL) || colonCount != 2 || slashCount >3) {
+		} else {
 			if (logger.isDebugEnabled()) {
-				logger.debug("Stratos Controller URL {} is not valid", stratosURL);
+				logger.debug("Required configuration found. Validating {}", stratosURL);
 			}
-			System.out.format(
-					"The \"%s\" variable in your environment is not a valid URL. You have provided \"%s\".%n"
-							+ "Please provide the Stratos Controller URL as follows%nhttps://<host>:<port>%n",
-					CliConstants.STRATOS_URL_ENV_PROPERTY, stratosURL);
-			return false;
-		}
-		if (logger.isDebugEnabled()) {
-			logger.debug("Stratos Controller URL {} is valid.", stratosURL);
-			logger.debug("Adding the values to context.");
+			UrlValidator urlValidator = new UrlValidator(new String[] { "https" },UrlValidator.ALLOW_LOCAL_URLS);
+			if (!urlValidator.isValid(stratosURL)) {
+				if (logger.isDebugEnabled()) {
+					logger.debug("Stratos Controller URL {} is not valid", stratosURL);
+				}
+				System.out.format(
+						"The \"%s\" variable in your environment is not a valid URL. You have provided \"%s\".%n"
+								+ "Please provide the Stratos Controller URL as follows%nhttps://<host>:<port>%n",
+						CliConstants.STRATOS_URL_ENV_PROPERTY, stratosURL);
+				return false;
+			}
+			if (logger.isDebugEnabled()) {
+				logger.debug("Stratos Controller URL {} is valid.", stratosURL);
+				logger.debug("Adding the values to context.");
+			}
+			context.put(CliConstants.STRATOS_URL_ENV_PROPERTY, stratosURL);
+			context.put(CliConstants.STRATOS_USERNAME_ENV_PROPERTY, username);
+			context.put(CliConstants.STRATOS_PASSWORD_ENV_PROPERTY, password);
+			return true;
 		}
-		context.put(CliConstants.STRATOS_URL_ENV_PROPERTY, stratosURL);
-		context.put(CliConstants.STRATOS_USERNAME_ENV_PROPERTY, username);
-		context.put(CliConstants.STRATOS_PASSWORD_ENV_PROPERTY, password);
-		return true;
 	}
 	
 	private void setLoggerLevel(boolean trace, boolean debug) {
diff --git a/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/beans/cartridge/Cartridge.java b/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/beans/cartridge/Cartridge.java
index 6331e03..a148a2d 100644
--- a/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/beans/cartridge/Cartridge.java
+++ b/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/beans/cartridge/Cartridge.java
@@ -49,6 +49,7 @@ public class Cartridge implements Comparable<Cartridge> {
 
     private String[] accessURLs;
     private PortMapping[] portMappings;
+    private String serviceGroup;
 
     public String getDisplayName() {
         return displayName;
@@ -244,4 +245,12 @@ public class Cartridge implements Comparable<Cartridge> {
     public void setLoadBalancer(boolean isLoadBalancer) {
         this.loadBalancer = isLoadBalancer;
     }
+
+    public String getServiceGroup() {
+        return serviceGroup;
+    }
+
+    public void setServiceGroup(String serviceGroup) {
+        this.serviceGroup = serviceGroup;
+    }
 }
diff --git a/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/beans/cartridge/CartridgeInfoBean.java b/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/beans/cartridge/CartridgeInfoBean.java
index 9e23120..58d6f66 100644
--- a/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/beans/cartridge/CartridgeInfoBean.java
+++ b/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/beans/cartridge/CartridgeInfoBean.java
@@ -31,7 +31,7 @@ public class CartridgeInfoBean {
     private String autoscalePolicy;
     private String deploymentPolicy;
     private String size;
-    private String volumeId;
+
     boolean privateRepo;
     private boolean removeOnTermination;
     private boolean persistanceRequired;
@@ -140,12 +140,6 @@ public class CartridgeInfoBean {
 	public void setCommitsEnabled(boolean commitsEnabled) {
 		this.commitsEnabled = commitsEnabled;
 	}
-
-    public String getVolumeId() {
-        return volumeId;
-    }
-
-    public void setVolumeId(String volumeId) {
-        this.volumeId = volumeId;
-    }
+    
+    
 }
diff --git a/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/commands/SubscribeCommand.java b/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/commands/SubscribeCommand.java
index 6a9c623..c068f65 100644
--- a/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/commands/SubscribeCommand.java
+++ b/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/commands/SubscribeCommand.java
@@ -26,6 +26,7 @@ import org.apache.commons.cli.Options;
 import org.apache.commons.cli.ParseException;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.stratos.cli.RestCommandLineService;
+import org.apache.stratos.cli.beans.cartridge.Cartridge;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.apache.stratos.cli.Command;
@@ -33,28 +34,30 @@ import org.apache.stratos.cli.StratosCommandContext;
 import org.apache.stratos.cli.exception.CommandException;
 import org.apache.stratos.cli.utils.CliConstants;
 
+import java.util.ArrayList;
+
 public class SubscribeCommand implements Command<StratosCommandContext> {
 
-	private static final Logger logger = LoggerFactory.getLogger(ListSubscribedCartridgesCommand.class);
+    private static final Logger logger = LoggerFactory.getLogger(ListSubscribedCartridgesCommand.class);
 
-	private final Options options;
+    private final Options options;
 
-	public SubscribeCommand() {
-		options = constructOptions();
-	}
+    public SubscribeCommand() {
+        options = constructOptions();
+    }
 
-	/**
-	 * Construct Options.
-	 * 
-	 * @return Options expected from command-line.
-	 */
-	private Options constructOptions() {
-		final Options options = new Options();
-		//Option policyOption = new Option(CliConstants.POLICY_OPTION, CliConstants.POLICY_LONG_OPTION, true,
-		//		"Auto-scaling policy.\nPlease use \"" + CliConstants.POLICIES_ACTION
-		//				+ "\" command to view the available policies.");
-		//policyOption.setArgName("policy name");
-		//options.addOption(policyOption);
+    /**
+     * Construct Options.
+     *
+     * @return Options expected from command-line.
+     */
+    private Options constructOptions() {
+        final Options options = new Options();
+        //Option policyOption = new Option(CliConstants.POLICY_OPTION, CliConstants.POLICY_LONG_OPTION, true,
+        //		"Auto-scaling policy.\nPlease use \"" + CliConstants.POLICIES_ACTION
+        //				+ "\" command to view the available policies.");
+        //policyOption.setArgName("policy name");
+        //options.addOption(policyOption);
 
         Option autoscaling = new Option(CliConstants.AUTOSCALING_POLICY_OPTION, CliConstants.AUTOSCALING_POLICY_LONG_OPTION,
                 true, "Auto-scaling policy");
@@ -75,99 +78,91 @@ public class SubscribeCommand implements Command<StratosCommandContext> {
         size.setArgName("volume-size");
         options.addOption(size);
 
-        Option volumeId = new Option(CliConstants.VOLUME_ID_OPTION, CliConstants.VOLUME_ID_LONG_OPTION, true, "Volume-id");
-        volumeId.setArgName("volume-id");
-        options.addOption(volumeId);
-
         Option persistance = new Option(CliConstants.PERSISTANCE_VOLUME_OPTION, CliConstants.PERSISTANCE_VOLUME_LONG_OPTION,
                 true, "Persistance-volume");
         persistance.setArgName("persistance-volume");
         options.addOption(persistance);
 
-		Option urlOption = new Option(CliConstants.REPO_URL_OPTION, CliConstants.REPO_URL_LONG_OPTION, true,
-				"GIT repository URL");
-		urlOption.setArgName("url");
-		options.addOption(urlOption);
-
-		//options.addOption(CliConstants.PRIVATE_REPO_OPTION, CliConstants.PRIVATE_REPO_LONG_OPTION, false,
-		//		"Private repository");
-
-		Option usernameOption = new Option(CliConstants.USERNAME_OPTION, CliConstants.USERNAME_LONG_OPTION, true,
-				"GIT repository username");
-		usernameOption.setArgName("username");
-		options.addOption(usernameOption);
-
-		Option passwordOption = new Option(CliConstants.PASSWORD_OPTION, CliConstants.PASSWORD_LONG_OPTION, true,
-				"GIT repository password");
-		passwordOption.setArgName("password");
-		passwordOption.setOptionalArg(true);
-		options.addOption(passwordOption);
-		
-		Option upstreamCommitsEnabledOption = new Option(CliConstants.ENABLE_COMMITS_OPTION, CliConstants.ENABLE_COMMITS_LONG_OPTION, true,
-		"Enable Git commit upstream");
-		upstreamCommitsEnabledOption.setArgName("enable-commits");
-		upstreamCommitsEnabledOption.setOptionalArg(true);
-		options.addOption(upstreamCommitsEnabledOption);
+        Option urlOption = new Option(CliConstants.REPO_URL_OPTION, CliConstants.REPO_URL_LONG_OPTION, true,
+                "GIT repository URL");
+        urlOption.setArgName("url");
+        options.addOption(urlOption);
+
+        //options.addOption(CliConstants.PRIVATE_REPO_OPTION, CliConstants.PRIVATE_REPO_LONG_OPTION, false,
+        //		"Private repository");
+
+        Option usernameOption = new Option(CliConstants.USERNAME_OPTION, CliConstants.USERNAME_LONG_OPTION, true,
+                "GIT repository username");
+        usernameOption.setArgName("username");
+        options.addOption(usernameOption);
+
+        Option passwordOption = new Option(CliConstants.PASSWORD_OPTION, CliConstants.PASSWORD_LONG_OPTION, true,
+                "GIT repository password");
+        passwordOption.setArgName("password");
+        passwordOption.setOptionalArg(true);
+        options.addOption(passwordOption);
+
+        Option upstreamCommitsEnabledOption = new Option(CliConstants.ENABLE_COMMITS_OPTION, CliConstants.ENABLE_COMMITS_LONG_OPTION, true,
+                "Enable Git commit upstream");
+        upstreamCommitsEnabledOption.setArgName("enable-commits");
+        upstreamCommitsEnabledOption.setOptionalArg(true);
+        options.addOption(upstreamCommitsEnabledOption);
 
         return options;
-	}
-
-	public String getName() {
-		return CliConstants.SUBSCRIBE_ACTION;
-	}
-
-	public String getDescription() {
-		return "Subscribe to a cartridge";
-	}
-
-	public String getArgumentSyntax() {
-		return "[Cartridge type] [Cartridge alias]";
-	}
-
-	public int execute(StratosCommandContext context, String[] args) throws CommandException {
-		if (logger.isDebugEnabled()) {
-			logger.debug("Executing {} command...", getName());
-		}
-		if (args != null && args.length > 0) {
-			String[] remainingArgs = null;
-			String type = null;
-			String alias = null;
-			String policy = null;
+    }
+
+    public String getName() {
+        return CliConstants.SUBSCRIBE_ACTION;
+    }
+
+    public String getDescription() {
+        return "Subscribe to a cartridge";
+    }
+
+    public String getArgumentSyntax() {
+        return "[Cartridge type] [Cartridge alias]";
+    }
+
+    public int execute(StratosCommandContext context, String[] args) throws CommandException {
+        if (logger.isDebugEnabled()) {
+            logger.debug("Executing {} command...", getName());
+        }
+        if (args != null && args.length > 0) {
+            String[] remainingArgs = null;
+            String type = null;
+            String alias = null;
+            String policy = null;
             String asPolicy = null;
             String depPolicy = null;
-			String repoURL = null, username = "", password = "";
+            String repoURL = null, username = "", password = "";
             String size = null;
-            String volumeID = null;
 
             boolean removeOnTermination = false;
-			boolean privateRepo = false;
+            boolean privateRepo = false;
             boolean persistanceMapping = false;
             boolean commitsEnabled = false;
+            boolean isMultiTenant = false;
+
+            final CommandLineParser parser = new GnuParser();
+            CommandLine commandLine;
+            try {
+                commandLine = parser.parse(options, args);
+                remainingArgs = commandLine.getArgs();
+                if (remainingArgs != null && remainingArgs.length == 2) {
+                    // Get type
+                    type = remainingArgs[0];
+                    alias = remainingArgs[1];
+                } else {
+                    context.getStratosApplication().printUsage(getName());
+                    return CliConstants.BAD_ARGS_CODE;
+                }
 
-			final CommandLineParser parser = new GnuParser();
-			CommandLine commandLine;
-			try {
-				commandLine = parser.parse(options, args);
-				remainingArgs = commandLine.getArgs();
-				if (remainingArgs != null && remainingArgs.length == 2) {
-					// Get type
-					type = remainingArgs[0];
-					alias = remainingArgs[1];
-				} else {
-					context.getStratosApplication().printUsage(getName());
-					return CliConstants.BAD_ARGS_CODE;
-				}
-
-				if (logger.isDebugEnabled()) {
-					logger.debug("Subscribing to {} cartridge with alias {}", type, alias);
-				}
-
-				//if (commandLine.hasOption(CliConstants.POLICY_OPTION)) {
-				//	if (logger.isTraceEnabled()) {
-				//		logger.trace("Policy option is passed");
-				//	}
-				//	policy = commandLine.getOptionValue(CliConstants.POLICY_OPTION);
-				//}
+                // This will check the subscribe cartridge type is multi tenant or single tenant
+                isMultiTenant = RestCommandLineService.getInstance().isMultiTenant(type);
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("Subscribing to {} cartridge with alias {}", type, alias);
+                }
                 if (commandLine.hasOption(CliConstants.AUTOSCALING_POLICY_OPTION)) {
                     if (logger.isTraceEnabled()) {
                         logger.trace("Autoscaling policy option is passed");
@@ -180,35 +175,19 @@ public class SubscribeCommand implements Command<StratosCommandContext> {
                     }
                     depPolicy = commandLine.getOptionValue(CliConstants.DEPLOYMENT_POLICY_OPTION);
                 }
-				if (commandLine.hasOption(CliConstants.REPO_URL_OPTION)) {
-					if (logger.isTraceEnabled()) {
-						logger.trace("RepoURL option is passed");
-					}
-					repoURL = commandLine.getOptionValue(CliConstants.REPO_URL_OPTION);
-				}
-				//if (commandLine.hasOption(CliConstants.PRIVATE_REPO_OPTION)) {
-				//	if (logger.isTraceEnabled()) {
-				//		logger.trace("privateRepo option is passed");
-				//	}
-				//	privateRepo = true;
-				//}
-                if (commandLine.hasOption(CliConstants.VOLUME_SIZE_OPTION)) {
+                if (commandLine.hasOption(CliConstants.REPO_URL_OPTION)) {
                     if (logger.isTraceEnabled()) {
-                        logger.trace("Volume size option is passed");
-
+                        logger.trace("RepoURL option is passed");
                     }
-                    size = commandLine.getOptionValue(CliConstants.VOLUME_SIZE_OPTION);
+                    repoURL = commandLine.getOptionValue(CliConstants.REPO_URL_OPTION);
                 }
-
-                if (commandLine.hasOption(CliConstants.VOLUME_ID_OPTION)) {
+                if (commandLine.hasOption(CliConstants.VOLUME_SIZE_OPTION)) {
                     if (logger.isTraceEnabled()) {
-                        logger.trace("Volume id option is passed");
+                        logger.trace("Volume size option is passed");
 
                     }
-                    volumeID = commandLine.getOptionValue(CliConstants.VOLUME_ID_OPTION);
+                    size = commandLine.getOptionValue(CliConstants.VOLUME_SIZE_OPTION);
                 }
-
-
                 if (commandLine.hasOption(CliConstants.REMOVE_ON_TERMINATION_OPTION)) {
                     if (logger.isTraceEnabled()) {
                         logger.trace("Remove on termination option is passed");
@@ -234,7 +213,6 @@ public class SubscribeCommand implements Command<StratosCommandContext> {
                         logger.trace("Persistance volume option is passed");
 
                     }
-
                     String optionValue = commandLine.getOptionValue(CliConstants.PERSISTANCE_VOLUME_OPTION);
                     if (optionValue.equals("true")) {
                         persistanceMapping = true;
@@ -249,68 +227,90 @@ public class SubscribeCommand implements Command<StratosCommandContext> {
                         return CliConstants.BAD_ARGS_CODE;
                     }
                 }
-				if (commandLine.hasOption(CliConstants.USERNAME_OPTION)) {
-					if (logger.isTraceEnabled()) {
-						logger.trace("Username option is passed");
-					}
-					username = commandLine.getOptionValue(CliConstants.USERNAME_OPTION);
-				}
-				if (commandLine.hasOption(CliConstants.PASSWORD_OPTION)) {
-					if (logger.isTraceEnabled()) {
-						logger.trace("Password option is passed");
-					}
-					password = commandLine.getOptionValue(CliConstants.PASSWORD_OPTION);
-				}
-				if (commandLine.hasOption(CliConstants.ENABLE_COMMITS_OPTION)) {
-					if (logger.isTraceEnabled()) {
-						logger.trace("Upstream git commits are enabled");
-					}
-					commitsEnabled = true;
-				}
-
-                if (depPolicy == null) {
+                if (commandLine.hasOption(CliConstants.USERNAME_OPTION)) {
+                    if (logger.isTraceEnabled()) {
+                        logger.trace("Username option is passed");
+                    }
+                    username = commandLine.getOptionValue(CliConstants.USERNAME_OPTION);
+                }
+                if (commandLine.hasOption(CliConstants.PASSWORD_OPTION)) {
+                    if (logger.isTraceEnabled()) {
+                        logger.trace("Password option is passed");
+                    }
+                    password = commandLine.getOptionValue(CliConstants.PASSWORD_OPTION);
+                }
+                if (commandLine.hasOption(CliConstants.ENABLE_COMMITS_OPTION)) {
+                    if (logger.isTraceEnabled()) {
+                        logger.trace("Upstream git commits are enabled");
+                    }
+                    commitsEnabled = true;
+                }
+
+                if ( ! isMultiTenant && depPolicy == null) {
                     System.out.println("Deployment policy is required.");
                     context.getStratosApplication().printUsage(getName());
                     return CliConstants.BAD_ARGS_CODE;
                 }
 
-                if (asPolicy == null) {
+                if ( ! isMultiTenant && asPolicy == null) {
                     System.out.println("Autoscaling policy is required.");
                     context.getStratosApplication().printUsage(getName());
                     return CliConstants.BAD_ARGS_CODE;
                 }
 
-                if ( (! persistanceMapping) && ((size != null) || removeOnTermination)) {
+                if ((!persistanceMapping) && ((size != null) || removeOnTermination)) {
                     System.out.println("You have to enable persistance mapping in cartridge subscription");
                     context.getStratosApplication().printUsage(getName());
                     return CliConstants.BAD_ARGS_CODE;
                 }
-				
-				if (StringUtils.isNotBlank(username) && StringUtils.isBlank(password)) {
-					password = context.getApplication().getInput("GIT Repository Password", '*');
-				}
-
-                RestCommandLineService.getInstance().subscribe(type, alias, repoURL, privateRepo, username,
-                		password, asPolicy, depPolicy, size, removeOnTermination,
-                        persistanceMapping, commitsEnabled, volumeID);
-
-				return CliConstants.SUCCESSFUL_CODE;
-
-			} catch (ParseException e) {
-				if (logger.isErrorEnabled()) {
-					logger.error("Error parsing arguments", e);
-				}
-				System.out.println(e.getMessage());
-				return CliConstants.BAD_ARGS_CODE;
-			}
-		} else {
-			context.getStratosApplication().printUsage(getName());
-			return CliConstants.BAD_ARGS_CODE;
-		}
-	}
-
-	public Options getOptions() {
-		return options;
-	}
+
+                if (StringUtils.isNotBlank(username) && StringUtils.isBlank(password)) {
+                    password = context.getApplication().getInput("GIT Repository Password", '*');
+                }
+
+                Cartridge cartridge = RestCommandLineService.getInstance().listCartridge(type);
+                if(cartridge == null){
+                    System.out.println("No cartridge found with the type " + type);
+                    return CliConstants.BAD_ARGS_CODE;
+                }
+
+                String serviceGroup = cartridge.getServiceGroup();
+
+                if (serviceGroup == null) {
+                    RestCommandLineService.getInstance().subscribe(type, alias, repoURL, privateRepo, username,
+                            password, asPolicy, depPolicy, size, removeOnTermination,
+                            persistanceMapping, commitsEnabled);
+                } else {
+                    ArrayList<Cartridge> cartridgesInSeriviceGroup = RestCommandLineService.getInstance().listCartridges(serviceGroup);
+                    Cartridge cart = null;
+                    int aliasCount = 1;
+                    for (int i = 0; i < cartridgesInSeriviceGroup.size(); i++, aliasCount++) {
+
+                        cart = cartridgesInSeriviceGroup.get(i);
+                        System.out.println("Subscribing to " + cart.getCartridgeType());
+                        RestCommandLineService.getInstance().subscribe(cart.getCartridgeType(), alias + aliasCount, repoURL, privateRepo, username,
+                                password, asPolicy, depPolicy, size, removeOnTermination,
+                                persistanceMapping, commitsEnabled);
+                    }
+                }
+
+                return CliConstants.SUCCESSFUL_CODE;
+
+            } catch (ParseException e) {
+                if (logger.isErrorEnabled()) {
+                    logger.error("Error parsing arguments", e);
+                }
+                System.out.println(e.getMessage());
+                return CliConstants.BAD_ARGS_CODE;
+            }
+        } else {
+            context.getStratosApplication().printUsage(getName());
+            return CliConstants.BAD_ARGS_CODE;
+        }
+    }
+
+    public Options getOptions() {
+        return options;
+    }
 
 }
diff --git a/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/utils/CliConstants.java b/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/utils/CliConstants.java
index 2e898f4..0f6a901 100644
--- a/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/utils/CliConstants.java
+++ b/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/utils/CliConstants.java
@@ -224,9 +224,6 @@ public class CliConstants {
     public static final String VOLUME_SIZE_OPTION = "v";
     public static final String VOLUME_SIZE_LONG_OPTION = "volume-size";
 
-    public static final String VOLUME_ID_OPTION = "vi";
-    public static final String VOLUME_ID_LONG_OPTION = "volume-id";
-
     public static final String PERSISTANCE_VOLUME_OPTION = "pv";
     public static final String PERSISTANCE_VOLUME_LONG_OPTION = "persistance-volume";
 
diff --git a/components/org.apache.stratos.cloud.controller/pom.xml b/components/org.apache.stratos.cloud.controller/pom.xml
index 9727613..c551566 100644
--- a/components/org.apache.stratos.cloud.controller/pom.xml
+++ b/components/org.apache.stratos.cloud.controller/pom.xml
@@ -22,7 +22,7 @@
     <parent>
        <groupId>org.apache.stratos</groupId>
        <artifactId>stratos-components-parent</artifactId>
-       <version>4.0.0-SNAPSHOT</version>
+       <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/concurrent/PartitionValidatorCallable.java b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/concurrent/PartitionValidatorCallable.java
index 2ae5274..d0c2276 100644
--- a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/concurrent/PartitionValidatorCallable.java
+++ b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/concurrent/PartitionValidatorCallable.java
@@ -44,6 +44,10 @@ public class PartitionValidatorCallable implements Callable<IaasProvider> {
 
 	@Override
 	public IaasProvider call() throws Exception {
+		
+		if (log.isDebugEnabled()) {
+			log.debug("Partition validation started for "+partition+" of "+cartridge);
+		}
 		String provider = partition.getProvider();
         IaasProvider iaasProvider = cartridge.getIaasProvider(provider);
 
diff --git a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/iaases/AWSEC2Iaas.java b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/iaases/AWSEC2Iaas.java
index e4d5477..eafbade 100644
--- a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/iaases/AWSEC2Iaas.java
+++ b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/iaases/AWSEC2Iaas.java
@@ -22,7 +22,6 @@ import com.google.common.base.Predicate;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 
-import org.apache.commons.lang.StringUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.stratos.cloud.controller.exception.CloudControllerException;
@@ -458,7 +457,7 @@ public class AWSEC2Iaas extends Iaas {
     }
 
 	@Override
-	public String createVolume(int sizeGB, String snapshotId) {
+	public String createVolume(int sizeGB) {
 		IaasProvider iaasInfo = getIaasProvider();
 
 		ComputeServiceContext context = iaasInfo.getComputeService()
@@ -475,19 +474,7 @@ public class AWSEC2Iaas extends Iaas {
 		
 		ElasticBlockStoreApi blockStoreApi = context.unwrapApi(AWSEC2Api.class).getElasticBlockStoreApiForRegion(region).get();
 		
-		Volume volume;
-		if(StringUtils.isEmpty(snapshotId)){
-			if(log.isDebugEnabled()){
-        		log.info("Creating a volume in the zone " + zone);
-        	}
-			volume = blockStoreApi.createVolumeInAvailabilityZone(zone, sizeGB);
-		}else{
-			if(log.isDebugEnabled()){
-        		log.info("Creating a volume in the zone " + zone + " from the shanpshot " + snapshotId);
-        	}
-			volume = blockStoreApi.createVolumeFromSnapshotInAvailabilityZone(zone, snapshotId);
-		}
-		 
+		Volume volume = blockStoreApi.createVolumeInAvailabilityZone(zone, sizeGB);
 		
 		if (volume == null) {
 			log.fatal("Volume creation was unsuccessful. [region] : " + region
diff --git a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/iaases/OpenstackNovaIaas.java b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/iaases/OpenstackNovaIaas.java
index b4b31d5..ff2ea70 100644
--- a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/iaases/OpenstackNovaIaas.java
+++ b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/iaases/OpenstackNovaIaas.java
@@ -23,7 +23,6 @@ import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 
-import org.apache.commons.lang.StringUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.stratos.cloud.controller.exception.CloudControllerException;
@@ -44,7 +43,6 @@ import org.jclouds.compute.domain.NodeMetadataBuilder;
 import org.jclouds.compute.domain.Template;
 import org.jclouds.compute.domain.TemplateBuilder;
 import org.jclouds.compute.options.TemplateOptions;
-import org.jclouds.ec2.options.CreateSnapshotOptions;
 import org.jclouds.openstack.nova.v2_0.NovaApi;
 import org.jclouds.openstack.nova.v2_0.NovaApiMetadata;
 import org.jclouds.openstack.nova.v2_0.NovaAsyncApi;
@@ -55,7 +53,6 @@ import org.jclouds.openstack.nova.v2_0.domain.KeyPair;
 import org.jclouds.openstack.nova.v2_0.domain.Network;
 import org.jclouds.openstack.nova.v2_0.domain.Volume;
 import org.jclouds.openstack.nova.v2_0.domain.VolumeAttachment;
-import org.jclouds.openstack.nova.v2_0.domain.VolumeSnapshot;
 import org.jclouds.openstack.nova.v2_0.domain.zonescoped.AvailabilityZone;
 import org.jclouds.openstack.nova.v2_0.extensions.AvailabilityZoneAPI;
 import org.jclouds.openstack.nova.v2_0.extensions.FloatingIPApi;
@@ -64,14 +61,12 @@ import org.jclouds.openstack.nova.v2_0.extensions.KeyPairApi;
 import org.jclouds.openstack.nova.v2_0.extensions.VolumeApi;
 import org.jclouds.openstack.nova.v2_0.extensions.VolumeAttachmentApi;
 import org.jclouds.openstack.nova.v2_0.options.CreateVolumeOptions;
-import org.jclouds.openstack.nova.v2_0.options.CreateVolumeSnapshotOptions;
 import org.jclouds.rest.RestContext;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.LinkedHashSet;
 import java.util.Set;
-import java.util.concurrent.TimeoutException;
 
 @SuppressWarnings("deprecation")
 public class OpenstackNovaIaas extends Iaas {
@@ -345,7 +340,7 @@ public class OpenstackNovaIaas extends Iaas {
 			}
 			if (ip.equals(fip.getIp())) {
 				if(log.isDebugEnabled()) {
-					log.debug(String.format("OpenstackNovaIaas:associatePredefinedAddress:floating ip in use:%s /ip:%s", fip, ip));
+					log.debug("OpenstackNovaIaas:associatePredefinedAddress:floating ip in use:" + fip + " /ip:" + ip);
 				}
 				isAvailable = true;
 				break;
@@ -496,7 +491,8 @@ public class OpenstackNovaIaas extends Iaas {
     	IaasProvider iaasInfo = getIaasProvider();
     	
         if (host == null || zone == null || iaasInfo == null) {
-            String msg = String.format("Host or Zone or IaaSProvider is null: host: %s - zone: %s - IaaSProvider: %s", host, zone, iaasInfo);
+            String msg = "Host or Zone or IaaSProvider is null: host: " + host + " - zone: " +
+                    zone + " - IaaSProvider: " + iaasInfo;
             log.error(msg);
             throw new InvalidHostException(msg);
         }
@@ -514,7 +510,7 @@ public class OpenstackNovaIaas extends Iaas {
             }
         }
         
-        String msg = String.format("Invalid host: %s in the zone: %s and of the iaas: %s", host, zone, iaasInfo.getType());
+        String msg = "Invalid host: " + host +" in the zone: "+zone+ " and of the iaas: "+iaasInfo.getType();
         log.error(msg);
         throw new InvalidHostException(msg);
     }
@@ -525,166 +521,62 @@ public class OpenstackNovaIaas extends Iaas {
     }
 
 	@Override
-	public String createVolume(int sizeGB, String snapshotId) {
+	public String createVolume(int sizeGB) {
 		IaasProvider iaasInfo = getIaasProvider();
 		String region = ComputeServiceBuilderUtil.extractRegion(iaasInfo);
 		String zone = ComputeServiceBuilderUtil.extractZone(iaasInfo);
 		
         if (region == null || iaasInfo == null) {
-        	log.fatal(String.format("Cannot create a new volume in the [region] : %s of Iaas : %s", region, iaasInfo));
+        	log.fatal("Cannot create a new volume in the [region] : "+region
+					+" of Iaas : "+iaasInfo);
             return null;
         }
         ComputeServiceContext context = iaasInfo.getComputeService().getContext();
         
         RestContext<NovaApi, NovaAsyncApi> nova = context.unwrap();
-        VolumeApi volumeApi = nova.getApi().getVolumeExtensionForZone(region).get();
-        Volume volume;
-        if(StringUtils.isEmpty(snapshotId)){
-        	if(log.isDebugEnabled()){
-        		log.info("Creating a volume in the zone " + zone);
-        	}
-        	volume = volumeApi.create(sizeGB, CreateVolumeOptions.Builder.availabilityZone(zone));
-        }else{
-        	if(log.isDebugEnabled()){
-        		log.info("Creating a volume in the zone " + zone + " from the shanpshot " + snapshotId);
-        	}
-        	volume = volumeApi.create(sizeGB, CreateVolumeOptions.Builder.availabilityZone(zone).snapshotId(snapshotId));
-        }
-
+        VolumeApi api = nova.getApi().getVolumeExtensionForZone(region).get();
+        Volume volume = api.create(sizeGB, CreateVolumeOptions.Builder.availabilityZone(zone));
         if (volume == null) {
-            log.fatal(String.format("Volume creation was unsuccessful. [region] : %s [zone] : %s of Iaas : %s", region, zone, iaasInfo));
-            return null;
-        }
-
-        String volumeId = volume.getId();
-        /*
-        Volume.Status volumeStatus = this.getVolumeStatus(volumeApi, volumeId);
-
-        if(!(volumeStatus == Volume.Status.AVAILABLE || volumeStatus == Volume.Status.CREATING)){
-            log.error(String.format("Error while creating [volume id] %s. Volume status is %s", volumeId, volumeStatus));
-            return volumeId;
-        }
-        try {
-            if(!waitForStatus(volumeApi, volumeId, Volume.Status.AVAILABLE)){
-                log.error("Volume did not become AVAILABLE. Current status is " + volume.getStatus());
-            }
-        } catch (TimeoutException e) {
-            log.error("[Volume ID] " + volumeId + "did not become AVAILABLE within expected timeout");
-            return volumeId;
-        }
-        */
-		log.info(String.format("Successfully created a new volume [id]: %s in [region] : %s [zone] : %s of Iaas : %s [Volume ID]%s", volume.getId(), region, zone, iaasInfo, volume.getId()));
-		return volumeId;
+			log.fatal("Volume creation was unsuccessful. [region] : " + region+" [zone] : " + zone
+					+ " of Iaas : " + iaasInfo);
+			return null;
+		}
+		
+		log.info("Successfully created a new volume [id]: "+volume.getId()
+				+" in [region] : "+region+" [zone] : "+zone+" of Iaas : "+iaasInfo);
+		return volume.getId();
 	}
 
-    private boolean waitForStatus(String volumeId, Volume.Status expectedStatus, int timeoutInMins) throws TimeoutException {
-        long timeout = 1000 * 60 * timeoutInMins;
-        long timout = System.currentTimeMillis() + timeout;
-
-        IaasProvider iaasInfo = getIaasProvider();
-        String region = ComputeServiceBuilderUtil.extractRegion(iaasInfo);
-        ComputeServiceContext context = iaasInfo.getComputeService().getContext();;
-        RestContext<NovaApi, NovaAsyncApi> nova = context.unwrap();
-        VolumeApi volumeApi = nova.getApi().getVolumeExtensionForZone(region).get();
-        VolumeAttachmentApi volumeAttachmentApi = nova.getApi().getVolumeAttachmentExtensionForZone(region).get();
-        Volume.Status volumeStatus = this.getVolumeStatus(volumeApi, volumeId);
-
-        while(volumeStatus != expectedStatus){
-            try {
-                if(log.isDebugEnabled()){
-                    log.debug(String.format("Volume %s is still NOT in %s. Current State=%s", volumeId, expectedStatus, volumeStatus));
-                }
-                if(volumeStatus == Volume.Status.ERROR){
-                    log.error("Volume " + volumeId + " is in state ERROR");
-                    return false;
-                }
-                Thread.sleep(1000);
-                volumeStatus = this.getVolumeStatus(volumeApi, volumeId);
-                if (System.currentTimeMillis()> timout) {
-                    throw new TimeoutException();
-                }
-            } catch (InterruptedException e) {
-                // Ignoring the exception
-            }
-        }
-        if(log.isDebugEnabled()){
-            log.debug(String.format("Volume %s status became %s", volumeId, expectedStatus));
-        }
-
-        return true;
-    }
-
-    @Override
+	@Override
 	public String attachVolume(String instanceId, String volumeId, String deviceName) {
-        IaasProvider iaasInfo = getIaasProvider();
-
-        if (StringUtils.isEmpty(volumeId)) {
-            log.error("Volume provided to attach can not be null");
-        }
-
-        if (StringUtils.isEmpty(instanceId)) {
-            log.error("Instance provided to attach can not be null");
-        }
-
-        ComputeServiceContext context = iaasInfo.getComputeService()
-                .getContext();
-        String region = ComputeServiceBuilderUtil.extractRegion(iaasInfo);
-        String device = deviceName == null ? "/dev/vdc" : deviceName;
-
-        if (region == null) {
-            log.fatal(String.format("Cannot attach the volume [id]: %s in the [region] : %s of Iaas : %s", volumeId, region, iaasInfo));
-            return null;
-        }
-
-        RestContext<NovaApi, NovaAsyncApi> nova = context.unwrap();
-        VolumeApi volumeApi = nova.getApi().getVolumeExtensionForZone(region).get();
-        VolumeAttachmentApi volumeAttachmentApi = nova.getApi().getVolumeAttachmentExtensionForZone(region).get();
-
-        Volume.Status volumeStatus = this.getVolumeStatus(volumeApi, volumeId);
-
-        if (log.isDebugEnabled()) {
-            log.debug("Volume " + volumeId + " is in state " + volumeStatus);
-        }
-
-        if (!(volumeStatus == Volume.Status.AVAILABLE || volumeStatus == Volume.Status.CREATING)) {
-            log.error(String.format("Volume %s can not be attached. Volume status is %s", volumeId, volumeStatus));
-            return null;
-        }
-
-        boolean volumeBecameAvailable = false, volumeBecameAttached = false;
-        try {
-            volumeBecameAvailable = waitForStatus(volumeId, Volume.Status.AVAILABLE, 5);
-        } catch (TimeoutException e) {
-            log.error("[Volume ID] " + volumeId + "did not become AVAILABLE within expected timeout");
-        }
-
-        VolumeAttachment attachment = null;
-        if (volumeBecameAvailable) {
-            attachment = volumeAttachmentApi.attachVolumeToServerAsDevice(volumeId, instanceId, device);
-
-            try {
-                volumeBecameAttached = waitForStatus(volumeId, Volume.Status.IN_USE, 2);
-            } catch (TimeoutException e) {
-                log.error("[Volume ID] " + volumeId + "did not become IN_USE within expected timeout");
-            }
-        }
-        try {
-            // waiting 5seconds till volumes are actually attached.
-            Thread.sleep(5000);
-        } catch (InterruptedException e) {
-            e.printStackTrace();
-        }
+		IaasProvider iaasInfo = getIaasProvider();
 
+		ComputeServiceContext context = iaasInfo.getComputeService()
+				.getContext();
+		
+		String region = ComputeServiceBuilderUtil.extractRegion(iaasInfo);
+		String device = deviceName == null ? "/dev/vdc" : deviceName;
+		
+		if(region == null) {
+			log.fatal("Cannot attach the volume [id]: "+volumeId+" in the [region] : "+region
+					+" of Iaas : "+iaasInfo);
+			return null;
+		}
+		
+		RestContext<NovaApi, NovaAsyncApi> nova = context.unwrap();
+        VolumeAttachmentApi api = nova.getApi().getVolumeAttachmentExtensionForZone(region).get();
+        VolumeAttachment attachment = api.attachVolumeToServerAsDevice(volumeId, instanceId, device);
+        
         if (attachment == null) {
-			log.fatal(String.format("Volume [id]: %s attachment for instance [id]: %s was unsuccessful. [region] : %s of Iaas : %s", volumeId, instanceId, region, iaasInfo));
+			log.fatal("Volume [id]: "+volumeId+" attachment for instance [id]: "+instanceId
+					+" was unsuccessful. [region] : " + region
+					+ " of Iaas : " + iaasInfo);
 			return null;
 		}
-
-        if(! volumeBecameAttached){
-           log.error(String.format("[Volume ID] %s attachment is called, but not yet became attached", volumeId));
-        }
-
-		log.info(String.format("Volume [id]: %s attachment for instance [id]: %s was successful [status]: Attaching. [region] : %s of Iaas : %s", volumeId, instanceId, region, iaasInfo));
+		
+		log.info("Volume [id]: "+volumeId+" attachment for instance [id]: "+instanceId
+				+" was successful [status]: "+"Attaching"+". [region] : " + region
+				+ " of Iaas : " + iaasInfo);
 		return "Attaching";
 	}
 
@@ -698,19 +590,18 @@ public class OpenstackNovaIaas extends Iaas {
 		String region = ComputeServiceBuilderUtil.extractRegion(iaasInfo);
 		
 		if(region == null) {
-			log.fatal(String.format("Cannot detach the volume [id]: %s from the instance [id]: %s of the [region] : %s of Iaas : %s", volumeId, instanceId, region, iaasInfo));
+			log.fatal("Cannot detach the volume [id]: "+volumeId+" from the instance [id]: "+instanceId
+					+" of the [region] : "+region
+					+" of Iaas : "+iaasInfo);
 			return;
 		}
-        if(log.isDebugEnabled()) {
-            log.debug(String.format("Starting to detach volume %s from the instance %s", volumeId, instanceId));
-        }
-
+		
 		RestContext<NovaApi, NovaAsyncApi> nova = context.unwrap();
         VolumeAttachmentApi api = nova.getApi().getVolumeAttachmentExtensionForZone(region).get();
         if (api.detachVolumeFromServer(volumeId, instanceId)) {
-        	log.info(String.format("Detachment of Volume [id]: %s from instance [id]: %s was successful. [region] : %s of Iaas : %s", volumeId, instanceId, region, iaasInfo));
-        }else{
-            log.error(String.format("Detachment of Volume [id]: %s from instance [id]: %s was unsuccessful. [volume Status] : %s", volumeId, instanceId, region, iaasInfo));
+        	log.info("Detachment of Volume [id]: "+volumeId+" from instance [id]: "+instanceId
+    				+" was successful. [region] : " + region
+    				+ " of Iaas : " + iaasInfo);
         }
         
 	}
@@ -725,14 +616,16 @@ public class OpenstackNovaIaas extends Iaas {
 		String region = ComputeServiceBuilderUtil.extractRegion(iaasInfo);
 		
 		if(region == null) {
-			log.fatal(String.format("Cannot delete the volume [id]: %s of the [region] : %s of Iaas : %s", volumeId, region, iaasInfo));
+			log.fatal("Cannot delete the volume [id]: "+volumeId+" of the [region] : "+region
+					+" of Iaas : "+iaasInfo);
 			return;
 		}
 		
 		RestContext<NovaApi, NovaAsyncApi> nova = context.unwrap();
 		VolumeApi api = nova.getApi().getVolumeExtensionForZone(region).get();
         if (api.delete(volumeId)) {
-        	log.info(String.format("Deletion of Volume [id]: %s was successful. [region] : %s of Iaas : %s", volumeId, region, iaasInfo));
+        	log.info("Deletion of Volume [id]: "+volumeId+" was successful. [region] : " + region
+    				+ " of Iaas : " + iaasInfo);
         }
 	}
 
@@ -741,7 +634,4 @@ public class OpenstackNovaIaas extends Iaas {
         return device;
     }
 
-    private Volume.Status getVolumeStatus(VolumeApi volumeApi, String volumeId){
-        return volumeApi.get(volumeId).getStatus();
-    }
 }
diff --git a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/iaases/VCloudIaas.java b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/iaases/VCloudIaas.java
index b3d1384..9332d7f 100644
--- a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/iaases/VCloudIaas.java
+++ b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/iaases/VCloudIaas.java
@@ -231,7 +231,7 @@ public class VCloudIaas extends Iaas {
     }
 
 	@Override
-	public String createVolume(int sizeGB, String snapshotId) {
+	public String createVolume(int sizeGB) {
 		// TODO Auto-generated method stub
 		return null;
 	}
diff --git a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/impl/CloudControllerServiceImpl.java b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/impl/CloudControllerServiceImpl.java
index c721d2b..38a4234 100644
--- a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/impl/CloudControllerServiceImpl.java
+++ b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/impl/CloudControllerServiceImpl.java
@@ -20,7 +20,7 @@ package org.apache.stratos.cloud.controller.impl;
 
 import com.google.common.collect.ImmutableSet;
 import com.google.common.net.InetAddresses;
-import org.apache.commons.lang.StringUtils;
+
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.stratos.cloud.controller.concurrent.PartitionValidatorCallable;
@@ -111,6 +111,7 @@ public class CloudControllerServiceImpl implements CloudControllerService {
 
     public void deployCartridgeDefinition(CartridgeConfig cartridgeConfig) throws InvalidCartridgeDefinitionException, 
     InvalidIaasProviderException {
+
         if (cartridgeConfig == null) {
             String msg = "Invalid Cartridge Definition: Definition is null.";
             log.error(msg);
@@ -201,12 +202,6 @@ public class CloudControllerServiceImpl implements CloudControllerService {
         if((cartridge = dataHolder.getCartridge(cartridgeType)) != null) {
             if (dataHolder.getCartridges().remove(cartridge)) {
                 persist();
-                
-                // sends the service removed event
-                List<Cartridge> cartridgeList = new ArrayList<Cartridge>();
-                cartridgeList.add(cartridge);
-                TopologyBuilder.handleServiceRemoved(cartridgeList);
-                
                 if(log.isInfoEnabled()) {
                     log.info("Successfully undeployed the Cartridge definition: " + cartridgeType);
                 }
@@ -221,7 +216,7 @@ public class CloudControllerServiceImpl implements CloudControllerService {
     @Override
     public MemberContext startInstance(MemberContext memberContext) throws
         UnregisteredCartridgeException, InvalidIaasProviderException {
-
+    	
     	if(log.isDebugEnabled()) {
     		log.debug("CloudControllerServiceImpl:startInstance");
     	}
@@ -276,11 +271,20 @@ public class CloudControllerServiceImpl implements CloudControllerService {
 
         IaasProvider iaasProvider = cartridge.getIaasProviderOfPartition(partitionId);
         if (iaasProvider == null) {
-            String msg =
-                         "Instance start-up failed. " + "There's no IaaS provided for the partition: " + partitionId +
-                         " and for the Cartridge type: " + cartridgeType+". Only following "
-                  		+ "partitions can be found in this Cartridge: "
-                  		+cartridge.getPartitionToIaasProvider().keySet().toString()+ memberContext.toString() + ". ";
+        	if (log.isDebugEnabled()) {
+        		log.debug("IaasToPartitionMap "+cartridge.hashCode()
+        				+ " for cartridge "+cartridgeType+ " and for partition: "+partitionId);
+        	}
+			String msg = "Instance start-up failed. "
+					+ "There's no IaaS provided for the partition: "
+					+ partitionId
+					+ " and for the Cartridge type: "
+					+ cartridgeType
+					+ ". Only following "
+					+ "partitions can be found in this Cartridge: "
+					+ cartridge.getPartitionToIaasProvider().keySet()
+							.toString() + ". " + memberContext.toString()
+					+ ". ";
             log.fatal(msg);
             throw new InvalidIaasProviderException(msg);
         }
@@ -295,12 +299,25 @@ public class CloudControllerServiceImpl implements CloudControllerService {
             addToPayload(payload, "LB_CLUSTER_ID", memberContext.getLbClusterId());
             addToPayload(payload, "NETWORK_PARTITION_ID", memberContext.getNetworkPartitionId());
             addToPayload(payload, "PARTITION_ID", partitionId);
+            if(memberContext.getProperties() != null) {
+            	org.apache.stratos.cloud.controller.pojo.Properties props1 = memberContext.getProperties();
+                if (props1 != null) {
+                    for (Property prop : props1.getProperties()) {
+                        addToPayload(payload, prop.getName(), prop.getValue());
+                    }
+                }
+            }
 
             Iaas iaas = iaasProvider.getIaas();
+            if(ctxt.isVolumeRequired()){
+                addToPayload(payload, "PERSISTENCE_MAPPING", getPersistencePayload(cartridge, iaas).toString());
+            }
             
             if (log.isDebugEnabled()) {
                 log.debug("Payload: " + payload.toString());
             }
+            // reloading the payload with memberID
+            iaasProvider.setPayload(payload.toString().getBytes());
             
             if (iaas == null) {
                 if(log.isDebugEnabled()) {
@@ -316,25 +333,8 @@ public class CloudControllerServiceImpl implements CloudControllerService {
                 }
                 
             }
-
-            if(ctxt.isVolumeRequired()) {
-                if (ctxt.getVolumes() != null) {
-                    for (Volume volume : ctxt.getVolumes()) {
-
-                        if (volume.getId() == null) {
-                            // create a new volume
-                            createVolumeAndSetInClusterContext(volume, iaasProvider);
-                        }
-                    }
-                }
-            }
-
-            if(ctxt.isVolumeRequired()){
-                addToPayload(payload, "PERSISTENCE_MAPPING", getPersistencePayload(ctxt, iaas).toString());
-            }
-            iaasProvider.setPayload(payload.toString().getBytes());
+            
             iaas.setDynamicPayload();
-
             // get the pre built ComputeService from provider or region or zone or host
             computeService = iaasProvider.getComputeService();
             template = iaasProvider.getTemplate();
@@ -354,8 +354,25 @@ public class CloudControllerServiceImpl implements CloudControllerService {
             // Should have a length between 3-15
             String str = clusterId.length() > 10 ? clusterId.substring(0, 10) : clusterId.substring(0, clusterId.length());
             String group = str.replaceAll("[^a-z0-9-]", "");
-
+            
+            if(ctxt.isVolumeRequired()) {
+            	if (ctxt.getVolumes() != null) {
+            		for (Volume volume : ctxt.getVolumes()) {
+						
+            			if (volume.getId() == null) {
+            				// create a new volume
+            				createVolumeAndSetInClusterContext(volume, iaasProvider);
+            			} 
+					}
+            	}
+            }
+            
             NodeMetadata node;
+            
+			if (log.isDebugEnabled()) {
+				log.debug("Cloud Controller is delegating request to start an instance for "
+						+ memberContext + " to Jclouds layer.");
+			}
 
 //            create and start a node
             Set<? extends NodeMetadata> nodes =
@@ -363,9 +380,19 @@ public class CloudControllerServiceImpl implements CloudControllerService {
                                                                                   template);
 
             node = nodes.iterator().next();
+            
+            if (log.isDebugEnabled()) {
+				log.debug("Cloud Controller received a response for the request to start "
+						+ memberContext + " from Jclouds layer.");
+			}
+            
+            
             //Start allocating ip as a new job
 
             ThreadExecutor exec = ThreadExecutor.getInstance();
+            if (log.isDebugEnabled()) {
+				log.debug("Cloud Controller is starting the IP Allocator thread.");
+			}
             exec.execute(new IpAllocator(memberContext, iaasProvider, cartridgeType, node));
 
 
@@ -376,10 +403,11 @@ public class CloudControllerServiceImpl implements CloudControllerService {
                 log.fatal(msg);
                 throw new IllegalStateException(msg);
             }
-                memberContext.setNodeId(nodeId);
-                if(log.isDebugEnabled()) {
-                    log.debug("Node id was set. "+memberContext.toString());
-                }
+            
+			memberContext.setNodeId(nodeId);
+			if (log.isDebugEnabled()) {
+				log.debug("Node id was set. " + memberContext.toString());
+			}
 
                 // attach volumes
 			if (ctxt.isVolumeRequired()) {
@@ -396,7 +424,7 @@ public class CloudControllerServiceImpl implements CloudControllerService {
 						} catch (Exception e) {
 							// continue without throwing an exception, since
 							// there is an instance already running
-							log.error("Attaching Volume " + volume.getId() + " to Instance [ "
+							log.error("Attaching Volume to Instance [ "
 									+ instanceId + " ] failed!", e);
 						}
 					}
@@ -417,52 +445,39 @@ public class CloudControllerServiceImpl implements CloudControllerService {
 
 	private void createVolumeAndSetInClusterContext(Volume volume,
 			IaasProvider iaasProvider) {
+
 		// iaas cannot be null at this state #startInstance method
 		Iaas iaas = iaasProvider.getIaas();
+		
 		int sizeGB = volume.getSize();
-		String snapshotId =  volume.getSnapshotId();
-        if(StringUtils.isNotEmpty(volume.getVolumeId())){
-            // volumeID is specified, so not creating additional volumes
-            if(log.isDebugEnabled()){
-                log.debug("Volume creation is skipping since a volume ID is specified. [Volume ID]" + volume.getVolumeId());
-            }
-            volume.setId(volume.getVolumeId());
-        }else{
-            String volumeId = iaas.createVolume(sizeGB, snapshotId);
-            volume.setId(volumeId);
-        }
-        
+		String volumeId = iaas.createVolume(sizeGB);
+		volume.setId(volumeId);
 		volume.setIaasType(iaasProvider.getType());
 	}
 
-
-    private StringBuilder getPersistencePayload(ClusterContext ctx, Iaas iaas) {
+	private StringBuilder getPersistencePayload(Cartridge cartridge, Iaas iaas) {
 		StringBuilder persistencePayload = new StringBuilder();
-		if(isPersistenceMappingAvailable(ctx)){
-			for(Volume volume : ctx.getVolumes()){
+		if(isPersistenceMappingAvailable(cartridge)){
+			for(Volume volume : cartridge.getPersistence().getVolumes()){
 				if(log.isDebugEnabled()){
 					log.debug("Adding persistence mapping " + volume.toString());
 				}
                 if(persistencePayload.length() != 0) {
                    persistencePayload.append("|");
                 }
-                
 				persistencePayload.append(iaas.getIaasDevice(volume.getDevice()));
 				persistencePayload.append("|");
-                persistencePayload.append(volume.getId());
-                persistencePayload.append("|");
                 persistencePayload.append(volume.getMappingPath());
 			}
 		}
         if(log.isDebugEnabled()){
             log.debug("Persistence payload is" + persistencePayload.toString());
         }
-        System.out.println("****** " + persistencePayload);
 		return persistencePayload;
 	}
 
-	private boolean isPersistenceMappingAvailable(ClusterContext ctx) {
-		return ctx.getVolumes() != null && ctx.isVolumeRequired();
+	private boolean isPersistenceMappingAvailable(Cartridge cartridge) {
+		return cartridge.getPersistence() != null && cartridge.getPersistence().isPersistanceRequired();
 	}
 
 	private void addToPayload(StringBuilder payload, String name, String value) {
@@ -599,7 +614,9 @@ public class CloudControllerServiceImpl implements CloudControllerService {
             String publicIp = null;
 
             try{
-
+            	if (log.isDebugEnabled()) {
+    				log.debug("IP allocation process started for "+memberContext);
+    			}
                 String autoAssignIpProp =
                                           iaasProvider.getProperty(CloudControllerConstants.AUTO_ASSIGN_IP_PROPERTY);
                 
@@ -687,11 +704,12 @@ public class CloudControllerServiceImpl implements CloudControllerService {
                     // persist in registry
                     persist();
 
-                    String memberID = memberContext.getMemberId();
 
                     // trigger topology
-                    TopologyBuilder.handleMemberSpawned(memberID, cartridgeType, clusterId, memberContext.getNetworkPartitionId(),
-                            partition.getId(), ip, memberContext.getLbClusterId(),publicIp);
+                    TopologyBuilder.handleMemberSpawned(cartridgeType, clusterId, 
+                    		partition.getId(), ip, publicIp, memberContext);
+                    
+                    String memberID = memberContext.getMemberId();
 
                     // update the topology with the newly spawned member
                     // publish data
@@ -703,14 +721,18 @@ public class CloudControllerServiceImpl implements CloudControllerService {
                                                         MemberStatus.Created.toString(),
                                                         node);
                     if (log.isDebugEnabled()) {
-                        log.debug("Node details: \n" + node.toString());
+                        log.debug("Node details: " + node.toString());
                     }
+                    
+                    if (log.isDebugEnabled()) {
+        				log.debug("IP allocation process ended for "+memberContext);
+        			}
 
             } catch (Exception e) {
                 String msg = "Error occurred while allocating an ip address. " + memberContext.toString();
                 log.error(msg, e);
                 throw new CloudControllerException(msg, e);
-            }
+            } 
 
 
         }
@@ -793,6 +815,7 @@ public class CloudControllerServiceImpl implements CloudControllerService {
 		ClusterContext clusterCtxt = dataHolder.getClusterContext(clusterId);
 		if (clusterCtxt.getVolumes() != null) {
 			for (Volume volume : clusterCtxt.getVolumes()) {
+				
 				try {
 					String volumeId = volume.getId();
 					if (volumeId == null) {
@@ -863,7 +886,7 @@ public class CloudControllerServiceImpl implements CloudControllerService {
         boolean isLb = property != null ? Boolean.parseBoolean(property) : false;
 
         ClusterContext ctxt = buildClusterContext(cartridge, clusterId,
-				payload, hostName, props, isLb, registrant.getPersistence());
+				payload, hostName, props, isLb);
 
 
 		dataHolder.addClusterContext(ctxt);
@@ -877,8 +900,8 @@ public class CloudControllerServiceImpl implements CloudControllerService {
 	}
 
 	private ClusterContext buildClusterContext(Cartridge cartridge,
-                                               String clusterId, String payload, String hostName,
-                                               Properties props, boolean isLb, Persistence persistence) {
+			String clusterId, String payload, String hostName,
+			Properties props, boolean isLb) {
 
 
 		// initialize ClusterContext
@@ -888,65 +911,40 @@ public class CloudControllerServiceImpl implements CloudControllerService {
 		String property;
 		property = props.getProperty(Constants.GRACEFUL_SHUTDOWN_TIMEOUT);
 		long timeout = property != null ? Long.parseLong(property) : 30000;
-
-        boolean persistanceRequired = false;
-        if(persistence != null){
-              persistanceRequired = persistence.isPersistanceRequired();
-        }
-
-        if(persistanceRequired){
-            ctxt.setVolumes(persistence.getVolumes());
-            ctxt.setVolumeRequired(true);
-        }else{
-            ctxt.setVolumeRequired(false);
-        }
-        /*
-        if(persistanceRequired) {
+		
+		property = props.getProperty(Constants.IS_VOLUME_REQUIRED);
+        boolean isVolumeRequired = property != null ? Boolean.parseBoolean(property) : false;
+        
+        if(isVolumeRequired) {
         	Persistence persistenceData = cartridge.getPersistence();
-
+        	
         	if(persistenceData != null) {
-        		Volume[] cartridge_volumes = persistenceData.getVolumes();
-
-
-                Volume[] volumestoCreate = overideVolumes(cartridge_volumes, persistence.getVolumes());
+        		Volume[] volumes = persistenceData.getVolumes();
+        		
         		property = props.getProperty(Constants.SHOULD_DELETE_VOLUME);
-        		String property_volume_zize = props.getProperty(Constants.VOLUME_SIZE);
-                String property_volume_id = props.getProperty(Constants.VOLUME_ID);
-
-                List<Volume> cluster_volume_list = new LinkedList<Volume>();
-
-        		for (Volume volume : cartridge_volumes) {
-        			int volumeSize = StringUtils.isNotEmpty(property_volume_zize) ? Integer.parseInt(property_volume_zize) : volume.getSize();
-        			boolean shouldDeleteVolume = StringUtils.isNotEmpty(property) ? Boolean.parseBoolean(property) : volume.isRemoveOntermination();
-                    String volumeID = StringUtils.isNotEmpty(property_volume_id) ? property_volume_id : volume.getVolumeId();
-
-                    Volume volume_cluster = new Volume();
-                    volume_cluster.setSize(volumeSize);
-                    volume_cluster.setRemoveOntermination(shouldDeleteVolume);
-                    volume_cluster.setDevice(volume.getDevice());
-                    volume_cluster.setIaasType(volume.getIaasType());
-                    volume_cluster.setMappingPath(volume.getMappingPath());
-                    volume_cluster.setVolumeId(volumeID);
-                    cluster_volume_list.add(volume_cluster);
+        		property = props.getProperty(Constants.VOLUME_SIZE);
+        		
+        		for (Volume volume : volumes) {
+        			int volumeSize = property != null ? Integer.parseInt(property) : volume.getSize();
+        			boolean shouldDeleteVolume = property != null ? Boolean.parseBoolean(property) : volume.isRemoveOntermination();
+        			volume.setSize(volumeSize);
+        			volume.setRemoveOntermination(shouldDeleteVolume);
 				}
-        		//ctxt.setVolumes(cluster_volume_list.toArray(new Volume[cluster_volume_list.size()]));
-                ctxt.setVolumes(persistence.getVolumes());
-                ctxt.setVolumeRequired(true);
+        		ctxt.setVolumes(volumes);
         	} else {
         		// if we cannot find necessary data, we would not consider 
         		// this as a volume required instance.
-        		//isVolumeRequired = false;
-                ctxt.setVolumeRequired(false);
-       	}
-
-        	//ctxt.setVolumeRequired(isVolumeRequired);
+        		isVolumeRequired = false;
+        	}
+        	
+        	ctxt.setVolumeRequired(isVolumeRequired);
         }
-        */
+        
 	    ctxt.setTimeoutInMillis(timeout);
 		return ctxt;
 	}
 
-    @Override
+	@Override
 	public String[] getRegisteredCartridges() {
 		// get the list of cartridges registered
 		List<Cartridge> cartridges = dataHolder
@@ -988,6 +986,7 @@ public class CloudControllerServiceImpl implements CloudControllerService {
     @Override
 	public void unregisterService(String clusterId) throws UnregisteredClusterException {
         final String clusterId_ = clusterId;
+        TopologyBuilder.handleClusterMaintenanceMode(dataHolder.getClusterContext(clusterId_));
 
         Runnable terminateInTimeout = new Runnable() {
             @Override
@@ -1060,19 +1059,14 @@ public class CloudControllerServiceImpl implements CloudControllerService {
                          for (Volume volume : ctxt.getVolumes()) {
                             if(volume.getId() != null) {
                                 String iaasType = volume.getIaasType();
-                                //Iaas iaas = dataHolder.getIaasProvider(iaasType).getIaas();
-                                Iaas iaas = cartridge.getIaasProvider(iaasType).getIaas();
+                                Iaas iaas = dataHolder.getIaasProvider(iaasType).getIaas();
                                 if(iaas != null) {
                                     try {
-                                    // delete the volumes if remove on unsubscription is true.
-                                    if(volume.isRemoveOntermination())
-                                    {
-                                        iaas.deleteVolume(volume.getId());
-                                        volume.setId(null);
-                                    }
+                                    // delete the volume
+                                    iaas.deleteVolume(volume.getId());
                                     } catch(Exception ignore) {
-                                        if(log.isErrorEnabled()) {
-                                            log.error("Error while deleting volume [id] "+ volume.getId(), ignore);
+                                        if(log.isDebugEnabled()) {
+                                            log.debug(ignore);
                                         }
                                     }
                                 }
@@ -1095,6 +1089,10 @@ public class CloudControllerServiceImpl implements CloudControllerService {
 
         Map<String, IaasProvider> partitionToIaasProviders =
                                                              new ConcurrentHashMap<String, IaasProvider>();
+        
+        if (log.isDebugEnabled()) {
+			log.debug("Deployment policy validation started for cartridge type: "+cartridgeType);
+		}
 
         Cartridge cartridge = dataHolder.getCartridge(cartridgeType);
 
@@ -1120,6 +1118,9 @@ public class CloudControllerServiceImpl implements CloudControllerService {
             try {
             	// add to a temporary Map
             	partitionToIaasProviders.put(partitionId, job.get());
+				if (log.isDebugEnabled()) {
+					log.debug("Partition "+partitionId+" added to the map.");
+				}
             } catch (Exception e) {
                 log.error(e.getMessage(), e);
                 throw new InvalidPartitionException(e.getMessage(), e);
diff --git a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/interfaces/Iaas.java b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/interfaces/Iaas.java
index 1ae7dc5..492171d 100644
--- a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/interfaces/Iaas.java
+++ b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/interfaces/Iaas.java
@@ -141,7 +141,7 @@ public abstract class Iaas {
      * @param sizeGB size of the volume in Giga Bytes.
      * @return Id of the created volume.
      */
-    public abstract String createVolume(int sizeGB, String snapshotId);
+    public abstract String createVolume(int sizeGB);
    
     /**
      * Attach a given volume to an instance at the specified device path.
diff --git a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/internal/CloudControllerDSComponent.java b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/internal/CloudControllerDSComponent.java
index 0c9f5c2..35e22dd 100644
--- a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/internal/CloudControllerDSComponent.java
+++ b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/internal/CloudControllerDSComponent.java
@@ -84,7 +84,7 @@ public class CloudControllerDSComponent {
             Thread tdelegator = new Thread(delegator);
             tdelegator.start();
         	
-        	// Register cloud controller service
+        	// Register cloud controller service                                                   E
             BundleContext bundleContext = context.getBundleContext();
             bundleContext.registerService(CloudControllerService.class.getName(), new CloudControllerServiceImpl(), null);
 
diff --git a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/pojo/Cartridge.java b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/pojo/Cartridge.java
index 46424e7..dafaa2c 100644
--- a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/pojo/Cartridge.java
+++ b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/pojo/Cartridge.java
@@ -19,6 +19,8 @@
 package org.apache.stratos.cloud.controller.pojo;
 
 import org.apache.commons.lang.builder.HashCodeBuilder;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 
 import java.io.Serializable;
 import java.util.*;
@@ -29,6 +31,7 @@ import java.util.concurrent.ConcurrentHashMap;
  */
 public class Cartridge implements Serializable{
 
+	private transient static final Log log = LogFactory.getLog(Cartridge.class);
     private static final long serialVersionUID = 6637409027085059072L;
 
 	private String type;
@@ -53,25 +56,25 @@ public class Cartridge implements Serializable{
     
     private LoadbalancerConfig lbConfig;
     
-    private List<PortMapping> portMappings = new ArrayList<PortMapping>();
+    private List<PortMapping> portMappings;
     
     private Persistence persistence;
     
-    private List<AppType> appTypeMappings = new ArrayList<AppType>();
+    private List<AppType> appTypeMappings;
     
     private String serviceGroup;
     
     /**
      * Property map of this Cartridge.
      */
-    private Map<String, String> properties = new HashMap<String, String>();
+    private Map<String, String> properties;
     
     /**
      * A Cartridge can have 1..n {@link IaasProvider}s
      */
-    private List<IaasProvider> iaases = new ArrayList<IaasProvider>();
+    private List<IaasProvider> iaases;
     
-    private List<String> deploymentDirs = new ArrayList<String>();
+    private List<String> deploymentDirs;
     
     private IaasProvider lastlyUsedIaas;
     
@@ -79,9 +82,11 @@ public class Cartridge implements Serializable{
      * Key - partition id
      * Value - Corresponding IaasProvider.
      */
-    private Map<String, IaasProvider> partitionToIaasProvider = new ConcurrentHashMap<String, IaasProvider>();
+    private Map<String, IaasProvider> partitionToIaasProvider;
     
-    public Cartridge(){}
+    public Cartridge(){
+    	init();
+    }
     
     public Cartridge(String type, String host, String provider, String version, boolean multiTenant) {
         this.type = type;
@@ -89,6 +94,17 @@ public class Cartridge implements Serializable{
         this.provider = provider;
         this.version = version;
         this.multiTenant = multiTenant;
+        init();
+    }
+    
+    private void init() {
+    	partitionToIaasProvider = new ConcurrentHashMap<String, IaasProvider>();
+    	portMappings = new ArrayList<PortMapping>();
+    	portMappings = new ArrayList<PortMapping>();
+    	appTypeMappings = new ArrayList<AppType>();
+    	properties = new HashMap<String, String>();
+    	iaases = new ArrayList<IaasProvider>();
+    	deploymentDirs = new ArrayList<String>();
     }
 
     public String getType() {
@@ -109,10 +125,18 @@ public class Cartridge implements Serializable{
             IaasProvider value = map.get(key);
             
             partitionToIaasProvider.put(key, value);
+            if(log.isDebugEnabled()) {
+            	log.debug("Partition map updated for the Cartridge: "+this.hashCode()+". "
+            			+ "Current Partition List: "+partitionToIaasProvider.keySet().toString());
+            }
         }
     }
     
     public IaasProvider getIaasProviderOfPartition(String partitionId) {
+    	if(log.isDebugEnabled()) {
+        	log.debug("Retrieving partition: "+partitionId+" for the Cartridge: "+this.hashCode()+". "
+        			+ "Current Partition List: "+partitionToIaasProvider.keySet().toString());
+        }
         return partitionToIaasProvider.get(partitionId);
     }
     
@@ -160,7 +184,19 @@ public class Cartridge implements Serializable{
         return iaases;
     }
 
-    public void setIaases(List<IaasProvider> iaases) {
+    @Override
+	public String toString() {
+		return "Cartridge [type=" + type + ", hostName=" + hostName
+				+ ", provider=" + provider + ", version=" + version
+				+ ", multiTenant=" + multiTenant
+				+ ", defaultAutoscalingPolicy=" + defaultAutoscalingPolicy
+				+ ", defaultDeploymentPolicy=" + defaultDeploymentPolicy
+				+ ", serviceGroup=" + serviceGroup + ", properties="
+				+ properties + ", partitionToIaasProvider="
+				+ partitionToIaasProvider + "]";
+	}
+
+	public void setIaases(List<IaasProvider> iaases) {
         this.iaases = iaases;
     }
     
diff --git a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/pojo/CartridgeInfo.java b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/pojo/CartridgeInfo.java
index d2d3603..0064b2e 100644
--- a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/pojo/CartridgeInfo.java
+++ b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/pojo/CartridgeInfo.java
@@ -58,6 +58,8 @@ public class CartridgeInfo {
 
     private Persistence persistence;
 
+    private String serviceGroup;
+
     public CartridgeInfo(){
     	
     }
@@ -206,4 +208,12 @@ public class CartridgeInfo {
     public void setPersistence(Persistence persistence) {
         this.persistence = persistence;
     }
+
+    public String getServiceGroup() {
+        return serviceGroup;
+    }
+
+    public void setServiceGroup(String serviceGroup) {
+        this.serviceGroup = serviceGroup;
+    }
 }
diff --git a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/pojo/MemberContext.java b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/pojo/MemberContext.java
index 2618bb2..e3d67f1 100644
--- a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/pojo/MemberContext.java
+++ b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/pojo/MemberContext.java
@@ -54,6 +54,8 @@ public class MemberContext implements Serializable{
     private String lbClusterId;
     //network partition id
     private String networkPartitionId;
+
+    private Properties properties;
     
     public MemberContext(String id, String clusterId, Partition partition) {
         this.memberId = id;
@@ -200,4 +202,12 @@ public class MemberContext implements Serializable{
 	public void setInstanceId(String instanceId) {
 		this.instanceId = instanceId;
 	}
+
+    public Properties getProperties() {
+        return properties;
+    }
+
+    public void setProperties(Properties properties) {
+        this.properties = properties;
+    }
 }
diff --git a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/pojo/Registrant.java b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/pojo/Registrant.java
index 2c3458a..fe7a7e9 100644
--- a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/pojo/Registrant.java
+++ b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/pojo/Registrant.java
@@ -33,7 +33,6 @@ public class Registrant {
     private Properties properties;
     private String autoScalerPolicyName;
     private String deploymentPolicyName;
-    private Persistence persistence;
     
     public String getTenantRange() {
         return tenantRange;
@@ -92,12 +91,4 @@ public class Registrant {
                properties + ", autoScalerPolicyName=" + autoScalerPolicyName +
                ", deploymentPolicyName=" + deploymentPolicyName + "]";
     }
-
-    public Persistence getPersistence() {
-        return persistence;
-    }
-
-    public void setPersistence(Persistence persistence) {
-        this.persistence = persistence;
-    }
 }
diff --git a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/pojo/Volume.java b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/pojo/Volume.java
index b5e3b29..b35f965 100644
--- a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/pojo/Volume.java
+++ b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/pojo/Volume.java
@@ -29,12 +29,10 @@ public class Volume implements Serializable {
 	private boolean removeOntermination;
     private String mappingPath;
     private String iaasType;
-    private String snapshotId;
-    private String volumeId;
 
     public String toString () {
         return "Persistence Required: " + ", Size: " + getSize() + ", device: " + getDevice() +
-                " mapping path : " + mappingPath + " remove on termination " + isRemoveOntermination() + " SnaphotId " + snapshotId;
+                " mapping path : " + mappingPath + " remove on termination " + isRemoveOntermination();
     }
 
     public int getSize() {
@@ -53,7 +51,9 @@ public class Volume implements Serializable {
         this.device = device;
     }
 
-    public boolean isRemoveOntermination() {return removeOntermination;}
+    public boolean isRemoveOntermination() {
+        return removeOntermination;
+    }
 
     public void setRemoveOntermination(boolean removeOntermination) {
         this.removeOntermination = removeOntermination;
@@ -107,20 +107,4 @@ public class Volume implements Serializable {
 	public void setIaasType(String iaasType) {
 		this.iaasType = iaasType;
 	}
-
-	public String getSnapshotId() {
-		return snapshotId;
-	}
-
-	public void setSnapshotId(String snapshotId) {
-		this.snapshotId = snapshotId;
-	}
-
-    public String getVolumeId() {
-        return volumeId;
-    }
-
-    public void setVolumeId(String volumeId) {
-        this.volumeId = volumeId;
-    }
 }
diff --git a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/publisher/CartridgeInstanceDataPublisher.java b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/publisher/CartridgeInstanceDataPublisher.java
index 79546c8..69c9863 100644
--- a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/publisher/CartridgeInstanceDataPublisher.java
+++ b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/publisher/CartridgeInstanceDataPublisher.java
@@ -75,7 +75,8 @@ public class CartridgeInstanceDataPublisher {
                 return;
             }
         }
-        Cartridge cartridge = FasterLookUpDataHolder.getInstance().getCartridge(serviceName);
+        Cartridge cartridge = null;
+        cartridge = FasterLookUpDataHolder.getInstance().getCartridge(serviceName);
 
         MemberContext memberContext = FasterLookUpDataHolder.getInstance().getMemberContextOfMemberId(memberId);
         //Construct the data to be published
@@ -135,7 +136,6 @@ public class CartridgeInstanceDataPublisher {
                 log.error(String.format("Could not publish BAM event: [stream] %s [version] %s", streamDefinition.getName(), streamDefinition.getVersion()), e);
             }
         }
-
     }
     
     private static void release(){
diff --git a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/topology/TopologyBuilder.java b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/topology/TopologyBuilder.java
index 11a2ebd..39e403c 100644
--- a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/topology/TopologyBuilder.java
+++ b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/topology/TopologyBuilder.java
@@ -22,11 +22,7 @@ import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.stratos.cloud.controller.exception.InvalidCartridgeTypeException;
 import org.apache.stratos.cloud.controller.exception.InvalidMemberException;
-import org.apache.stratos.cloud.controller.impl.CloudControllerServiceImpl;
-import org.apache.stratos.cloud.controller.pojo.Cartridge;
-import org.apache.stratos.cloud.controller.pojo.ClusterContext;
-import org.apache.stratos.cloud.controller.pojo.PortMapping;
-import org.apache.stratos.cloud.controller.pojo.Registrant;
+import org.apache.stratos.cloud.controller.pojo.*;
 import org.apache.stratos.cloud.controller.publisher.CartridgeInstanceDataPublisher;
 import org.apache.stratos.cloud.controller.runtime.FasterLookUpDataHolder;
 import org.apache.stratos.cloud.controller.util.CloudControllerUtil;
@@ -38,8 +34,10 @@ import org.apache.stratos.messaging.event.instance.status.InstanceStartedEvent;
 import org.apache.stratos.messaging.event.topology.MemberActivatedEvent;
 import org.apache.stratos.messaging.event.topology.MemberMaintenanceModeEvent;
 import org.apache.stratos.messaging.event.topology.MemberReadyToShutdownEvent;
+import org.apache.stratos.messaging.util.Constants;
 
 import java.util.List;
+import java.util.Map;
 import java.util.Properties;
 
 /**
@@ -63,7 +61,12 @@ public class TopologyBuilder {
             for (Cartridge cartridge : cartridgeList) {
                 if (!topology.serviceExists(cartridge.getType())) {
                     service = new Service(cartridge.getType(), cartridge.isMultiTenant() ? ServiceType.MultiTenant : ServiceType.SingleTenant);
-                     List<PortMapping> portMappings = cartridge.getPortMappings();
+                    List<PortMapping> portMappings = cartridge.getPortMappings();
+                    Properties properties = new Properties();
+                    for (Map.Entry<String, String> entry : cartridge.getProperties().entrySet()) {
+                        properties.setProperty(entry.getKey(), entry.getValue());
+                    }
+                    service.setProperties(properties);
                     Port port;
                     //adding ports to the event
                     for (PortMapping portMapping : portMappings) {
@@ -125,6 +128,9 @@ public class TopologyBuilder {
                 if(service.getServiceType() == ServiceType.MultiTenant) {
                     cluster.setTenantRange(registrant.getTenantRange());
                 }
+                if(service.getProperties().getProperty(Constants.IS_PRIMARY) != null) {
+                    props.setProperty(Constants.IS_PRIMARY, service.getProperties().getProperty(Constants.IS_PRIMARY));
+                }
                 cluster.setProperties(props);
                 cluster.setLbCluster(isLb);
             } else {
@@ -134,8 +140,12 @@ public class TopologyBuilder {
                 if(service.getServiceType() == ServiceType.MultiTenant) {
                     cluster.setTenantRange(registrant.getTenantRange());
                 }
+                if(service.getProperties().getProperty(Constants.IS_PRIMARY) != null) {
+                    props.setProperty(Constants.IS_PRIMARY, service.getProperties().getProperty(Constants.IS_PRIMARY));
+                }
                 cluster.setProperties(props);
                 cluster.setLbCluster(isLb);
+                cluster.setStatus(ClusterStatus.Created);
                 service.addCluster(cluster);
             }
             TopologyManager.updateTopology(topology);
@@ -174,33 +184,72 @@ public class TopologyBuilder {
         TopologyEventPublisher.sendClusterRemovedEvent(ctxt, deploymentPolicy);
     }
 
-    public static void handleMemberSpawned(String memberId, String serviceName, String clusterId,
-                                           String networkPartitionId, String partitionId, String privateIp, String lbClusterId, String publicIp) {
-        //adding the new member to the cluster after it is successfully started in IaaS.
+    public static void handleClusterMaintenanceMode(ClusterContext ctxt) {
+
         Topology topology = TopologyManager.getTopology();
-        Service service = topology.getService(serviceName);
-        Cluster cluster = service.getCluster(clusterId);
+        Service service = topology.getService(ctxt.getCartridgeType());
+        if (service == null) {
+            log.warn(String.format("Service %s does not exist",
+                    ctxt.getCartridgeType()));
+            return;
+        }
 
-        if (cluster.memberExists(memberId)) {
-        	log.warn(String.format("Member %s already exists", memberId));
-        	return;
+        if (!service.clusterExists(ctxt.getClusterId())) {
+            log.warn(String.format("Cluster %s does not exist for service %s",
+                    ctxt.getClusterId(),
+                    ctxt.getCartridgeType()));
+            return;
         }
 
         try {
             TopologyManager.acquireWriteLock();
-            Member member = new Member(serviceName, clusterId, networkPartitionId, partitionId, memberId);
-            member.setStatus(MemberStatus.Created);
-            member.setMemberIp(privateIp);
-            member.setLbClusterId(lbClusterId);
-            member.setMemberPublicIp(publicIp);
-            cluster.addMember(member);
+            Cluster cluster = service.getCluster(ctxt.getClusterId());
+            cluster.setStatus(ClusterStatus.In_Maintenance);
             TopologyManager.updateTopology(topology);
         } finally {
             TopologyManager.releaseWriteLock();
         }
-        TopologyEventPublisher.sendInstanceSpawnedEvent(serviceName, clusterId, networkPartitionId, partitionId, memberId, lbClusterId, publicIp, privateIp);
+        TopologyEventPublisher.sendClusterMaintenanceModeEvent(ctxt);
     }
 
+
+	public static void handleMemberSpawned(String serviceName,
+			String clusterId, String partitionId,
+			String privateIp, String publicIp, MemberContext context) {
+		// adding the new member to the cluster after it is successfully started
+		// in IaaS.
+		Topology topology = TopologyManager.getTopology();
+		Service service = topology.getService(serviceName);
+		Cluster cluster = service.getCluster(clusterId);
+		String memberId = context.getMemberId();
+		String networkPartitionId = context.getNetworkPartitionId();
+		String lbClusterId = context.getLbClusterId();
+
+		if (cluster.memberExists(memberId)) {
+			log.warn(String.format("Member %s already exists", memberId));
+			return;
+		}
+
+		try {
+			TopologyManager.acquireWriteLock();
+			Member member = new Member(serviceName, clusterId,
+					networkPartitionId, partitionId, memberId);
+			member.setStatus(MemberStatus.Created);
+			member.setMemberIp(privateIp);
+			member.setLbClusterId(lbClusterId);
+			member.setMemberPublicIp(publicIp);
+			member.setProperties(CloudControllerUtil.toJavaUtilProperties(context.getProperties()));
+			cluster.addMember(member);
+			TopologyManager.updateTopology(topology);
+		} finally {
+			TopologyManager.releaseWriteLock();
+		}
+		
+		TopologyEventPublisher.sendInstanceSpawnedEvent(serviceName, clusterId,
+				networkPartitionId, partitionId, memberId, lbClusterId,
+				publicIp, privateIp, context);
+	}
+    
     public static void handleMemberStarted(InstanceStartedEvent instanceStartedEvent) {
         Topology topology = TopologyManager.getTopology();
         Service service = topology.getService(instanceStartedEvent.getServiceName());
@@ -353,7 +402,6 @@ public class TopologyBuilder {
                                             instanceReadyToShutdownEvent.getServiceName(),
                                             MemberStatus.ReadyToShutDown.toString(),
                                             null);
-        //termination of particular instance will be handled by autoscaler
     }
 
      public static void handleMemberMaintenance(InstanceMaintenanceModeEvent instanceMaintenanceModeEvent)
@@ -403,6 +451,7 @@ public class TopologyBuilder {
     public static void handleMemberTerminated(String serviceName, String clusterId, String networkPartitionId, String partitionId, String memberId) {
         Topology topology = TopologyManager.getTopology();
         Service service = topology.getService(serviceName);
+        Properties properties;
         if (service == null) {
             log.warn(String.format("Service %s does not exist",
                                                      serviceName));
@@ -425,12 +474,13 @@ public class TopologyBuilder {
 
         try {
             TopologyManager.acquireWriteLock();
+            properties = member.getProperties();
             cluster.removeMember(member);
             TopologyManager.updateTopology(topology);
         } finally {
             TopologyManager.releaseWriteLock();
         }
-        TopologyEventPublisher.sendMemberTerminatedEvent(serviceName, clusterId, networkPartitionId, partitionId, memberId);
+        TopologyEventPublisher.sendMemberTerminatedEvent(serviceName, clusterId, networkPartitionId, partitionId, memberId, properties);
     }
 
     public static void handleMemberSuspended() {
diff --git a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/topology/TopologyEventPublisher.java b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/topology/TopologyEventPublisher.java
index 86237d8..fe86198 100644
--- a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/topology/TopologyEventPublisher.java
+++ b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/topology/TopologyEventPublisher.java
@@ -21,19 +21,19 @@ import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.stratos.cloud.controller.pojo.Cartridge;
 import org.apache.stratos.cloud.controller.pojo.ClusterContext;
+import org.apache.stratos.cloud.controller.pojo.MemberContext;
 import org.apache.stratos.cloud.controller.pojo.PortMapping;
+import org.apache.stratos.cloud.controller.util.CloudControllerUtil;
 import org.apache.stratos.messaging.broker.publish.EventPublisher;
 import org.apache.stratos.messaging.broker.publish.EventPublisherPool;
-import org.apache.stratos.messaging.domain.topology.Cluster;
-import org.apache.stratos.messaging.domain.topology.Port;
-import org.apache.stratos.messaging.domain.topology.ServiceType;
-import org.apache.stratos.messaging.domain.topology.Topology;
+import org.apache.stratos.messaging.domain.topology.*;
 import org.apache.stratos.messaging.event.Event;
 import org.apache.stratos.messaging.event.instance.status.InstanceStartedEvent;
 import org.apache.stratos.messaging.event.topology.*;
 import org.apache.stratos.messaging.util.Constants;
 
 import java.util.List;
+import java.util.Properties;
 
 /**
  * this is to send the relevant events from cloud controller to topology topic
@@ -96,12 +96,25 @@ public class TopologyEventPublisher {
 
     }
 
+    public static void sendClusterMaintenanceModeEvent(ClusterContext ctxt) {
+
+        ClusterMaintenanceModeEvent clusterMaintenanceModeEvent = new ClusterMaintenanceModeEvent(ctxt.getCartridgeType(), ctxt.getClusterId());
+        clusterMaintenanceModeEvent.setStatus(ClusterStatus.In_Maintenance);
+        if(log.isInfoEnabled()) {
+            log.info(String.format("Publishing cluster maintenance mode event: [service] %s [cluster] %s",
+                    clusterMaintenanceModeEvent.getServiceName(), clusterMaintenanceModeEvent.getClusterId()));
+        }
+        publishEvent(clusterMaintenanceModeEvent);
+
+    }
+
     public static void sendInstanceSpawnedEvent(String serviceName, String clusterId, String networkPartitionId, String partitionId, String memberId,
-    		String lbClusterId, String publicIp, String privateIp) {
+    		String lbClusterId, String publicIp, String privateIp, MemberContext context) {
         InstanceSpawnedEvent instanceSpawnedEvent = new InstanceSpawnedEvent(serviceName, clusterId, networkPartitionId, partitionId, memberId);
         instanceSpawnedEvent.setLbClusterId(lbClusterId);
         instanceSpawnedEvent.setMemberIp(privateIp);
         instanceSpawnedEvent.setMemberPublicIp(publicIp);
+        instanceSpawnedEvent.setProperties(CloudControllerUtil.toJavaUtilProperties(context.getProperties()));
         if(log.isInfoEnabled()) {
             log.info(String.format("Publishing instance spawned event: [service] %s [cluster] %s [network-partition] %s [partition] %s [member] %s [lb-cluster-id] %s",
                     serviceName, clusterId, networkPartitionId, partitionId, memberId, lbClusterId));
@@ -145,8 +158,10 @@ public class TopologyEventPublisher {
        }
 
 
-    public static void sendMemberTerminatedEvent(String serviceName, String clusterId, String networkPartitionId, String partitionId, String memberId) {
+    public static void sendMemberTerminatedEvent(String serviceName, String clusterId, String networkPartitionId,
+                                                 String partitionId, String memberId, Properties properties) {
         MemberTerminatedEvent memberTerminatedEvent = new MemberTerminatedEvent(serviceName, clusterId, networkPartitionId, partitionId, memberId);
+        memberTerminatedEvent.setProperties(properties);
         if(log.isInfoEnabled()) {
             log.info(String.format("Publishing member terminated event: [service] %s [cluster] %s [network-partition] %s [partition] %s [member] %s", serviceName, clusterId, networkPartitionId, partitionId, memberId));
         }
diff --git a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/util/CloudControllerUtil.java b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/util/CloudControllerUtil.java
index e770fd1..3a423e0 100644
--- a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/util/CloudControllerUtil.java
+++ b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/util/CloudControllerUtil.java
@@ -185,6 +185,7 @@ public class CloudControllerUtil {
 		carInfo.setAppTypes(cartridge.getAppTypeMappings()
                                 .toArray(new AppType[cartridge.getAppTypeMappings()
                                                                   .size()]));
+        carInfo.setServiceGroup(cartridge.getServiceGroup());
 		
 		List<Property> propList = new ArrayList<Property>();
         carInfo.setPersistence(cartridge.getPersistence());
@@ -296,9 +297,7 @@ public class CloudControllerUtil {
         if (properties != null && properties.getProperties() != null) {
 
             for (org.apache.stratos.cloud.controller.pojo.Property property : properties.getProperties()) {
-                if(property.getValue() != null){
-                    javaProps.put(property.getName(), property.getValue());
-                }
+                javaProps.put(property.getName(), property.getValue());
             }
 
         }
diff --git a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/validate/AWSEC2PartitionValidator.java b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/validate/AWSEC2PartitionValidator.java
index 0a251a6..28d92cf 100644
--- a/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/validate/AWSEC2PartitionValidator.java
+++ b/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/validate/AWSEC2PartitionValidator.java
@@ -20,6 +20,7 @@ package org.apache.stratos.cloud.controller.validate;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.stratos.cloud.controller.exception.InvalidIaasProviderException;
 import org.apache.stratos.cloud.controller.exception.InvalidPartitionException;
 import org.apache.stratos.cloud.controller.interfaces.Iaas;
 import org.apache.stratos.cloud.controller.pojo.IaasProvider;
@@ -73,6 +74,8 @@ public class AWSEC2PartitionValidator implements PartitionValidator {
                     updatedIaas.setIaasProvider(updatedIaasProvider);
                 } 
                 
+                updateOtherProperties(updatedIaasProvider, properties);
+                
                 return updatedIaasProvider;
                 
             } else {
@@ -87,7 +90,32 @@ public class AWSEC2PartitionValidator implements PartitionValidator {
         
     }
 
-    @Override
+    private void updateOtherProperties(IaasProvider updatedIaasProvider,
+			Properties properties) {
+    	Iaas updatedIaas;
+		try {
+			updatedIaas = CloudControllerUtil.getIaas(updatedIaasProvider);
+
+			for (Object property : properties.keySet()) {
+				if (property instanceof String) {
+					String key = (String) property;
+					if (!Scope.zone.toString().equals(key)) {
+						updatedIaasProvider.setProperty(key,
+								properties.getProperty(key));
+						if (log.isDebugEnabled()) {
+							log.debug("Added property "+key+ " to the IaasProvider.");
+						}
+					}
+				}
+			}
+			updatedIaas = CloudControllerUtil.getIaas(updatedIaasProvider);
+			updatedIaas.setIaasProvider(updatedIaasProvider);
+		} catch (InvalidIaasProviderException ignore) {
+		}
+    	
+	}
+
+	@Override
     public void setIaasProvider(IaasProvider iaas) {
         this.iaasProvider = iaas;
         this.iaas = iaas.getIaas();
diff --git a/components/org.apache.stratos.common/pom.xml b/components/org.apache.stratos.common/pom.xml
index c39b9f8..47e0292 100644
--- a/components/org.apache.stratos.common/pom.xml
+++ b/components/org.apache.stratos.common/pom.xml
@@ -20,7 +20,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/util/CommandUtils.java b/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/util/CommandUtils.java
index 0eaf369..d581057 100644
--- a/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/util/CommandUtils.java
+++ b/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/util/CommandUtils.java
@@ -25,6 +25,7 @@ import org.apache.commons.logging.LogFactory;
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.util.Map;
 
 /**
  * A utility class for executing shell commands.
@@ -63,4 +64,33 @@ public class CommandUtils {
 
         return output.toString();
     }
+
+    public static String executeCommand(String command, Map<String, String> envParameters) throws IOException {
+        String line;
+        ProcessBuilder pb = new ProcessBuilder(command);
+        Map<String, String> env = pb.environment();
+        env.putAll(envParameters);
+
+        Process p = pb.start();
+        StringBuilder output = new StringBuilder();
+        BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
+        while ((line = in.readLine()) != null) {
+            if (log.isDebugEnabled()) {
+                log.debug("output = " + line);
+            }
+            output.append(line).append(NEW_LINE);
+        }
+        StringBuilder errors = new StringBuilder();
+        BufferedReader error = new BufferedReader(new InputStreamReader(p.getErrorStream()));
+        while ((line = error.readLine()) != null) {
+            if (log.isDebugEnabled()) {
+                log.debug("error = " + line);
+            }
+            errors.append(line).append(NEW_LINE);
+        }
+        if (errors.length() > 0) {
+            throw new RuntimeException("Command execution failed: " + NEW_LINE + errors.toString());
+        }
+        return output.toString();
+    }
 }
diff --git a/components/org.apache.stratos.deployment/pom.xml b/components/org.apache.stratos.deployment/pom.xml
index 273cb97..83a5b83 100644
--- a/components/org.apache.stratos.deployment/pom.xml
+++ b/components/org.apache.stratos.deployment/pom.xml
@@ -20,7 +20,7 @@
     <parent>
        <groupId>org.apache.stratos</groupId>
        <artifactId>stratos-components-parent</artifactId>
-       <version>4.0.0-SNAPSHOT</version>
+       <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.email.sender/pom.xml b/components/org.apache.stratos.email.sender/pom.xml
index a62b72d..ab0fc59 100644
--- a/components/org.apache.stratos.email.sender/pom.xml
+++ b/components/org.apache.stratos.email.sender/pom.xml
@@ -20,7 +20,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/components/org.apache.stratos.keystore.mgt/pom.xml b/components/org.apache.stratos.keystore.mgt/pom.xml
index e73f718..f145d3d 100644
--- a/components/org.apache.stratos.keystore.mgt/pom.xml
+++ b/components/org.apache.stratos.keystore.mgt/pom.xml
@@ -21,7 +21,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.load.balancer.common/pom.xml b/components/org.apache.stratos.load.balancer.common/pom.xml
index 81febb7..bd6c98e 100644
--- a/components/org.apache.stratos.load.balancer.common/pom.xml
+++ b/components/org.apache.stratos.load.balancer.common/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.load.balancer.extension.api/pom.xml b/components/org.apache.stratos.load.balancer.extension.api/pom.xml
index cf3abba..e27de55 100644
--- a/components/org.apache.stratos.load.balancer.extension.api/pom.xml
+++ b/components/org.apache.stratos.load.balancer.extension.api/pom.xml
@@ -24,7 +24,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <groupId>org.apache.stratos</groupId>
diff --git a/components/org.apache.stratos.load.balancer/pom.xml b/components/org.apache.stratos.load.balancer/pom.xml
index 5a2b6f4..48a0d81 100644
--- a/components/org.apache.stratos.load.balancer/pom.xml
+++ b/components/org.apache.stratos.load.balancer/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/LoadBalancerTenantEventReceiver.java b/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/LoadBalancerTenantEventReceiver.java
index 058553b..027ace0 100644
--- a/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/LoadBalancerTenantEventReceiver.java
+++ b/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/LoadBalancerTenantEventReceiver.java
@@ -25,6 +25,7 @@ import org.apache.stratos.load.balancer.context.LoadBalancerContextUtil;
 import org.apache.stratos.messaging.domain.tenant.Subscription;
 import org.apache.stratos.messaging.domain.tenant.SubscriptionDomain;
 import org.apache.stratos.messaging.domain.tenant.Tenant;
+import org.apache.stratos.messaging.domain.topology.Cluster;
 import org.apache.stratos.messaging.domain.topology.Service;
 import org.apache.stratos.messaging.domain.topology.ServiceType;
 import org.apache.stratos.messaging.event.Event;
@@ -33,6 +34,9 @@ import org.apache.stratos.messaging.listener.tenant.*;
 import org.apache.stratos.messaging.message.receiver.tenant.TenantEventReceiver;
 import org.apache.stratos.messaging.message.receiver.topology.TopologyManager;
 
+import java.util.HashMap;
+import java.util.Map;
+
 /**
  * Load balancer tenant receiver updates load balancer context according to
  * incoming tenant events.
diff --git a/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/LoadBalancerTopologyEventReceiver.java b/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/LoadBalancerTopologyEventReceiver.java
index 0b126cc..f10256c 100644
--- a/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/LoadBalancerTopologyEventReceiver.java
+++ b/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/LoadBalancerTopologyEventReceiver.java
@@ -19,7 +19,6 @@
 
 package org.apache.stratos.load.balancer;
 
-import org.apache.commons.lang.StringUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.stratos.load.balancer.context.LoadBalancerContext;
@@ -29,8 +28,13 @@ import org.apache.stratos.messaging.domain.topology.Member;
 import org.apache.stratos.messaging.domain.topology.MemberStatus;
 import org.apache.stratos.messaging.domain.topology.Service;
 import org.apache.stratos.messaging.event.Event;
-import org.apache.stratos.messaging.event.topology.*;
-import org.apache.stratos.messaging.listener.topology.*;
+import org.apache.stratos.messaging.event.topology.ClusterRemovedEvent;
+import org.apache.stratos.messaging.event.topology.MemberActivatedEvent;
+import org.apache.stratos.messaging.event.topology.ServiceRemovedEvent;
+import org.apache.stratos.messaging.listener.topology.ClusterRemovedEventListener;
+import org.apache.stratos.messaging.listener.topology.CompleteTopologyEventListener;
+import org.apache.stratos.messaging.listener.topology.MemberActivatedEventListener;
+import org.apache.stratos.messaging.listener.topology.ServiceRemovedEventListener;
 import org.apache.stratos.messaging.message.receiver.topology.TopologyEventReceiver;
 import org.apache.stratos.messaging.message.receiver.topology.TopologyManager;
 
@@ -89,11 +93,6 @@ public class LoadBalancerTopologyEventReceiver implements Runnable {
                                         log.debug("Cluster does not have any active members");
                                     }
                                 }
-                                for (Member member : cluster.getMembers()) {
-                                    if (member.getStatus() == MemberStatus.Activated) {
-                                        addMemberIpsToMemberIpHostnameMap(cluster, member);
-                                    }
-                                }
                             }
                         }
                         initialized = true;
@@ -120,105 +119,31 @@ public class LoadBalancerTopologyEventReceiver implements Runnable {
                 try {
                     TopologyManager.acquireReadLock();
 
+                    // Add cluster to load balancer context when its first member is activated
                     MemberActivatedEvent memberActivatedEvent = (MemberActivatedEvent) event;
-                    Service service = TopologyManager.getTopology().getService(memberActivatedEvent.getServiceName());
-                    if (service == null) {
-                        if (log.isWarnEnabled()) {
-                            log.warn(String.format("Service not found in topology: [service] %s",
-                                    memberActivatedEvent.getServiceName()));
-                        }
-                        return;
-                    }
-                    Cluster cluster = service.getCluster(memberActivatedEvent.getClusterId());
-                    if (cluster == null) {
-                        if (log.isWarnEnabled()) {
-                            log.warn(String.format("Cluster not found in topology: [service] %s [cluster] %s",
+                    if (LoadBalancerContext.getInstance().getClusterIdClusterMap().containsCluster(memberActivatedEvent.getClusterId())) {
+                        if (log.isDebugEnabled()) {
+                            log.debug(String.format("Cluster exists in load balancer context: [service] %s [cluster] %s",
                                     memberActivatedEvent.getServiceName(), memberActivatedEvent.getClusterId()));
                         }
                         return;
                     }
-                    Member member = cluster.getMember(memberActivatedEvent.getMemberId());
-                    if (member == null) {
-                        if (log.isWarnEnabled()) {
-                            log.warn(String.format("Member not found in topology: [service] %s [cluster] %s [member] %s",
-                                    memberActivatedEvent.getServiceName(), memberActivatedEvent.getClusterId(),
-                                    memberActivatedEvent.getMemberId()));
+                    // Cluster not found in load balancer context, add it
+                    Service service = TopologyManager.getTopology().getService(memberActivatedEvent.getServiceName());
+                    if (service != null) {
+                        Cluster cluster = service.getCluster(memberActivatedEvent.getClusterId());
+                        if (cluster != null) {
+                            LoadBalancerContextUtil.addClusterAgainstHostNames(cluster);
+                        } else {
+                            if (log.isErrorEnabled()) {
+                                log.error(String.format("Cluster not found in topology: [service] %s [cluster] %s",
+                                        memberActivatedEvent.getServiceName(), memberActivatedEvent.getClusterId()));
+                            }
                         }
-                        return;
-                    }
-
-                    // Add member to member-ip -> hostname map
-                    addMemberIpsToMemberIpHostnameMap(cluster,  member);
-
-                    if (LoadBalancerContext.getInstance().getClusterIdClusterMap().containsCluster(
-                            member.getClusterId())) {
-                        if (log.isDebugEnabled()) {
-                            log.debug(String.format("Cluster already exists in load balancer context: [service] %s " +
-                                    "[cluster] %s", member.getServiceName(), member.getClusterId()));
+                    } else {
+                        if (log.isErrorEnabled()) {
+                            log.error(String.format("Service not found in topology: [service] %s", memberActivatedEvent.getServiceName()));
                         }
-                        // At this point member is already added to the cluster object in load balancer context
-                        return;
-                    }
-
-                    // Add cluster to load balancer context when its first member is activated:
-                    // Cluster not found in load balancer context, add it
-                    LoadBalancerContextUtil.addClusterAgainstHostNames(cluster);
-                } catch (Exception e) {
-                    log.error("Error processing event", e);
-                } finally {
-                    TopologyManager.releaseReadLock();
-                }
-            }
-        });
-        topologyEventReceiver.addEventListener(new MemberMaintenanceListener() {
-            @Override
-            protected void onEvent(Event event) {
-                try {
-                    TopologyManager.acquireReadLock();
-                    MemberMaintenanceModeEvent memberMaintenanceModeEvent = (MemberMaintenanceModeEvent) event;
-                    Member member = findMember(memberMaintenanceModeEvent.getServiceName(),
-                            memberMaintenanceModeEvent.getClusterId(), memberMaintenanceModeEvent.getMemberId());
-
-                    if (member != null) {
-                        removeMemberIpsFromMemberIpHostnameMap(member);
-                    }
-                } catch (Exception e) {
-                    log.error("Error processing event", e);
-                } finally {
-                    TopologyManager.releaseReadLock();
-                }
-            }
-        });
-        topologyEventReceiver.addEventListener(new MemberSuspendedEventListener() {
-            @Override
-            protected void onEvent(Event event) {
-                try {
-                    TopologyManager.acquireReadLock();
-                    MemberSuspendedEvent memberSuspendedEvent = (MemberSuspendedEvent) event;
-                    Member member = findMember(memberSuspendedEvent.getServiceName(),
-                            memberSuspendedEvent.getClusterId(), memberSuspendedEvent.getMemberId());
-
-                    if (member != null) {
-                        removeMemberIpsFromMemberIpHostnameMap(member);
-                    }
-                } catch (Exception e) {
-                    log.error("Error processing event", e);
-                } finally {
-                    TopologyManager.releaseReadLock();
-                }
-            }
-        });
-        topologyEventReceiver.addEventListener(new MemberTerminatedEventListener() {
-            @Override
-            protected void onEvent(Event event) {
-                try {
-                    TopologyManager.acquireReadLock();
-                    MemberTerminatedEvent memberTerminatedEvent = (MemberTerminatedEvent) event;
-                    Member member = findMember(memberTerminatedEvent.getServiceName(),
-                            memberTerminatedEvent.getClusterId(), memberTerminatedEvent.getMemberId());
-
-                    if (member != null) {
-                        removeMemberIpsFromMemberIpHostnameMap(member);
                     }
                 } catch (Exception e) {
                     log.error("Error processing event", e);
@@ -237,9 +162,6 @@ public class LoadBalancerTopologyEventReceiver implements Runnable {
                     ClusterRemovedEvent clusterRemovedEvent = (ClusterRemovedEvent) event;
                     Cluster cluster = LoadBalancerContext.getInstance().getClusterIdClusterMap().getCluster(clusterRemovedEvent.getClusterId());
                     if (cluster != null) {
-                        for (Member member : cluster.getMembers()) {
-                            removeMemberIpsFromMemberIpHostnameMap(member);
-                        }
                         LoadBalancerContextUtil.removeClusterAgainstHostNames(cluster.getClusterId());
                     } else {
                         if (log.isWarnEnabled()) {
@@ -265,15 +187,11 @@ public class LoadBalancerTopologyEventReceiver implements Runnable {
                     Service service = TopologyManager.getTopology().getService(serviceRemovedEvent.getServiceName());
                     if (service != null) {
                         for (Cluster cluster : service.getClusters()) {
-                            for (Member member : cluster.getMembers()) {
-                                removeMemberIpsFromMemberIpHostnameMap(member);
-                            }
                             LoadBalancerContextUtil.removeClusterAgainstHostNames(cluster.getClusterId());
                         }
                     } else {
                         if (log.isWarnEnabled()) {
-                            log.warn(String.format("Service not found in topology: [service] %s",
-                                    serviceRemovedEvent.getServiceName()));
+                            log.warn(String.format("Service not found in topology: [service] %s", serviceRemovedEvent.getServiceName()));
                         }
                     }
                 } catch (Exception e) {
@@ -285,88 +203,6 @@ public class LoadBalancerTopologyEventReceiver implements Runnable {
         });
     }
 
-    private Member findMember(String serviceName, String clusterId, String memberId) {
-        Service service = TopologyManager.getTopology().getService(serviceName);
-        if (service == null) {
-            if (log.isWarnEnabled()) {
-                log.warn(String.format("Service not found in topology: [service] %s", serviceName));
-            }
-            return null;
-        }
-
-        Cluster cluster = service.getCluster(clusterId);
-        if (cluster == null) {
-            if (log.isWarnEnabled()) {
-                log.warn(String.format("Cluster not found in topology: [service] %s [cluster] %s", serviceName, clusterId));
-            }
-            return null;
-        }
-
-        Member member = cluster.getMember(memberId);
-        if (member == null) {
-            if (log.isWarnEnabled()) {
-                log.warn(String.format("Member not found in topology: [service] %s [cluster] %s [member] %s", serviceName,
-                        clusterId, memberId));
-            }
-            return null;
-        }
-        return member;
-    }
-
-    private void addMemberIpsToMemberIpHostnameMap(Cluster cluster, Member member) {
-        if ((cluster.getHostNames() == null) || (cluster.getHostNames().size() == 0)) {
-            if (log.isWarnEnabled()) {
-                log.warn(String.format("Hostnames not found in cluster %s, could not add member ips to member-ip " +
-                        "-> hostname map", member.getClusterId()));
-            }
-            return;
-        }
-
-        String hostname = cluster.getHostNames().get(0);
-        if (cluster.getHostNames().size() > 1) {
-            if (log.isWarnEnabled()) {
-                log.warn(String.format("Multiple hostnames found in cluster %s, using %s",
-                        cluster.getHostNames().toString(), hostname));
-            }
-        }
-
-        if (StringUtils.isNotBlank(member.getMemberIp())) {
-            LoadBalancerContext.getInstance().getMemberIpHostnameMap().put(member.getMemberIp(), hostname);
-            if (log.isDebugEnabled()) {
-                log.debug(String.format("Member private ip added to member-ip -> hostname map: [service] %s [cluster] " +
-                                "%s [member] %s [private-ip] %s", member.getServiceName(), member.getClusterId(),
-                        member.getMemberId(), member.getMemberIp()
-                ));
-            }
-        }
-        if (StringUtils.isNotBlank(member.getMemberPublicIp())) {
-            LoadBalancerContext.getInstance().getMemberIpHostnameMap().put(member.getMemberPublicIp(), hostname);
-            if (log.isDebugEnabled()) {
-                log.debug(String.format("Member public ip added to member-ip -> hostname map: [service] %s [cluster] " +
-                                "%s [member] %s [public-ip] %s", member.getServiceName(), member.getClusterId(),
-                        member.getMemberId(), member.getMemberPublicIp()
-                ));
-            }
-        }
-    }
-
-    private void removeMemberIpsFromMemberIpHostnameMap(Member member) {
-        if (StringUtils.isNotBlank(member.getMemberIp())) {
-            LoadBalancerContext.getInstance().getMemberIpHostnameMap().remove(member.getMemberIp());
-            if (log.isDebugEnabled()) {
-                log.debug(String.format("Member private ip removed from member-ip -> hostname map: [private-ip] %s",
-                        member.getMemberIp()));
-            }
-        }
-        if (StringUtils.isNotBlank(member.getMemberPublicIp())) {
-            LoadBalancerContext.getInstance().getMemberIpHostnameMap().remove(member.getMemberPublicIp());
-            if (log.isDebugEnabled()) {
-                log.debug(String.format("Member public ip removed from member-ip -> hostname map: [public-ip] %s",
-                        member.getMemberPublicIp()));
-            }
-        }
-    }
-
     /**
      * Terminate load balancer topology receiver thread.
      */
diff --git a/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/RequestDelegator.java b/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/RequestDelegator.java
index 8cbca31..4a6bbc5 100644
--- a/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/RequestDelegator.java
+++ b/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/RequestDelegator.java
@@ -60,11 +60,6 @@ public class RequestDelegator {
             }
             return member;
         }
-        else {
-            if(log.isWarnEnabled()) {
-                log.warn(String.format("Could not find a cluster for hostname %s", hostName));
-            }
-        }
         return null;
     }
 
@@ -84,11 +79,6 @@ public class RequestDelegator {
             }
             return member;
         }
-        else {
-            if(log.isWarnEnabled()) {
-                log.warn(String.format("Could not find a cluster for hostname %s and tenant-id %d", hostName, tenantId));
-            }
-        }
         return null;
     }
 
diff --git a/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/conf/LoadBalancerConfiguration.java b/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/conf/LoadBalancerConfiguration.java
index 437f4d3..2b67852 100644
--- a/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/conf/LoadBalancerConfiguration.java
+++ b/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/conf/LoadBalancerConfiguration.java
@@ -35,10 +35,7 @@ import org.apache.stratos.messaging.domain.topology.*;
 import org.apache.stratos.messaging.message.receiver.topology.TopologyManager;
 
 import java.io.File;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Scanner;
+import java.util.*;
 import java.util.regex.Pattern;
 
 /**
@@ -65,10 +62,9 @@ public class LoadBalancerConfiguration {
     private String topologyClusterFilter;
     private boolean multiTenancyEnabled;
     private TenantIdentifier tenantIdentifier;
-    private String tenantIdentifierRegex;
+    private List<String> tenantIdentifierRegexList;
     private String topologyMemberFilter;
     private String networkPartitionId;
-    private boolean reWriteLocationHeader;
 
     /**
      * Load balancer configuration is singleton.
@@ -256,12 +252,12 @@ public class LoadBalancerConfiguration {
         return tenantIdentifier;
     }
 
-    public void setTenantIdentifierRegex(String tenantIdentifierRegex) {
-        this.tenantIdentifierRegex = tenantIdentifierRegex;
+    public void setTenantIdentifierRegexList(List<String> tenantIdentifierRegexList) {
+        this.tenantIdentifierRegexList = tenantIdentifierRegexList;
     }
 
-    public String getTenantIdentifierRegex() {
-        return tenantIdentifierRegex;
+    public List<String> getTenantIdentifierRegexList() {
+        return tenantIdentifierRegexList;
     }
 
     public void setNetworkPartitionId(String networkPartitionId) {
@@ -272,14 +268,6 @@ public class LoadBalancerConfiguration {
         return networkPartitionId;
     }
 
-    public void setRewriteLocationHeader(boolean reWriteLocationHeader) {
-        this.reWriteLocationHeader = reWriteLocationHeader;
-    }
-
-    public boolean isReWriteLocationHeader() {
-        return reWriteLocationHeader;
-    }
-
     private static class LoadBalancerConfigurationReader {
 
         private String property;
@@ -432,7 +420,17 @@ public class LoadBalancerConfiguration {
                 } catch (Exception e) {
                     throw new InvalidConfigurationException(String.format("Invalid tenant identifier regular expression: %s", tenantIdentifierRegex), e);
                 }
-                configuration.setTenantIdentifierRegex(tenantIdentifierRegex);
+                List<String> regexList = new ArrayList<String>();
+                if(tenantIdentifierRegex.contains(org.apache.stratos.messaging.util.Constants.FILTER_VALUE_SEPARATOR)) {
+                    String[] regexArray;
+                    regexArray = tenantIdentifierRegex.split(org.apache.stratos.messaging.util.Constants.FILTER_VALUE_SEPARATOR);
+                    for(String regex: regexArray) {
+                       regexList.add(regex);
+                    }
+                } else {
+                    regexList.add(tenantIdentifierRegex);
+                }
+                configuration.setTenantIdentifierRegexList(regexList);
             }
 
             Node algorithmsNode = loadBalancerNode.findChildNodeByName(Constants.CONF_ELEMENT_ALGORITHMS);
@@ -445,11 +443,6 @@ public class LoadBalancerConfiguration {
                 configuration.addAlgorithm(algorithm);
             }
 
-            String rewriteLocationHeader = loadBalancerNode.getProperty(Constants.CONF_PROPERTY_REWRITE_LOCATION_HEADER);
-            if(StringUtils.isNotEmpty(rewriteLocationHeader)) {
-                configuration.setRewriteLocationHeader(Boolean.parseBoolean(topologyEventListenerEnabled));
-            }
-
             if (!configuration.isTopologyEventListenerEnabled()) {
                 Node servicesNode = loadBalancerNode.findChildNodeByName(Constants.CONF_ELEMENT_SERVICES);
                 validateRequiredNode(servicesNode, Constants.CONF_ELEMENT_SERVICES);
diff --git a/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/conf/util/Constants.java b/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/conf/util/Constants.java
index 96b666a..72851af 100755
--- a/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/conf/util/Constants.java
+++ b/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/conf/util/Constants.java
@@ -59,7 +59,6 @@ public class Constants {
     public static final String CONF_PROPERTY_VALUE_TENANT_DOMAIN = "tenant-domain";
     public static final String CONF_PROPERTY_TENANT_IDENTIFIER_REGEX = "tenant-identifier-regex";
     public static final String CONF_PROPERTY_NETWORK_PARTITION_ID = "network-partition-id";
-    public static final String CONF_PROPERTY_REWRITE_LOCATION_HEADER = "rewrite-location-header";
 
     public static final String CONF_DELIMITER_HOSTS = ",";
     public static final long DEFAULT_ENDPOINT_TIMEOUT = 15000;
diff --git a/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/context/LoadBalancerContext.java b/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/context/LoadBalancerContext.java
index c0b994e..67d63ee 100644
--- a/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/context/LoadBalancerContext.java
+++ b/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/context/LoadBalancerContext.java
@@ -67,9 +67,6 @@ public class LoadBalancerContext {
     // Map<HostName, Map<TenantId, Cluster>>
     // Keep track of multi-tenant service clusters
     private MultiTenantClusterMap multiTenantClusterMap;
-    // Map<MemberIp, Hostname>
-    // Keep track of cluster hostnames of of all members  against their ip addresses
-    private MemberIpHostnameMap memberIpHostnameMap;
 
     private LoadBalancerContext() {
         tenantIdSynapseEnvironmentServiceMap = new TenantIdSynapseEnvironmentServiceMap();
@@ -79,7 +76,6 @@ public class LoadBalancerContext {
         hostNameClusterMap = new HostNameClusterMap();
         hostNameAppContextMap = new HostNameAppContextMap();
         multiTenantClusterMap = new MultiTenantClusterMap();
-        memberIpHostnameMap = new MemberIpHostnameMap();
     }
 
     public static LoadBalancerContext getInstance() {
@@ -196,8 +192,4 @@ public class LoadBalancerContext {
     public MultiTenantClusterMap getMultiTenantClusterMap() {
        return multiTenantClusterMap;
     }
-
-    public MemberIpHostnameMap getMemberIpHostnameMap() {
-        return memberIpHostnameMap;
-    }
 }
diff --git a/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/context/map/HostNameAppContextMap.java b/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/context/map/HostNameAppContextMap.java
index e2ccfa3..411b896 100644
--- a/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/context/map/HostNameAppContextMap.java
+++ b/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/context/map/HostNameAppContextMap.java
@@ -40,7 +40,7 @@ public class HostNameAppContextMap {
     }
 
     public void removeAppContext(String hostName) {
-        if(contains(hostName)) {
+        if (contains(hostName)) {
             concurrentHashMap.remove(hostName);
         }
     }
diff --git a/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/endpoint/TenantAwareLoadBalanceEndpoint.java b/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/endpoint/TenantAwareLoadBalanceEndpoint.java
index 02ed6e6..884d5f6 100644
--- a/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/endpoint/TenantAwareLoadBalanceEndpoint.java
+++ b/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/endpoint/TenantAwareLoadBalanceEndpoint.java
@@ -92,6 +92,7 @@ public class TenantAwareLoadBalanceEndpoint extends org.apache.synapse.endpoints
 
     @Override
     public void send(MessageContext synCtx) {
+
         SessionInformation sessionInformation = null;
         org.apache.axis2.clustering.Member currentMember = null;
         if (isSessionAffinityBasedLB()) {
@@ -154,7 +155,7 @@ public class TenantAwareLoadBalanceEndpoint extends org.apache.synapse.endpoints
      * @param currentMember
      */
     private void setupLoadBalancerContextProperties(MessageContext synCtx, org.apache.axis2.clustering.Member currentMember) {
-        String targetHostname = extractTargetHost(synCtx);
+        String lbHostName = extractTargetHost(synCtx);
         org.apache.axis2.context.MessageContext axis2MsgCtx = ((Axis2MessageContext) synCtx).getAxis2MessageContext();
         
         String httpTransportName = "http", httpsTransportName = "https";
@@ -171,7 +172,7 @@ public class TenantAwareLoadBalanceEndpoint extends org.apache.synapse.endpoints
         String lbHttpsPort = (String) httpsTransportIn.getParameter("port").getValue();
         String clusterId = currentMember.getProperties().getProperty(Constants.CLUSTER_ID);
 
-        synCtx.setProperty(Constants.LB_TARGET_HOSTNAME, targetHostname);
+        synCtx.setProperty(Constants.LB_HOST_NAME, lbHostName);
         synCtx.setProperty(Constants.LB_HTTP_PORT, lbHttpPort);
         synCtx.setProperty(Constants.LB_HTTPS_PORT, lbHttpsPort);
         synCtx.setProperty(Constants.CLUSTER_ID, clusterId);
@@ -237,16 +238,18 @@ public class TenantAwareLoadBalanceEndpoint extends org.apache.synapse.endpoints
             }
             String url = extractUrl(synCtx);
             int tenantId = scanUrlForTenantId(url);
-            if (tenantExists(tenantId)) {
+            if(tenantId == -1) {
+               // If there is no tenant involves in the URL, Find next member from host name
+               member = requestDelegator.findNextMemberFromHostName(targetHost);
+            } else if (tenantExists(tenantId)) {
                 // Tenant found, find member from hostname and tenant id
                 member = requestDelegator.findNextMemberFromTenantId(targetHost, tenantId);
             } else {
-                // Tenant id not found in URL, find member from host name
-                member = requestDelegator.findNextMemberFromHostName(targetHost);
+                // Tenant id not found in the subscription for the URL which has tenant domain.
+                throwSynapseException(synCtx, 403, String.format("You are unauthorized to access"));
             }
         } else {
-            // Find next member from host name
-            member = requestDelegator.findNextMemberFromHostName(targetHost);
+
         }
 
         if (member == null)
@@ -451,36 +454,39 @@ public class TenantAwareLoadBalanceEndpoint extends org.apache.synapse.endpoints
      */
     private int scanUrlForTenantId(String url) {
         int tenantId = -1;
-        String regex = LoadBalancerConfiguration.getInstance().getTenantIdentifierRegex();
-        if (log.isDebugEnabled()) {
-            log.debug(String.format("Request URL: %s ", url));
-            log.debug(String.format("Tenant identifier regex: %s ", regex));
-        }
-        Pattern pattern = Pattern.compile(regex);
-        Matcher matcher = pattern.matcher(url);
-        if (matcher.find()) {
-            if (LoadBalancerConfiguration.getInstance().getTenantIdentifier() == TenantIdentifier.TenantId) {
-                if (log.isDebugEnabled()) {
-                    log.debug("Identifying tenant using tenant id...");
-                }
-                tenantId = Integer.parseInt(matcher.group(1));
-                if (log.isDebugEnabled()) {
-                    log.debug(String.format("Tenant identifier found: [tenant-id] %d", tenantId));
-                }
-            } else if (LoadBalancerConfiguration.getInstance().getTenantIdentifier() == TenantIdentifier.TenantDomain) {
-                if (log.isDebugEnabled()) {
-                    log.debug("Identifying tenant using tenant domain...");
+        List<String> regexList = LoadBalancerConfiguration.getInstance().getTenantIdentifierRegexList();
+        for(String regex : regexList) {
+            if (log.isDebugEnabled()) {
+                log.debug(String.format("Request URL: %s ", url));
+                log.debug(String.format("Tenant identifier regex: %s ", regex));
+            }
+            Pattern pattern = Pattern.compile(regex);
+            Matcher matcher = pattern.matcher(url);
+            if (matcher.find()) {
+                if (LoadBalancerConfiguration.getInstance().getTenantIdentifier() == TenantIdentifier.TenantId) {
+                    if (log.isDebugEnabled()) {
+                        log.debug("Identifying tenant using tenant id...");
+                    }
+                    tenantId = Integer.parseInt(matcher.group(1));
+                    if (log.isDebugEnabled()) {
+                        log.debug(String.format("Tenant identifier found: [tenant-id] %d", tenantId));
+                    }
+                } else if (LoadBalancerConfiguration.getInstance().getTenantIdentifier() == TenantIdentifier.TenantDomain) {
+                    if (log.isDebugEnabled()) {
+                        log.debug("Identifying tenant using tenant domain...");
+                    }
+                    String tenantDomain = matcher.group(1);
+                    tenantId = findTenantIdFromTenantDomain(tenantDomain);
+                    if (log.isDebugEnabled()) {
+                        log.debug(String.format("Tenant identifier found: [tenant-domain] %s [tenant-id] %d", tenantDomain, tenantId));
+                    }
                 }
-                String tenantDomain = matcher.group(1);
-                tenantId = findTenantIdFromTenantDomain(tenantDomain);
+                break;
+            } else {
                 if (log.isDebugEnabled()) {
-                    log.debug(String.format("Tenant identifier found: [tenant-domain] %s [tenant-id] %d", tenantDomain, tenantId));
+                    log.debug("Tenant identifier not found in URL");
                 }
             }
-        } else {
-            if (log.isDebugEnabled()) {
-                log.debug("Tenant identifier not found in URL");
-            }
         }
         return tenantId;
     }
@@ -523,6 +529,28 @@ public class TenantAwareLoadBalanceEndpoint extends org.apache.synapse.endpoints
         return hostName;
     }
 
+    private int extractPort(MessageContext synCtx, String transport) {
+        org.apache.axis2.context.MessageContext msgCtx =
+                ((Axis2MessageContext) synCtx).getAxis2MessageContext();
+
+        Map headerMap = (Map) msgCtx.getProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);
+        int port = -1;
+        if (headerMap != null) {
+            String hostHeader = (String) headerMap.get(HTTP.TARGET_HOST);
+            int index = hostHeader.indexOf(':');
+            if (index != -1) {
+                port = Integer.parseInt(hostHeader.trim().substring(index + 1));
+            } else {
+                if ("http".equals(transport)) {
+                    port = 80;
+                } else if ("https".equals(transport)) {
+                    port = 443;
+                }
+            }
+        }
+        return port;
+    }
+
     private String extractTransport(MessageContext synCtx) {
         org.apache.axis2.context.MessageContext axis2MessageContext = ((Axis2MessageContext) synCtx).getAxis2MessageContext();
         return axis2MessageContext.getTransportIn().getName();
@@ -589,7 +617,7 @@ public class TenantAwareLoadBalanceEndpoint extends org.apache.synapse.endpoints
             String hostName = extractTargetHost(synCtx);
             if (LoadBalancerContext.getInstance().getHostNameAppContextMap().contains(hostName)) {
                 String appContext = LoadBalancerContext.getInstance().getHostNameAppContextMap().getAppContext(hostName);
-                if(StringUtils.isNotBlank(appContext)) {
+                if (StringUtils.isNotBlank(appContext)) {
                     if (log.isDebugEnabled()) {
                         log.debug(String.format("Domain mapping found with application context: [domain-name] %s [app-context] %s", hostName, appContext));
                         log.debug(String.format("Incoming request address: %s", address));
@@ -615,11 +643,11 @@ public class TenantAwareLoadBalanceEndpoint extends org.apache.synapse.endpoints
     }
 
     private String cleanURLPath(String path) {
-        if(StringUtils.isNotBlank(path)) {
-            if(path.startsWith("/")) {
+        if (StringUtils.isNotBlank(path)) {
+            if (path.startsWith("/")) {
                 path = path.replaceFirst("/", "");
             }
-            if(path.endsWith("/")) {
+            if (path.endsWith("/")) {
                 path = path.substring(0, path.length() - 2);
             }
         }
diff --git a/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/mediators/LocationReWriter.java b/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/mediators/LocationReWriter.java
index 50f08a3..5850aac 100644
--- a/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/mediators/LocationReWriter.java
+++ b/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/mediators/LocationReWriter.java
@@ -19,14 +19,11 @@
 package org.apache.stratos.load.balancer.mediators;
 
 import org.apache.commons.lang3.StringUtils;
-import org.apache.stratos.load.balancer.conf.LoadBalancerConfiguration;
-import org.apache.stratos.load.balancer.context.LoadBalancerContext;
 import org.apache.stratos.load.balancer.util.Constants;
 import org.apache.synapse.MessageContext;
 import org.apache.synapse.core.axis2.Axis2MessageContext;
 import org.apache.synapse.mediators.AbstractMediator;
 
-import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.Map;
 
@@ -41,13 +38,6 @@ public class LocationReWriter extends AbstractMediator {
 
     @Override
     public boolean mediate(MessageContext messageContext) {
-        if (LoadBalancerConfiguration.getInstance().isReWriteLocationHeader()) {
-            rewriteLocationHeader(messageContext);
-        }
-        return true;
-    }
-
-    private void rewriteLocationHeader(MessageContext messageContext) {
         try {
             // Read transport headers
             Map transportHeaders = (Map) ((Axis2MessageContext) messageContext).getAxis2MessageContext().
@@ -55,42 +45,24 @@ public class LocationReWriter extends AbstractMediator {
             if (transportHeaders != null) {
                 // Find location header
                 String inLocation = (String) transportHeaders.get(LOCATION);
-                if (StringUtils.isNotBlank(inLocation)) {
-                    URL inLocationUrl = null;
-                    try {
-                        inLocationUrl = new URL(inLocation);
-                    } catch (MalformedURLException e) {
-                        return;
-                    }
-
-                    // Check whether the location host is an ip address of a known member
-                    String hostname = LoadBalancerContext.getInstance().getMemberIpHostnameMap().get(inLocationUrl.getHost());
-                    if (StringUtils.isEmpty(hostname)) {
-                        if (log.isDebugEnabled()) {
-                            log.debug(String.format("A hostname not found for ip: [ip-address] %s", inLocationUrl.getHost()));
-                        }
-                        return;
-                    }
-
-                    if (log.isDebugEnabled()) {
-                        log.debug(String.format("A location header found with member ip: [member-ip] %s " +
-                                "[hostname] %s ", inLocationUrl.getHost(), hostname));
-                    }
-
-                    int targetPort = -1;
+                if(StringUtils.isNotBlank(inLocation)) {
+                    URL inLocationUrl = new URL(inLocation);
+                    // Find load balancer host name and port
+                    String lbHost = (String) messageContext.getProperty(Constants.LB_HOST_NAME);
+                    int lbPort = -1;
                     if (HTTP.equals(inLocationUrl.getProtocol())) {
-                        targetPort = Integer.valueOf((String) messageContext.getProperty(Constants.LB_HTTP_PORT));
+                        lbPort = Integer.valueOf((String) messageContext.getProperty(Constants.LB_HTTP_PORT));
                     } else if (HTTPS.equals(inLocationUrl.getProtocol())) {
-                        targetPort = Integer.valueOf((String) messageContext.getProperty(Constants.LB_HTTPS_PORT));
+                        lbPort = Integer.valueOf((String) messageContext.getProperty(Constants.LB_HTTPS_PORT));
                     } else {
-                        if (log.isWarnEnabled()) {
+                        if(log.isWarnEnabled()) {
                             log.warn(String.format("An unknown protocol found: %s", inLocationUrl.getProtocol()));
                         }
                     }
 
-                    if (targetPort != -1) {
+                    if (lbPort != -1) {
                         // Re-write location header
-                        URL outLocationUrl = new URL(inLocationUrl.getProtocol(), hostname, targetPort, inLocationUrl.getFile());
+                        URL outLocationUrl = new URL(inLocationUrl.getProtocol(), lbHost, lbPort, inLocationUrl.getFile());
                         transportHeaders.put(LOCATION, outLocationUrl.toString());
                         if (log.isDebugEnabled()) {
                             log.debug(String.format("Location header re-written: %s", outLocationUrl.toString()));
@@ -99,9 +71,10 @@ public class LocationReWriter extends AbstractMediator {
                 }
             }
         } catch (Exception e) {
-            if (log.isWarnEnabled()) {
-                log.warn("Could not re-write location header", e);
+            if (log.isErrorEnabled()) {
+                log.error("Could re-write location header", e);
             }
         }
+        return true;
     }
 }
diff --git a/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/util/Constants.java b/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/util/Constants.java
index 6650af9..a29b980 100644
--- a/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/util/Constants.java
+++ b/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/util/Constants.java
@@ -30,7 +30,7 @@ public class Constants {
     public static final String AXIS2_MSG_CTX_TRANSPORT_IN_URL = "TransportInURL";
     public static final String AXIS2_MSG_CTX_SERVICE_PREFIX = "SERVICE_PREFIX";
 
-    public static final String LB_TARGET_HOSTNAME = "LB_TARGET_HOSTNAME";
+    public static final String LB_HOST_NAME = "LB_HOST_NAME";
     public static final String LB_HTTP_PORT = "LB_HTTP_PORT";
     public static final String LB_HTTPS_PORT = "LB_HTTPS_PORT";
 
diff --git a/components/org.apache.stratos.load.balancer/src/test/java/org/apache/stratos/load/balancer/test/LoadBalancerConfigurationTest.java b/components/org.apache.stratos.load.balancer/src/test/java/org/apache/stratos/load/balancer/test/LoadBalancerConfigurationTest.java
index 5edd2c1..5f80f42 100755
--- a/components/org.apache.stratos.load.balancer/src/test/java/org/apache/stratos/load/balancer/test/LoadBalancerConfigurationTest.java
+++ b/components/org.apache.stratos.load.balancer/src/test/java/org/apache/stratos/load/balancer/test/LoadBalancerConfigurationTest.java
@@ -26,6 +26,7 @@ import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
+import org.apache.stratos.load.balancer.conf.LoadBalancerConfiguration;
 
 import java.io.File;
 import java.net.URL;
@@ -35,7 +36,7 @@ import java.net.URL;
  */
 @RunWith(JUnit4.class)
 public class LoadBalancerConfigurationTest {
-    private static String configPath = File.separator + "sample" + File.separator + "configuration";
+    private static String configPath = "/sample/configuration";
 
     /**
      * Test load balancer configuration parser using different configuration files.
@@ -62,7 +63,7 @@ public class LoadBalancerConfigurationTest {
         try {
             String validationError = "Load balancer configuration validation failed";
 
-            URL resourceUrl = this.getClass().getResource(configPath + File.separator + "loadbalancer1.conf");
+            URL resourceUrl = this.getClass().getResource(configPath + "/loadbalancer1.conf");
             File configFile = new File(resourceUrl.getFile());
             System.setProperty("loadbalancer.conf.file", configFile.getAbsolutePath());
             LoadBalancerConfiguration configuration = LoadBalancerConfiguration.getInstance();
@@ -83,8 +84,7 @@ public class LoadBalancerConfigurationTest {
             Assert.assertEquals(String.format("%s, network partition id is not valid", validationError), "network-partition-1", configuration.getNetworkPartitionId());
             Assert.assertTrue(String.format("%s, multi-tenancy is not true", validationError), configuration.isMultiTenancyEnabled());
             Assert.assertEquals(String.format("%s, tenant-identifier is not valid", validationError), TenantIdentifier.TenantDomain, configuration.getTenantIdentifier());
-            Assert.assertEquals(String.format("%s, tenant-identifier-regex is not valid", validationError), "t/([^/]*)/", configuration.getTenantIdentifierRegex());
-            Assert.assertTrue(String.format("%s, rewrite-location-header is not true", validationError), configuration.isReWriteLocationHeader());
+            Assert.assertEquals(String.format("%s, tenant-identifier-regex is not valid", validationError), "t/([^/]*)/", configuration.getTenantIdentifierRegexList().get(0));
         } finally {
             LoadBalancerConfiguration.clear();
         }
@@ -95,7 +95,7 @@ public class LoadBalancerConfigurationTest {
      */
     @Test
     public final void testStaticTopology() {
-        URL resourceUrl = this.getClass().getResource(configPath + File.separator + "loadbalancer2.conf");
+        URL resourceUrl = this.getClass().getResource(configPath + "/loadbalancer2.conf");
         File configFile = new File(resourceUrl.getFile());
 
         System.setProperty("loadbalancer.conf.file", configFile.getAbsolutePath());
@@ -137,7 +137,6 @@ public class LoadBalancerConfigurationTest {
             Assert.assertEquals(String.format("%s, port value not valid: [member] %s [proxy-port] %d", validationError, memberId, proxyPort), 8080, m1Http.getValue());
             Assert.assertEquals(String.format("%s, port proxy not valid: [member] %s [proxy-port] %d", validationError, memberId, proxyPort), 80, m1Http.getProxy());
 
-            Assert.assertFalse(String.format("%s, rewrite-location-header is not false", validationError), LoadBalancerConfiguration.getInstance().isReWriteLocationHeader());
         } finally {
             TopologyManager.releaseReadLock();
             LoadBalancerConfiguration.clear();
diff --git a/components/org.apache.stratos.load.balancer/src/test/resources/sample/configuration/loadbalancer1.conf b/components/org.apache.stratos.load.balancer/src/test/resources/sample/configuration/loadbalancer1.conf
index 8bdced5..ff11dac 100755
--- a/components/org.apache.stratos.load.balancer/src/test/resources/sample/configuration/loadbalancer1.conf
+++ b/components/org.apache.stratos.load.balancer/src/test/resources/sample/configuration/loadbalancer1.conf
@@ -103,10 +103,4 @@ loadbalancer {
             class-name: org.apache.stratos.load.balancer.algorithm.RoundRobin;
         }
     }
-
-    # Rewrite location header
-    # If this property is set to true, load balancer will rewrite HTTP Location header values found in response
-    # messages if the host is set to an ip address of a known member. The resulting Location header host will be
-    # set to corresponding cluster hostname and the port will be set to corresponding transport proxy port.
-    rewrite-location-header: true;
 }
diff --git a/components/org.apache.stratos.load.balancer/src/test/resources/sample/configuration/loadbalancer2.conf b/components/org.apache.stratos.load.balancer/src/test/resources/sample/configuration/loadbalancer2.conf
index b708d05..9910dc9 100755
--- a/components/org.apache.stratos.load.balancer/src/test/resources/sample/configuration/loadbalancer2.conf
+++ b/components/org.apache.stratos.load.balancer/src/test/resources/sample/configuration/loadbalancer2.conf
@@ -104,12 +104,6 @@ loadbalancer {
         }
     }
 
-    # Rewrite location header
-    # If this property is set to true, load balancer will rewrite HTTP Location header values found in response
-    # messages if the host is set to an ip address of a known member. The resulting Location header host will be
-    # set to corresponding cluster hostname and the port will be set to corresponding transport proxy port.
-    rewrite-location-header: false;
-
     services {
         app-server {  # service name, a unique identifier to identify a service
             multi-tenant: true; # Set to true if the service is multi-tenant
diff --git a/components/org.apache.stratos.load.balancer/src/test/resources/sample/configuration/loadbalancer3.conf b/components/org.apache.stratos.load.balancer/src/test/resources/sample/configuration/loadbalancer3.conf
index 461b494..a629a6f 100755
--- a/components/org.apache.stratos.load.balancer/src/test/resources/sample/configuration/loadbalancer3.conf
+++ b/components/org.apache.stratos.load.balancer/src/test/resources/sample/configuration/loadbalancer3.conf
@@ -103,10 +103,4 @@ loadbalancer {
             class-name: org.apache.stratos.load.balancer.algorithm.RoundRobin;
         }
     }
-
-    # Rewrite location header
-    # If this property is set to true, load balancer will rewrite HTTP Location header values found in response
-    # messages if the host is set to an ip address of a known member. The resulting Location header host will be
-    # set to corresponding cluster hostname and the port will be set to corresponding transport proxy port.
-    rewrite-location-header: true;
 }
diff --git a/components/org.apache.stratos.logging.view.ui/pom.xml b/components/org.apache.stratos.logging.view.ui/pom.xml
index 46d25c8..af11104 100644
--- a/components/org.apache.stratos.logging.view.ui/pom.xml
+++ b/components/org.apache.stratos.logging.view.ui/pom.xml
@@ -24,7 +24,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.manager.console/console/cartridge_info.jag b/components/org.apache.stratos.manager.console/console/cartridge_info.jag
index ad4d4c2..6f3ea86 100644
--- a/components/org.apache.stratos.manager.console/console/cartridge_info.jag
+++ b/components/org.apache.stratos.manager.console/console/cartridge_info.jag
@@ -22,6 +22,7 @@
 var caramel = require('caramel');
 var error = [];
 var utils = require('/util/utility.jag');
+var process = require('process');
  var log = new Log('utility.cartridgeInfo');
 var alias = request.getParameter("alias");
 var lbCluster = {};
@@ -33,21 +34,30 @@ if(cartridgeInfo.Error != undefined){
     if(cartridgeInfo.cartridge == undefined){
         cartridgeInfo.cartridge = cartridgeInfo;
     }
+    /*
     if(cartridgeInfo.cartridge.lbClusterId) {
         lbCluster = utils.consoleAppUtil.getClusterInfo(cartridgeInfo.cartridge.lbClusterId);
         if(lbCluster.Error != undefined){
             error.push(lbCluster.Error);
         }
     }
+    */
+    lbCluster = utils.consoleAppUtil.getLBClusterInfo();
+            if(lbCluster.Error != undefined){
+                error.push(lbCluster.Error);
+    }
+
     var clusterInfo = utils.consoleAppUtil.getClusterInfoWithAlias(cartridgeInfo.cartridge.cartridgeType, alias);
     if(clusterInfo.Error != undefined){
         error.push(clusterInfo.Error);
     }
 }
+var bamInfo ={bamip:process.getProperty('bam.ip'),bamport:process.getProperty('bam.port')};
 caramel.render({
     cartridgeInfo:cartridgeInfo,
     lbCluster:lbCluster,
     clusterInfo:clusterInfo,
+    bamInfo:bamInfo,
     error:error
 });
 %>
diff --git a/components/org.apache.stratos.manager.console/console/cartridge_info_sg.jag b/components/org.apache.stratos.manager.console/console/cartridge_info_sg.jag
new file mode 100644
index 0000000..0d1c521
--- /dev/null
+++ b/components/org.apache.stratos.manager.console/console/cartridge_info_sg.jag
@@ -0,0 +1,69 @@
+<%
+/*
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ *
+ */
+var caramel = require('caramel');
+var error = [];
+var utils = require('/util/utility.jag');
+var log = new Log('utility.cartridgeInfo');
+var process = require('process');
+var serviceGroup = request.getParameter("serviceGroup");
+//Get all alias for a service group
+var cartridges = utils.consoleAppUtil.getCartridgeServiceGroup(serviceGroup);
+cartridges=cartridges.cartridge;
+
+if(cartridges.Error != undefined){
+    error.push(cartridges.Error);
+}else{
+    var i;
+    for(i=0;i<cartridges.length;i++){
+        var cartridgeInfo = cartridges[i];
+        if(cartridgeInfo.cartridge != undefined){
+            cartridgeInfo = cartridgeInfo.cartridge;
+        }
+        var alias = cartridges[i].cartridgeAlias;
+        var lbCluster = {};
+
+           lbCluster = utils.consoleAppUtil.getLBClusterInfo();
+           if(lbCluster.Error != undefined){
+                error.push(lbCluster.Error);
+            }else{
+                //cartridges[i].lbClusterinfo = {member:[{memberIp:"foo"},{}]};//lbCluster.cluster;
+                //cartridges[i].lbClusterinfo = lbCluster.cluster[0];
+                cartridges[i].lbclusterinfo = lbCluster.cluster[0];
+            }
+        //Getting the clusterInfo and putting it to the relevant cartridge json
+        var clusterInfo = utils.consoleAppUtil.getClusterInfoWithAlias(cartridgeInfo.cartridgeType, alias);
+        if(clusterInfo.Error != undefined){
+            error.push(clusterInfo.Error);
+        }else{
+            cartridges[i].clusterInfo = clusterInfo.cluster[0];
+        }
+
+    }
+}
+var bamInfo ={bamip:process.getProperty('bam.ip'),bamport:process.getProperty('bam.port')};
+caramel.render({
+    cartridges:cartridges,
+    serviceGroup:serviceGroup,
+    bamInfo:bamInfo,
+    error:error
+});
+%>
diff --git a/components/org.apache.stratos.manager.console/console/cartridges.jag b/components/org.apache.stratos.manager.console/console/cartridges.jag
index 8cf0e64..3060bc1 100644
--- a/components/org.apache.stratos.manager.console/console/cartridges.jag
+++ b/components/org.apache.stratos.manager.console/console/cartridges.jag
@@ -22,12 +22,15 @@
 var caramel = require('caramel');
 var error = [];
 var utils = require('/util/utility.jag');
+var process = require('process');
 var availableCartridges = utils.consoleAppUtil.getCartridges();
 if(availableCartridges.Error != undefined){
     error.push(availableCartridges.Error);
 }
+var bamInfo ={bamip:process.getProperty('bam.ip'),bamport:process.getProperty('bam.port')};
 caramel.render({
     cartridges:availableCartridges,
+    bamInfo:bamInfo,
     error:error
 });
 %>
diff --git a/components/org.apache.stratos.manager.console/console/config/acl.json b/components/org.apache.stratos.manager.console/console/config/acl.json
index 5422611..0bb881c 100644
--- a/components/org.apache.stratos.manager.console/console/config/acl.json
+++ b/components/org.apache.stratos.manager.console/console/config/acl.json
@@ -1,10 +1,12 @@
 {
     "carbonsuper": {
         "admin": ["view", "edit", "subscribe","configure","tenant-mgt", "tenant-edit"],
+	"Internal/admin": ["view", "edit", "subscribe","configure","tenant-mgt", "tenant-edit"],
         "Internal/Everyone": ["view", "tenant-edit"]
     },
     "tenants": {
         "admin": ["view","subscribe", "post"],
+	"Internal/admin": ["view","subscribe", "post"],
         "Internal/Everyone": ["test1","test2","view"]
     }
-}
\ No newline at end of file
+}
diff --git a/components/org.apache.stratos.manager.console/console/configure_stratos_wizard.jag b/components/org.apache.stratos.manager.console/console/configure_stratos_wizard.jag
index ad9399c..ac7f802 100644
--- a/components/org.apache.stratos.manager.console/console/configure_stratos_wizard.jag
+++ b/components/org.apache.stratos.manager.console/console/configure_stratos_wizard.jag
@@ -21,6 +21,7 @@
  */
 var caramel = require('caramel');
 var error = [];
+var process = require('process');
 var step = request.getParameter('step');
 if(step == null){
     step = 1;
@@ -84,9 +85,11 @@ if(wizard.step == 1){
         step_data = step_data.serviceDefinitionBean;
     }
 }
+var bamInfo ={bamip:process.getProperty('bam.ip'),bamport:process.getProperty('bam.port')};
 caramel.render({
     step_data:step_data,
     wizard:wizard,
+    bamInfo:bamInfo,
     error:error
 });
 %>
diff --git a/components/org.apache.stratos.manager.console/console/controllers/cartridgeSubscribeSubmit.jag b/components/org.apache.stratos.manager.console/console/controllers/cartridgeSubscribeSubmit.jag
index 3e66a99..28a4e76 100644
--- a/components/org.apache.stratos.manager.console/console/controllers/cartridgeSubscribeSubmit.jag
+++ b/components/org.apache.stratos.manager.console/console/controllers/cartridgeSubscribeSubmit.jag
@@ -24,6 +24,7 @@
     var log = new Log("controller.cartridgeSubscribeSubmit");
     var utils = require('/util/utility.jag');
     var jsonRequest = {};
+    var error = [];
     jsonRequest = {};
     var cartridgeType = request.getParameter('cartridgeType');
     var alias = request.getParameter('alias');
@@ -37,6 +38,7 @@
     var removeontermination = request.getParameter('removeOnUnsubscription');
     var persistencerequired = request.getParameter('persistencerequired');
     var commitsEnabled = request.getParameter('commitsEnabled');
+    var serviceGroup = request.getParameter('serviceGroup');
 
     if(persistencerequired == "on"){
         persistencerequired = true;
@@ -56,7 +58,7 @@
         removeontermination = false;
     }
     // constructing the json request
-    jsonRequest.cartridgeType = cartridgeType;
+ //   jsonRequest.cartridgeType = cartridgeType;
     jsonRequest.alias = alias;
     jsonRequest.repoURL = repoURL;
     jsonRequest.privateRepo = !isPublicRepo;
@@ -67,15 +69,67 @@
     }
     jsonRequest.autoscalePolicy = autoscalePolicy;
     jsonRequest.deploymentPolicy = deploymentPolicy;
-    if (size != null && size != ""){
-        jsonRequest.size = size;
-    }
+    jsonRequest.size = size;
     jsonRequest.persistanceRequired = persistencerequired;
     jsonRequest.commitsEnabled = commitsEnabled;
     jsonRequest.removeOnTermination = removeontermination;
 
+    if(serviceGroup != undefined) {
+        var step_data = {};
+        step_data =  utils.consoleAppUtil.getCartridges();
+        if(step_data.Error != undefined){
+                error.push(step_data.Error);
+        } else {
+            if(step_data.Error != undefined){
+                error.push(step_data.Error);
+            } else {
+                step_data = step_data.cartridge;
+                for(var i=0;i<step_data.length;i++) {
+                    if(step_data[i].serviceGroup == undefined ||
+                            step_data[i].serviceGroup == null ||
+                            step_data[i].serviceGroup != serviceGroup) {
+                        step_data.splice(i,1);
+                        i = i - 1;
+                    }
+                }
+                log.debug("Service group data : " + stringify(step_data));
+
+                var repoUrl = null;
+                for(var i=0;i<step_data.length;i++) {
+                    //subscribe to cartridges separately which falls in the same service group
+                    jsonRequest.alias = alias + i;
+                    jsonRequest.cartridgeType = step_data[i].cartridgeType;
+
+                    // the following is a great dirty hack to share the same repo between gateway workers and gateway managers :(
+                    if (repoUrl != null && repoUrl != undefined) {
+                        log.debug("Setting previously created internal repo URL " + repoUrl);
+                        // if a repoUrl has been returne with previous subscription response, set it to request params
+                        jsonRequest.repoURL = repoUrl;
+                    }
+
+                    var re = utils.consoleAppUtil.subscribeToCartridge(jsonRequest);
+                    if(re.Error != undefined){
+                            error.push(step_data.Error);
+                    } else {
+                        log.debug("Request :" + stringify(jsonRequest) + ",  \n Response : " + stringify(re)) ;
+                        // check if the repo Url returned in response is valid. If so, assign it to a variable to use in the next
+                        // subscription call
+                        if(re.subscriptionInfo != undefined && re.subscriptionInfo.repositoryURL != undefined &&
+                                re.subscriptionInfo.repositoryURL != null) {
+                            repoUrl = re.subscriptionInfo.repositoryURL;
+                        }
+                    }
+
+                }
+            }
+        }
+
+    } else {
+	 jsonRequest.cartridgeType = cartridgeType;
+        var result = utils.consoleAppUtil.subscribeToCartridge(jsonRequest);
+   }
 
-    var result = utils.consoleAppUtil.subscribeToCartridge(jsonRequest);
     response.sendRedirect(request.getContextPath() + '/index.jag');
 }());
 %>
+
diff --git a/components/org.apache.stratos.manager.console/console/controllers/cartridgeUnsubscribeSubmit.jag b/components/org.apache.stratos.manager.console/console/controllers/cartridgeUnsubscribeSubmit.jag
index afbafd2..3340c73 100644
--- a/components/org.apache.stratos.manager.console/console/controllers/cartridgeUnsubscribeSubmit.jag
+++ b/components/org.apache.stratos.manager.console/console/controllers/cartridgeUnsubscribeSubmit.jag
@@ -20,10 +20,35 @@
  *
  */
 (function(){
-    var log = new Log("controller.cartridgeSubscribeSubmit");
+    var log = new Log("controller.cartridgeUnsubscribeSubmit");
     var utils = require('/util/utility.jag');
     var alias = request.getParameter('alias');
-    var result = utils.consoleAppUtil.unsubscribeCartridge(alias);
+    var serviceGroup = request.getParameter('serviceGroup');
+    var error = [];
+
+    if(serviceGroup != undefined && serviceGroup != null && serviceGroup != "") {
+        var step_data = {};
+        step_data =  utils.consoleAppUtil.getSubscribedCartridges();
+        if(step_data.Error != undefined){
+                error.push(step_data.Error);
+        } else {
+            step_data = step_data.cartridge;
+            for(var i=0;i<step_data.length;i++) {
+                if(step_data[i].serviceGroup == undefined ||
+                        step_data[i].serviceGroup == null ||
+                        step_data[i].serviceGroup != serviceGroup) {
+                    step_data.splice(i,1);
+                    i = i - 1;
+                }
+            }
+            
+            for(var i=0;i<step_data.length;i++) {
+                var result = utils.consoleAppUtil.unsubscribeCartridge(step_data[i].cartridgeAlias);
+            }
+        }
+    } else {
+        var result = utils.consoleAppUtil.unsubscribeCartridge(alias);
+    }
     response.sendRedirect(request.getContextPath() + '/index.jag');
 }());
 %>
diff --git a/components/org.apache.stratos.manager.console/console/controllers/loginSubmit.jag b/components/org.apache.stratos.manager.console/console/controllers/loginSubmit.jag
index 52af115..71065dc 100644
--- a/components/org.apache.stratos.manager.console/console/controllers/loginSubmit.jag
+++ b/components/org.apache.stratos.manager.console/console/controllers/loginSubmit.jag
@@ -47,6 +47,7 @@
             session.put("USER_NAME",username);
             session.put("TENANT_DOMAIN",userObject.domain);
             session.put("ROLE_ARRAY",roles);
+            session.put("TENANT_ID",userObject.tenantId);
             //call the authentication rest-endpoint and get the JSESSION_ID
             var result =  utils.consoleAppUtil.getSessionCookie(username,password);
             //TODO: handle the error scenario
diff --git a/components/org.apache.stratos.manager.console/console/controllers/mycartridges.jag b/components/org.apache.stratos.manager.console/console/controllers/mycartridges.jag
index ef6516c..1b0e662 100644
--- a/components/org.apache.stratos.manager.console/console/controllers/mycartridges.jag
+++ b/components/org.apache.stratos.manager.console/console/controllers/mycartridges.jag
@@ -24,7 +24,7 @@
     var utils = require('/util/utility.jag');
     var action = request.getParameter("action");
     var alias = request.getParameter("alias");
-    log.info("Action : " + action + "  Alias is: " + alias);
+    log.debug("Action : " + action + "  Alias is: " + alias);
 
     if(action == "sync"){
         utils.consoleAppUtil.syncRepo(alias);
diff --git a/components/org.apache.stratos.manager.console/console/index.jag b/components/org.apache.stratos.manager.console/console/index.jag
index 89f49bf..7c4149f 100644
--- a/components/org.apache.stratos.manager.console/console/index.jag
+++ b/components/org.apache.stratos.manager.console/console/index.jag
@@ -23,12 +23,17 @@ var log = new Log("console.index");
 var error=[];
 var caramel = require('caramel');
 var utils = require('/util/utility.jag');
+var process = require('process');
+
 var subscribedCartridges =  utils.consoleAppUtil.getSubscribedCartridges();
 if(subscribedCartridges.Error != undefined){
     error.push(subscribedCartridges.Error);
 }
+
+var bamInfo ={bamip:process.getProperty('bam.ip'),bamport:process.getProperty('bam.port')};
 caramel.render({
     mycartridges:subscribedCartridges,
+    bamInfo:bamInfo,
     error:error
 });
 %>
diff --git a/components/org.apache.stratos.manager.console/console/subscribe_cartridge.jag b/components/org.apache.stratos.manager.console/console/subscribe_cartridge.jag
index cb08f8a..c73208b 100644
--- a/components/org.apache.stratos.manager.console/console/subscribe_cartridge.jag
+++ b/components/org.apache.stratos.manager.console/console/subscribe_cartridge.jag
@@ -23,6 +23,7 @@ var log = new Log("subscribe_cartridge");
 var error = [];
 var caramel = require('caramel');
 var utils = require('/util/utility.jag');
+var process = require('process');
 var type = request.getParameter('cartridgeType');
 var autoScalePolicies = utils.consoleAppUtil.getAutoScalePolicies();
 var deploymentPolicies = utils.consoleAppUtil.getApplicableDeploymentPolicies(type);
@@ -39,12 +40,13 @@ if(autoScalePolicies.Error != undefined ){
     error.push(mtServiceInfo.Error);
 }
 
-
+var bamInfo ={bamip:process.getProperty('bam.ip'),bamport:process.getProperty('bam.port')};
 caramel.render({
-        cartridge:cartridge,
-        autoScalePolicies:autoScalePolicies,
-        deploymentPolicies:deploymentPolicies,
-        mtServiceInfo:mtServiceInfo,
-        error:error
+    cartridge:cartridge,
+    autoScalePolicies:autoScalePolicies,
+    deploymentPolicies:deploymentPolicies,
+    mtServiceInfo:mtServiceInfo,
+    bamInfo:bamInfo,
+    error:error
 });
 %>
diff --git a/components/org.apache.stratos.manager.console/console/tenant_management.jag b/components/org.apache.stratos.manager.console/console/tenant_management.jag
index 9039b0d..f805717 100644
--- a/components/org.apache.stratos.manager.console/console/tenant_management.jag
+++ b/components/org.apache.stratos.manager.console/console/tenant_management.jag
@@ -23,12 +23,15 @@ var log = new Log("console.tenant_management");
 var caramel = require('caramel');
 var error = [];
 var utils = require('/util/utility.jag');
+var process = require('process');
 var tenants =  utils.consoleAppUtil.getTenants();
 if(tenants.Error != undefined){
     error.push(tenants.Error);
 }
+var bamInfo ={bamip:process.getProperty('bam.ip'),bamport:process.getProperty('bam.port')};
 caramel.render({
     tenants:tenants,
+    bamInfo:bamInfo,
     error:error
 });
 %>
diff --git a/components/org.apache.stratos.manager.console/console/themes/theme1/pages/index.hbs b/components/org.apache.stratos.manager.console/console/themes/theme1/pages/index.hbs
index f32f006..ed589e4 100644
--- a/components/org.apache.stratos.manager.console/console/themes/theme1/pages/index.hbs
+++ b/components/org.apache.stratos.manager.console/console/themes/theme1/pages/index.hbs
@@ -96,7 +96,7 @@
     <div class="modal-content">
         <div class="modal-header">
             <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
-            <h4 class="modal-title" id="myModalLabel">Modal title</h4>
+            <h4 class="modal-title" id="myModalLabel"></h4>
         </div>
         <div class="modal-body">
             ...
diff --git a/components/org.apache.stratos.manager.console/console/themes/theme1/partials/cartridge_info.hbs b/components/org.apache.stratos.manager.console/console/themes/theme1/partials/cartridge_info.hbs
old mode 100644
new mode 100755
index 587c12d..fec4a57
--- a/components/org.apache.stratos.manager.console/console/themes/theme1/partials/cartridge_info.hbs
+++ b/components/org.apache.stratos.manager.console/console/themes/theme1/partials/cartridge_info.hbs
@@ -98,22 +98,24 @@
 
         {{/if}}
 
-        {{#if lbclusterinfo.member}}
+       {{#each lbclusterinfo}}
+        {{#if member}}
             <div class="data-title">LB Private ip:</div>
             <div>
-                {{#each lbclusterinfo.member}}
+                {{#each member}}
                           {{memberIp}};
                 {{/each}}
              </div>
 
              <div class="data-title">LB Public ip:</div>
             <div>
-                {{#each lbclusterinfo.member}}
+                {{#each member}}
                           {{memberPublicIp}};
                 {{/each}}
              </div>
 
         {{/if}}
+       {{/each}}
 
         <div>
         </div>
diff --git a/components/org.apache.stratos.manager.console/console/themes/theme1/partials/cartridge_info_sg.hbs b/components/org.apache.stratos.manager.console/console/themes/theme1/partials/cartridge_info_sg.hbs
new file mode 100644
index 0000000..a72dfcd
--- /dev/null
+++ b/components/org.apache.stratos.manager.console/console/themes/theme1/partials/cartridge_info_sg.hbs
@@ -0,0 +1,125 @@
+<!--
+
+ Licensed to the Apache Software Foundation (ASF) under one
+ or more contributor license agreements.  See the NOTICE file
+ distributed with this work for additional information
+ regarding copyright ownership.  The ASF licenses this file
+ to you under the Apache License, Version 2.0 (the
+ "License"); you may not use this file except in compliance
+ with the License.  You may obtain a copy of the License at
+
+   http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing,
+ software distributed under the License is distributed on an
+ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ KIND, either express or implied.  See the License for the
+ specific language governing permissions and limitations
+ under the License.
+
+-->
+
+<div class="container content-starter">
+    <div class="row">
+        <div class="col-lg-12">
+            <h1><i class="icons-default icons-{{cartridgeType}} big-pro-icons"></i> {{serviceGroup}})</h1>
+        </div>
+    </div>
+</div>
+
+<div class="container">
+    <div class="row">
+        <div class="col-lg-12">
+            {{#each cartridges}}
+            <div style="padding: 10px; margin:10px 0;border: solid 1px #ccc;background: #efefef;">
+                <div style="margin-bottom:20px;">{{description}}</div>
+
+                <div class="data-title">Access URLs:</div>
+                {{#each portMappings}}
+                <div>
+                    <a target="_blank" href="{{protocol}}://{{../hostName}}:{{proxyPort}}">{{protocol}}://{{../hostName}}:{{proxyPort}}</a>
+                </div>
+                {{/each}}
+
+                <div class="data-title">ActiveInstances:</div>
+                <div>{{activeInstances}}</div>
+
+                <div class="data-title">CartridgeAlias:</div>
+                <div>{{cartridgeAlias}}</div>
+
+                <div class="data-title">CartridgeType:</div>
+                <div>{{cartridgeType}}</div>
+
+                <div class="data-title">HostName:</div>
+                <div>{{hostName}}</div>
+
+                <div class="data-title">Version:</div>
+                <div>{{version}}</div>
+
+                <div class="data-title">Tenancy Model:</div>
+                 {{#if multiTenant}}
+                    <div>Multi Tenant</div>
+
+                {{else}}
+                    <div>Single Tenant</div>
+                 {{/if}}
+
+
+                <div class="data-title">Provider:</div>
+                <div>{{provider}}</div>
+
+                {{#if repoURL }}
+                   <div class="data-title">RepoURL</div>
+                    <div>{{repoURL}}</div>
+                {{/if}}
+
+                {{#ifCond provider "==" "data"}}
+
+                    <div class="data-title">UserName</div>
+                    <div>{{dbUserName}}</div>
+
+                    <div class="data-title">Password</div>
+                    <div>{{password}}</div>
+
+                {{/ifCond}}
+                {{#if clusterinfo.member}}
+                    <div class="data-title">Members Private ip(s):</div>
+                    <div>
+                        {{#each clusterinfo.member}}
+                          {{memberIp}}
+                        {{/each}}
+                     </div>
+
+                     <div class="data-title">Members Public ip(s):</div>
+                    <div>
+                        {{#each clusterinfo.member}}
+                          {{memberPublicIp}}
+                        {{/each}}
+                     </div>
+
+                {{/if}}
+
+                {{#if lbclusterinfo.member}}
+                    <div class="data-title">LB Private ip:</div>
+                    <div>
+                        {{#each lbclusterinfo.member}}
+                                  {{memberIp}};
+                        {{/each}}
+                     </div>
+
+                     <div class="data-title">LB Public ip:</div>
+                    <div>
+                        {{#each lbclusterinfo.member}}
+                                  {{memberPublicIp}};
+                        {{/each}}
+                     </div>
+
+                {{/if}}
+
+                <div>
+                </div>
+            </div>
+            {{/each}}
+        </div>
+    </div>
+</div>
diff --git a/components/org.apache.stratos.manager.console/console/themes/theme1/partials/cartridges.hbs b/components/org.apache.stratos.manager.console/console/themes/theme1/partials/cartridges.hbs
old mode 100644
new mode 100755
index f7335da..42d71a1
--- a/components/org.apache.stratos.manager.console/console/themes/theme1/partials/cartridges.hbs
+++ b/components/org.apache.stratos.manager.console/console/themes/theme1/partials/cartridges.hbs
@@ -41,7 +41,7 @@
 
                         </div>
                         <div class="col-lg-9">
-                            <a  href="{{url "/subscribe_cartridge.jag"}}?cartridgeType={{cartridgeType}}&serviceGroup={{serviceGroup}}"><h3>{{serviceGroup}}</h3></a>
+                            <a  href="{{url "/subscribe_cartridge.jag"}}?cartridgeType={{cartridgeType}}&serviceGroup={{serviceGroup}}"><h3>{{serviceGroup}} - {{version}}</h3></a>
 
                             {{#each items}}
                                 <div class="serviceGroup-child-wrapper">
diff --git a/components/org.apache.stratos.manager.console/console/themes/theme1/partials/configure_stratos_wizard.hbs b/components/org.apache.stratos.manager.console/console/themes/theme1/partials/configure_stratos_wizard.hbs
old mode 100644
new mode 100755
index 5f9ea27..8b04c22
--- a/components/org.apache.stratos.manager.console/console/themes/theme1/partials/configure_stratos_wizard.hbs
+++ b/components/org.apache.stratos.manager.console/console/themes/theme1/partials/configure_stratos_wizard.hbs
@@ -303,23 +303,21 @@
                                             <i class="icons-help"></i>
                                             Example configuration:
                                             <pre>
-                                            {
-                                                "id": "economyPolicy",
-                                                "loadThresholds": {
-                                                  "requestsInFlight": {
-						    "upperLimit": "80",
-						    "lowerLimit": "20"
-                                                  },
-                                                  "memoryConsumption": {
-						    "upperLimit": "80",
-                                                    "lowerLimit": "20"
-                                                  },
-                                                  "loadAverage": {
-						    "upperLimit": "80",
-                                                    "lowerLimit": "20"
-                                                  }
-                                                }
-                                              }
+                                                  {
+                                                   "id": "autoscale-policy-1",
+                                                   "loadThresholds": {
+                                                     "requestsInFlight": {
+                                                       "average": 50
+                                                     },
+                                                     "memoryConsumption": {
+                                                       "average": 70
+                                                     },
+                                                     "loadAverage": {
+                                                       "average": 100
+                                                     }
+                                                   }
+                                                 }
+
 
                                             </pre>
                                         </div>
diff --git a/components/org.apache.stratos.manager.console/console/themes/theme1/partials/header.hbs b/components/org.apache.stratos.manager.console/console/themes/theme1/partials/header.hbs
old mode 100644
new mode 100755
index dca5316..91f1c3b
--- a/components/org.apache.stratos.manager.console/console/themes/theme1/partials/header.hbs
+++ b/components/org.apache.stratos.manager.console/console/themes/theme1/partials/header.hbs
@@ -44,6 +44,7 @@
                         <li {{#if my_cartridges}} class="active" {{/if}}><a href="{{url "/"}}"><i class="icons-default"></i>  <span><br>My Cartridges</span></a></li>
                         {{#isAllowed "configure"}}<li {{#if configure_stratos}} class="active" {{/if}}><a href="{{url "/configure_stratos.jag"}}"><i class="icons-config"></i> <span><br>Configure Stratos</span></a></li>{{/isAllowed}}
                         {{#isAllowed "tenant-mgt"}}<li {{#if tenant_mgt}} class="active" {{/if}}><a href="{{url "/tenant_management.jag"}}"><i class="icons-users"></i> <span><br>Tenant Mgt</span></a></li>{{/isAllowed}}
+                        <!-- <li><a target="_blank" href="https://{{bamInfo.bamip}}:{{bamInfo.bamport}}/bamdashboards/private_paas_metering/index.jsp?tenantId={{#tenantID}}{{/tenantID}}&domain={{#domain}}{{/domain}}"><i class="icons-art-gallery"></i><span><br>Dashboard</span></a></li> -->
                      </ul>
                      <ul class="pull-right">
                      <li class="dropdown">
diff --git a/components/org.apache.stratos.manager.console/console/themes/theme1/partials/mycartridges.hbs b/components/org.apache.stratos.manager.console/console/themes/theme1/partials/mycartridges.hbs
old mode 100644
new mode 100755
index 2f4e25f..ee49e3b
--- a/components/org.apache.stratos.manager.console/console/themes/theme1/partials/mycartridges.hbs
+++ b/components/org.apache.stratos.manager.console/console/themes/theme1/partials/mycartridges.hbs
@@ -42,10 +42,10 @@
                         </div>
                         <div class="col-lg-9">
                             {{#unless loadBalancer}}
-                            <div class="un-subscribe-container"><a class="un-subscribe un-subscribe-btn" data-alias="{{cartridgeAlias}}">Un-subscribe <i class=" icons-circle-close"></i></a></div>
+                            <div class="un-subscribe-container"><a class="un-subscribe un-subscribe-btn" service-group="{{serviceGroup}}" data-alias="{{cartridgeAlias}}">Un-subscribe <i class=" icons-circle-close"></i></a></div>
                             {{/unless}}
 
-                            <a  href="{{url "/cartridge_info.jag?alias="}}{{cartridgeAlias}}&serviceGroup={{serviceGroup}}"><h3>{{serviceGroup}}</h3></a>
+                            <a  href="{{url "/cartridge_info_sg.jag?"}}serviceGroup={{serviceGroup}}"><h3>{{serviceGroup}}</h3></a>
 
                             {{#each items}}
                             <div class="serviceGroup-child-wrapper">
@@ -92,6 +92,7 @@
 
 <form method="post" id="cForm" action="{{url "/controllers/cartridgeUnsubscribeSubmit.jag"}}">
         <input type="hidden" name="alias" id="alias" />
+        <input type="hidden" name="serviceGroup" id="serviceGroup" />
 </form>
 <script src="{{url "/themes/theme1/ui/js/popup.js"}}"></script>
 <script src="{{url "/themes/theme1/ui/js/mycartridges.js"}}"></script>
diff --git a/components/org.apache.stratos.manager.console/console/themes/theme1/partials/subscribe_cartridge.hbs b/components/org.apache.stratos.manager.console/console/themes/theme1/partials/subscribe_cartridge.hbs
old mode 100644
new mode 100755
index 9841270..dac2461
--- a/components/org.apache.stratos.manager.console/console/themes/theme1/partials/subscribe_cartridge.hbs
+++ b/components/org.apache.stratos.manager.console/console/themes/theme1/partials/subscribe_cartridge.hbs
@@ -22,7 +22,11 @@
 <div class="container content-starter">
     <div class="row">
         <div class="col-lg-12">
-            <h1>{{cartridgeType}} {{cartridge.version}} Cartridge</h1>
+            {{#if cartridge.serviceGroup}}
+                <h1>{{serviceGroup}} Service Group</h1>
+            {{else}}
+                <h1>{{cartridgeType}} {{cartridge.version}} Cartridge</h1>
+            {{/if}}
         </div>
     </div>
 </div>
@@ -31,8 +35,15 @@
     <div class="row">
         <div class="col-lg-12">
             <form method="post" role="form" action="{{url "/controllers/cartridgeSubscribeSubmit.jag"}}" id="subscribeCartridgeForm">
+	        {{#if cartridge.serviceGroup}}
+                <input name="serviceGroup" type="hidden" value="{{serviceGroup}}" />
+            {{/if}}
             <div class="form-group">
+            {{#if cartridge.multiTenant}}
+                <label class="required">Subscription Alias:</label>
+	    {{else}}
                 <label class="required">Public URL:</label>
+	    {{/if}}
                 <div class="form-inline">
                     <input name="cartridgeType" type="hidden" value="{{cartridgeType}}"/>
                     <input name="alias"
@@ -42,7 +53,10 @@
                            data-help-x-offset="50"
                            data-help-y-offset="10"
                            placeholder="myphp" />
+		{{#unless cartridge.multiTenant}}
                     <label>.{{cartridge.hostName}}</label>
+                {{/unless}}
+
                 </div>
             </div>
 
@@ -50,23 +64,66 @@
             {{#ifCond cartridge.provider "==" "data"}}
             {{else}}
             {{#ifCond cartridge.provider "==" "application"}}
+                {{#if cartridge.serviceGroup}}
+                     <div class="form-group">
+                             <label class="required">Repo URL:</label>
+                             <div class="form-inline">
+                                 <input name="repoURL"
+                                        type="text"
+                                        class="form-control input-xlarge js-help"
+                                        data-help="Specify a repository URL of the artifacts."
+                                        data-help-x-offset="50"
+                                        data-help-y-offset="10"
+                                        placeholder="https://github.com/test/mytestphp.git" />
+                             </div>
+                     {{#unless cartridge.multiTenant}}
+                    <div class="checkbox">
+                                 <label>
+                                     <input id="commitsEnabled" name="commitsEnabled" type="checkbox" /> Auto Commit
+                                 </label>
+                             </div>
+                             {{/unless}}
+                             <div class="checkbox">
+                                 <label>
+                                     <input name="isPublicRepo" type="checkbox" checked="checked" id="public_check" /> This is a public repository
+                                 </label>
+                             </div>
+                         </div>
+                     <div id="credential_container" style="display: none;padding-left:20px;margin-left:20px; background: #efefef;padding-bottom:10px;margin-bottom:10px;">
+                         <h2>Provide Credentials</h2>
+                         <div class="form-group">
+                             <label class="required">Username:</label>
+                             <div class="form-inline">
+                                 <input name="repoUsername" class="required form-control input-xlarge" placeholder="username"/>
+                             </div>
+                         </div>
+                         <div class="form-group">
+                             <label class="required">Password:</label>
+                             <div class="form-inline">
+                                 <input name="repoPassword" type="password" class="required form-control input-xlarge" placeholder="******"/>
+                             </div>
+                         </div>
+                     </div>
+                {{/if}}
             {{else}}
                 <div class="form-group">
                     <label class="required">Repo URL:</label>
                     <div class="form-inline">
                         <input name="repoURL"
                                type="text"
-                               class="required form-control input-xlarge js-help"
+                               class="form-control input-xlarge js-help"
                                data-help="Specify a repository URL of the artifacts."
                                data-help-x-offset="50"
                                data-help-y-offset="10"
                                placeholder="https://github.com/test/mytestphp.git" />
                     </div>
+            {{#unless cartridge.multiTenant}}
 		    <div class="checkbox">
                         <label>
                             <input id="commitsEnabled" name="commitsEnabled" type="checkbox" /> Auto Commit
                         </label>
                     </div>
+                    {{/unless}}
                     <div class="checkbox">
                         <label>
                             <input name="isPublicRepo" type="checkbox" checked="checked" id="public_check" /> This is a public repository
@@ -204,7 +261,7 @@
         var $commitsEnabled = $('#commitsEnabled');
 
         var toggleCredentials = function(){
-            if($public_check.is(':checked') && !$commitsEnabled.is(":checked") ){
+            if($public_check.is(':checked')){
                 $('#credential_container').hide();
             }else{
                 $('#credential_container').show();
diff --git a/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/cartridge_info.js b/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/cartridge_info.js
old mode 100644
new mode 100755
index a4b3cb9..beee3a3
--- a/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/cartridge_info.js
+++ b/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/cartridge_info.js
@@ -46,6 +46,7 @@ var render = function (theme, data, meta, require) {
                             class_name:"btn-default",
                             class_icon: 'icons-arrow-left'
                         },
+                        bamInfo:data.bamInfo,
                         has_help:false,
                         help:'Create cartridges like PHP, Python, Ruby etc.. Or create data cartridges with mySql, PostgreSQL. Directly install applications like Drupal, Wordpress etc..'
                     }
@@ -82,7 +83,7 @@ var render = function (theme, data, meta, require) {
                             name: 'Subscribe to Cartridge',
                             class_name: 'btn-important'
                         },
-                        has_help:false,
+                        has_help: true,
                         help: 'Create cartridges like PHP, Python, Ruby etc.. Or create data cartridges with mySql, PostgreSQL. Directly install applications like Drupal, Wordpress etc..'
                     }
                 }
diff --git a/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/cartridge_info_sg.js b/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/cartridge_info_sg.js
new file mode 100644
index 0000000..cf7fe0e
--- /dev/null
+++ b/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/cartridge_info_sg.js
@@ -0,0 +1,99 @@
+/*
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ *
+*/
+
+var render = function (theme, data, meta, require) {
+    if(data.error.length == 0 ){
+        theme('index', {
+            body: [
+                {
+                    partial: 'cartridge_info_sg',
+                    context: {
+                        title:'Cartridges',
+                        cartridges:data.cartridges,
+                        serviceGroup:data.serviceGroup
+                    }
+                }
+            ],
+            header: [
+                {
+                    partial: 'header',
+                    context:{
+                        title:'Cartridges',
+                        my_cartridges:true,
+                        button:{
+                            link:'/',
+                            name:'Back To My Cartridges',
+                            class_name:"btn-default",
+                            class_icon: 'icons-arrow-left'
+                        },
+                        bamInfo:data.bamInfo,
+                        has_help:false,
+                        help:'Create cartridges like PHP, Python, Ruby etc.. Or create data cartridges with mySql, PostgreSQL. Directly install applications like Drupal, Wordpress etc..'
+                    }
+                }
+            ],
+            title:[
+                {
+                    partial:'title',
+                    context:{
+                        title:"My Cartridges"
+                    }
+                }
+            ]
+        });
+    }else{
+        theme('index', {
+            body: [
+                {
+                    partial: 'error_page',
+                    context: {
+                        title:'Error',
+                        error:data.error
+                    }
+                }
+            ],
+            header: [
+                {
+                    partial: 'header',
+                    context: {
+                        title: 'My Cartridges',
+                        my_cartridges: true,
+                        button: {
+                            link: '/cartridges.jag',
+                            name: 'Subscribe to Cartridge',
+                            class_name: 'btn-important'
+                        },
+                        has_help: true,
+                        help: 'Create cartridges like PHP, Python, Ruby etc.. Or create data cartridges with mySql, PostgreSQL. Directly install applications like Drupal, Wordpress etc..'
+                    }
+                }
+            ],
+            title: [
+                {
+                    partial: 'title',
+                    context: {
+                        title: "My Cartridges"
+                    }
+                }
+            ]
+        });
+    }
+};
diff --git a/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/cartridges.js b/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/cartridges.js
old mode 100644
new mode 100755
index 342639e..9555101
--- a/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/cartridges.js
+++ b/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/cartridges.js
@@ -28,7 +28,6 @@ var render = function (theme, data, meta, require) {
         var cartridges = data.cartridges.cartridge,cartridges_new =[];
 
 
-
         for (var i = 0; i < cartridges.length; i++) {
             if(cartridges[i].serviceGroup != undefined){
                 if(!cartridges[i].done){
@@ -37,9 +36,10 @@ var render = function (theme, data, meta, require) {
                     var newObj = {};
                     var serviceGroup = cartridges[i].serviceGroup;
                     newObj.serviceGroup = serviceGroup;
+                    newObj.cartridgeType = cartridges[i].cartridgeType;
                     newObj.items = [];
                     newObj.items.push(parse(stringify(cartridges[i])));
-
+                    newObj.version = cartridges[i].version;
                     for (var j = 0; j < cartridges.length; j++) {
                         if(cartridges[j].serviceGroup == serviceGroup && !cartridges[j].done){
                             cartridges[j].done =true;
@@ -106,6 +106,7 @@ var render = function (theme, data, meta, require) {
                             class_name:"btn-default",
                             class_icon: 'icons-arrow-left'
                         },
+                        bamInfo:data.bamInfo,
                         has_help:false,
                         help:'Create cartridges like PHP, Python, Ruby etc.. Or create data cartridges with mySql, PostgreSQL. Directly install applications like Drupal, Wordpress etc..'
                     }
@@ -142,7 +143,7 @@ var render = function (theme, data, meta, require) {
                             name: 'Subscribe to Cartridge',
                             class_name: 'btn-important'
                         },
-                        has_help:false,
+                        has_help: true,
                         help: 'Create cartridges like PHP, Python, Ruby etc.. Or create data cartridges with mySql, PostgreSQL. Directly install applications like Drupal, Wordpress etc..'
                     }
                 }
diff --git a/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/configure_stratos.js b/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/configure_stratos.js
old mode 100644
new mode 100755
index 623c61a..46aab9f
--- a/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/configure_stratos.js
+++ b/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/configure_stratos.js
@@ -127,6 +127,7 @@ var render = function (theme, data, meta, require) {
                         name:'Deploy New Cartridge',
                         class_name:''
                     },
+                    bamInfo:data.bamInfo,
                     has_help:false,
                     step_data:true,
                     config_status:data.config_status,
diff --git a/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/configure_stratos_wizard.js b/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/configure_stratos_wizard.js
old mode 100644
new mode 100755
index ef0f522..2c2d4c6
--- a/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/configure_stratos_wizard.js
+++ b/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/configure_stratos_wizard.js
@@ -120,6 +120,7 @@ var render = function (theme, data, meta, require) {
                         name:'Deploy New Cartridge',
                         class_name:''
                     },
+                    bamInfo:data.bamInfo,
                     has_help:false,
                     step_data:true,
                     config_status:data.config_status,
diff --git a/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/dashboard.js b/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/dashboard.js
old mode 100644
new mode 100755
index 2fe10ce..4d6ca5e
--- a/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/dashboard.js
+++ b/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/dashboard.js
@@ -44,7 +44,7 @@ var render = function (theme, data, meta, require) {
                             name: 'Subscribe to Cartridge',
                             class_name: 'btn-important'
                         },
-                        has_help:false,
+                        has_help: true,
                         help: 'Dashboard visually represents the network topology. You can click and view details of each node from the user interface.'
                     }
                 }
@@ -80,7 +80,7 @@ var render = function (theme, data, meta, require) {
                             name: 'Subscribe to Cartridge',
                             class_name: 'btn-important'
                         },
-                        has_help:false,
+                        has_help: true,
                         help: 'Create cartridges like PHP, Python, Ruby etc.. Or create data cartridges with mySql, PostgreSQL. Directly install applications like Drupal, Wordpress etc..'
                     }
                 }
diff --git a/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/index.js b/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/index.js
old mode 100644
new mode 100755
index cfc9c35..f833e53
--- a/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/index.js
+++ b/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/index.js
@@ -125,7 +125,8 @@ var render = function (theme, data, meta, require) {
                             name: 'Subscribe to Cartridge',
                             class_name: 'btn-important'
                         },
-                        has_help:false,
+                        bamInfo:data.bamInfo,
+                        has_help: true,
                         help: 'Create cartridges like PHP, Python, Ruby etc.. Or create data cartridges with mySql, PostgreSQL. Directly install applications like Drupal, Wordpress etc..'
                     }
                 }
@@ -161,7 +162,7 @@ var render = function (theme, data, meta, require) {
                             name: 'Subscribe to Cartridge',
                             class_name: 'btn-important'
                         },
-                        has_help:false,
+                        has_help: true,
                         help: 'Create cartridges like PHP, Python, Ruby etc.. Or create data cartridges with mySql, PostgreSQL. Directly install applications like Drupal, Wordpress etc..'
                     }
                 }
diff --git a/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/subscribe_cartridge.js b/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/subscribe_cartridge.js
old mode 100644
new mode 100755
index 433baf0..a06af06
--- a/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/subscribe_cartridge.js
+++ b/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/subscribe_cartridge.js
@@ -34,7 +34,8 @@ var render = function (theme, data, meta, require) {
                         deploymentPolicies:data.deploymentPolicies.deploymentPolicy,
                         mtServiceInfo:data.mtServiceInfo.serviceDefinitionBean,
                         cartridge:cartridge,
-                        cartridgeType:meta.request.getParameter('cartridgeType')
+                        cartridgeType:meta.request.getParameter('cartridgeType'),
+                        serviceGroup:meta.request.getParameter('serviceGroup')
                     }
                 }
             ],
@@ -50,6 +51,7 @@ var render = function (theme, data, meta, require) {
                                     class_name: "btn-default",
                                     class_icon: "icon-arrow-left"
                                 },
+                                bamInfo:data.bamInfo,
                                 has_help:false,
                                 help:'Create cartridges like PHP, Python, Ruby etc.. Or create data cartridges with mySql, PostgreSQL. Directly install applications like Drupal, Wordpress etc..'
                             }
@@ -87,7 +89,7 @@ var render = function (theme, data, meta, require) {
                             name: 'Subscribe to Cartridge',
                             class_name: 'btn-important'
                         },
-                        has_help:false,
+                        has_help: true,
                         help: 'Create cartridges like PHP, Python, Ruby etc.. Or create data cartridges with mySql, PostgreSQL. Directly install applications like Drupal, Wordpress etc..'
                     }
                 }
diff --git a/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/tenant_management.js b/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/tenant_management.js
old mode 100644
new mode 100755
index 0f8e511..8c8de86
--- a/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/tenant_management.js
+++ b/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/tenant_management.js
@@ -45,6 +45,7 @@ var render = function (theme, data, meta, require) {
                             name:'Add New Tenant',
                             class_name:create_btn_class
                         },
+                        bamInfo:data.bamInfo,
                         has_help:false,
                         help:"Tenants you create has permission to view and subscribe to Cartridges. Tenants don't have permission to do Partition deployment, Policy deployment, LB Creation, and MT service deployment.",
                         tenant_mgt:true,
@@ -83,7 +84,8 @@ var render = function (theme, data, meta, require) {
                             name: 'Subscribe to Cartridge',
                             class_name: 'btn-important'
                         },
-                        has_help:false,
+                        bamInfo:data.bamInfo,
+                        has_help: true,
                         help: 'Create cartridges like PHP, Python, Ruby etc.. Or create data cartridges with mySql, PostgreSQL. Directly install applications like Drupal, Wordpress etc..'
                     }
                 }
diff --git a/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/tenant_new.js b/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/tenant_new.js
old mode 100644
new mode 100755
index 8e678f5..a7c9bc2
--- a/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/tenant_new.js
+++ b/components/org.apache.stratos.manager.console/console/themes/theme1/renderers/tenant_new.js
@@ -45,7 +45,8 @@ var render = function (theme, data, meta, require) {
                         class_name: create_btn_class,
                         class_icon: 'icons-arrow-left'
                     },
-                    has_help:false,
+                    bamInfo:data.bamInfo,
+                    has_help: true,
                     help: "Tenants you create has permission to view and subscribe to Cartridges. Tenants don't have permission to do Partition deployment, Policy deployment, LB Creation, and MT service deployment.",
                     tenant_mgt: true
                 }
diff --git a/components/org.apache.stratos.manager.console/console/themes/theme1/theme.js b/components/org.apache.stratos.manager.console/console/themes/theme1/theme.js
index bd1d015..2d42592 100644
--- a/components/org.apache.stratos.manager.console/console/themes/theme1/theme.js
+++ b/components/org.apache.stratos.manager.console/console/themes/theme1/theme.js
@@ -86,6 +86,19 @@ var engine = require('caramel').engine('handlebars', (function () {
                 return "";
             });
 
+            Handlebars.registerHelper('domain', function(action, options) {
+                if(caramel.meta().session.get("TENANT_DOMAIN") != undefined ) {
+                    return caramel.meta().session.get("TENANT_DOMAIN");
+                }
+                return "";
+            });
+            Handlebars.registerHelper('tenantID', function(action, options) {
+                if(caramel.meta().session.get("TENANT_ID") != undefined ) {
+                    return caramel.meta().session.get("TENANT_ID");
+                }
+                return "";
+            });
+
         }
     }
 }()));
diff --git a/components/org.apache.stratos.manager.console/console/themes/theme1/ui/css/main.css b/components/org.apache.stratos.manager.console/console/themes/theme1/ui/css/main.css
index 892f78e..6a95b0a 100644
--- a/components/org.apache.stratos.manager.console/console/themes/theme1/ui/css/main.css
+++ b/components/org.apache.stratos.manager.console/console/themes/theme1/ui/css/main.css
@@ -668,5 +668,10 @@ label.error{
     white-space: nowrap;
 }
 pre{
-   margin-top:20px;
-}
\ No newline at end of file
+    margin-top:20px;
+}
+.serviceGroup-child-wrapper{
+    border-top: solid 1px #ccc;
+    margin-bottom:5px;
+    margin-top:10px;
+}
diff --git a/components/org.apache.stratos.manager.console/console/themes/theme1/ui/img/egg-logo.png b/components/org.apache.stratos.manager.console/console/themes/theme1/ui/img/egg-logo.png
new file mode 100755
index 0000000000000000000000000000000000000000..7dc6065f1eb4600c48618dbebca1b7f857f6f047
GIT binary patch
literal 8299
zcmV-xAe7&UP)<h;3K|Lk000e1NJLTq007_s001=z1^@s6Sl;J-00006VoOIv0RI60
z0RN!9r;`8x010qNS#tmY4c7nw4c7reD4Tcy000McNliru-3$s05fc_fGoAndANWZ`
zK~#9!?R|HgT~)dE^RBh`DRX8rGs&cfG)N<q7&-z15d>7=(k>`UQ9!D|Cx`{dTrVhM
zSNIS`KDY{8DL+J1BuIxKhLDgT>6x^dwCQu&-fO+@_s3q7IXRq3nG_N@&+oTq&e?0X
zv-f)Tdix>~K^bL~@xefqZ$TMllnGcy8D#>NQAQbM0+#U+0TKBh^?Ts$&XfJ}m(%+t
zG{z<qsqw=`j6P5ZK|Y)52y)rx*5=mNFS+uTW#w-9p&(X204yS1rP^=0>82xUYimDw
z)>&sgKtyXr#C&A$)$Xu@-f_n*)q`uRPM-3y<4&&|G;~-+s;Ukk&gQyW+gh8OHg0TO
z*SLE51``CUgIxIXm#+TSigGvJ>q&S6fPMh(6_KXGwx9p}=d-oeO`V;cBR6c=aMekx
zep(q4PRnO7Y{qO<<^>C12fnvtEt*Ay%LMEr?!Dp)KR3Sih$D_X@xpPFrW_md;|UQl
z9qlbE7cZLo*2c9>El>cM!3<a!SQ9cE^VAnF`^KV=Kqoy2z*IL{Joq8}eV+p`9l)~y
zek~&J0Ko0H-~NiVb|2sOhs~Nb>(C#({^$Q~Px}>Jp&vg)XY+IF^6~yt5VT~G$;9wp
zHjY*OhokfP_4sN1L$a|<z-_?v=~q`y8n^$Y$DerSMOD=`Lq)`9x;h&dFM4O@y2j;=
zP(GB?K$!usg|P-~3<6`=1erfwe8smH@8k|K8o=8C$gP?tB5!?w9rRWJ{{<ivk=Tdy
zB{K@Zj{tlYz|#Qkz2Sx%hKk62$z&2;&(Ha<OaGa^xDDE$h`21o8vhuyW#81D6{%D%
zuj5ATv!B?-!)&Z#D)R6B6CH!nm@%&v4_^6JMCdXBi}2&=SJdr4<(O-aop$;qu~@u<
zE!)O54X@9g{mL8Ki-}SSS}7<fFd_-VGQ$`H4nr6dARp#zAlduB^riZio!A+^<KD=d
z)KU?-u1vt)@>|aWa2bG40(j$$GtQ_D!*GInyZt*yHI2Wz1|E%oXAeYx2CP&2Ag~#9
zsBy^Jxq5lxh{4(H%U#LD(UQ+EOd8E2tgNm?TTp@d=>+b(@JYO|H;St}oq#`_e%**8
zkNM;+M;?391xk6o3B$~ScW3>np<%&N&x^zNJSgo$sR9EmGuT=fV-T`|$!C!_0m6KC
z*%!b3jmLIkCs+btUjR7(2>=@b3=@&CV4I5p)Bu<dU_F2{oi6id5qYU#yYm1X2w;dC
zQP%)?Mnq;7ozn+!4uFH*aaIC&T14g-640IVA^_t7{2jmy5wQiwApmCqI1Io*04o4I
zC?XAe84(W#@MQq!`@Zk1u;R55IC=lEsPzWI%E=gR+R^9_0&qNPc^($Tk3}xK5UpM<
zD$$H~3_zP~pmrKOpbKkbq!S54Yhb0W4l8G8@Yv<^akq$MK5_*7{x>fgaO}zF+;-Hl
zr+$HmR4$ud|K@8m9%}1oYmIv`c=0$q&x2BGGXgR**o}ZD%p)HJF!?O9K^`X8_1Gm>
z)-T%$5B?Ycueh%_0Qjl<{2wCnWC@Zs0T={8cV8xe3q|B%w_O0Blo@@xh<vv|<b58%
zn4)dgipbCc0y2PA07eyT^Sp>mbH}L$FvF40I>IIZWC5I7_+r?TF@F5`<EBiR^1WOx
zH@>;Kx!=l_EC0E1bvQDIb^ChQr>PnfS_fk!jYKLr1je6$DmxY#?`Tx#UqzF5EC$&H
zSniKN2!&SKfG(N<Yv!UoF&u5V%!D@GKHRE=fsGHq+F3Dl+HrWLVHW<~*n#=~^E%#@
zJuLQerx9@a^eZY3IryksPWklbuh*Vek;`S9UwPrFdo!7IXFL`|ES`ktdC>@{d?;N&
zKx+`1XaqDSi+nyn5Jdm;xvq^DU-r%4?F0h;#=Uu0I6^D|Fc!d*BJv+42sjTwJ%FL^
z{~!QML}Z-X?pux&O91Qx;5UvS%_36gw)rQ3!vVAa_&$JV02~S6IuSXjfPesSH-Onr
zOgqA@8zmwuiRdl>SGiI71V_Bb0elL;TOxAko=(17Z@u;SbUJ;9wRT7*lNpdsr<J_c
zaec+gf&aapGBj6$4K0{gk;d{NKE^gyVRTr7>eR<E(bOP~4uq6IhEB#P(}LB>k?>44
z6t$v_`XkGgSfo0T3&+67O5Gg8<gCiK#(8LEp7O)2&5nQyCm_@HsK+B=GA}8#wobzL
zzy5o?SSSJQl>|KRyz}(wryhRgS?7J_+lgedzcFFwi_bsx>r7W$TRfITES^Lx7K87_
zp?nXXQs}Y30L%u48DTyTV*&*EEb>7PK{ktQE{%Lw#{*yf>TT<GfP6^+Yn=%ALlOBp
z5#0vhn{G52CK6fK3JCaH5xLB*>m~pI)QU(O5mf;=6~Hl$fCo8313(Nwe|Js*_?d{@
zP;fml5eZ7^fJAgQfNrt-Xc3u7M5_S|2k<Wdue-LX0FDI^07&lX`p@N;Uw)(KdHanT
zHR{}!mX?*C=dJ$q?Q<nVb;rC1UkB2^eL1pv37T~$vgSRk%C}+eFpZiZiBZi7>>E^o
zVk1zCAxI<$?KlL3Yz{4I5<)csHmpTl)?saY3N{9_p!HOQb|E(U<0_hLd$os-mJz<q
zZwO-}Ta=6?!6Hqj!f->vhBbAV`L4md+g`<8>wEEE?h5P_NBmJ!N1Sxp85dm_i^nU2
zAm9GlOMktutD~hY8B1*<U)+s=%8SES3Zj$%05Ma@3NXe=Vhm;<p)pX(gHj%JEHM$l
zx*fR0ZaoeFK0!oJ0vPPR`v5Kg@XIaiU+9;tc8=!f0E`2WaU)k}(LVbXeBR8`Dk8xa
z&b49lcL&8B`MQreu%NwL|EmDdwI>ts-h1!;$<<e1eM~GC3kMG#oNj1nc(E!rv%VtS
zhYpm%wgP$eDb&bYNO3d867!_LAK>H7X*BvBNc*!fqjm#Ys#jw`V+^C36BrtM8SDHy
z)ahv$O6#!Rn}U93G%ENZ)OjDrK=V&D>SHi5cq6mktI3R@PBaFSQGxj@NAj4J33Om1
zVrau5i4MOlADnp3G<)2HtiJZygH)H_s8?&>%zA7sZvTZy#~w?-D=(Th{MxU5|C-9m
z$~s{V-+b*K54CPw+mc9CAr_DKkS`WP+>3)eVg+y0u*-_bV?`R800vuzG6uf#V0;B-
zG(a>Fz>erS7ZrRyqL=n95%4(ozsng>zTwE11~5iMHW1NO0PZT-XF<W|69D|afK?+!
zWMwbsl47zF(MkX#0leL<7Zx0=R(9hXdq;5BU3a}oM6aEH{`n&we)!>4Pd@X@s$m^n
zKTf0@QWLs{+9ve##-d7%MFRVx#*V}=ewRXj7$#NzO-AIJsI@&OUUnr`Cl_I+UXPZM
z8&Mf7$A0U5RHt7>KN^WaMkA@8#5(^Jj0qmYs#pr+xe~4F0vyPHKu!Dv?2})Nwf=q>
zZ(GqyiQIbZySOFy#*)h90Aa3$s;WcVev9Kx6VI6(oblpk>3^SHjTvhUIv<>mc{@{&
z+#v!^Kj8##+GXcnI%@2sLz%(L7SDTrP2=)4$z%$?7mG;e$QO$xMJvrh#H1im7%IbK
zO{_#256a^hv1WwIgYp%W@uA^CDP4Wfk8T?Dm9O2oz7OK(FaRgHuRjOy{|cHf1#m5Z
zLx^ayh`d|Sb`TL=0^l<MPI2oV6cHh!ocpc;98W|Y0M08SPBRhx&55a>BO>KS&4U4)
zTf#82CEVxSCnploAKh_607nD(G=O1yixt#$-c<l_<|29g*Zb2u`%Mj=$*jtF`BfUR
zbP~oUy@99;MkAmc*d9PeLRb~2!Eq(Yig~DsFQV~YPGT$GMU#o4%Qm8cmSN_gMg#*i
zYFa%E?3#r|zCp610$$BH4Dy~vgSQ_>=UzoqauSB*XCsY)sFcGniSNVOWQ};nLltMx
zCY@N~P09PgtcCeXf3dmr%9;(AETTGnWn6Nz6DeBrrTqHVgY3NfAHm%(ydZNv5FPM_
zD^EZ1mhb%P$5s9M4{mK)zx4U%9{+PHQH5kOg+wZaWFm!FJb_puDW0b-5wTJpD<^&e
z7R;oCjbbaxnowthEP`wr*<23UY#O<AC$hOTy1H`DT=~`dcltoUn*rS6zD^dAe;2e(
z1n{2wdZ&ooT%ZG*q8HQ)0L~VXRwAl(`*n-42EbeZhji<JA`%kOKmdOzcmZ@{rHG8`
zMF%_<z{_sCkBi9bj=Vp1dT6n~ut7w|U@yl@7t+nyR(vKf7&~Mm_1h<{I@T>2LY=lB
z9f^v{*_1K|pw?R?VOIyGC`A=X#dRHTqLWg99!8aw3ni1@h%VKJyf9R2C)#)^TI?FM
z+l^@SI*_RbDhFuP<SQ{E=OYpJN3G=0>G#J#6Tna%Drp+3?cwNWU%;}&nHU(%!CKuP
z6?6nD!qt~QnP{H6Dlud<bGi$tszk7MJ!UUnhU>1cmu0(+fLB~`QuT!wTz}WWQ;$9-
z4Dwww{_^M}N=cANIRYjskW8hJj3uFCz9Frxr#x0fEO7cCn3$PZM2RsvkWiakpmNy^
zvbi*J=`_;WPGmD_WV*WEzT&IXXY_%92LPx8U`6DWUfdHNfOZjiyMTcA0k{XiBmheR
zyisWAaQ?khogeU7XABwN-Jc4@6e5}e-~a%%0G7G-E*B*-22m*5%LOinkGWlEOM(7D
zL_+}_>h{S1SPbB`4^uF6EJjl<nuN<g^D%s4z-p>FV1+Vkn_|^%xrBF^B>5fI8H1#m
zfSRhsNM$+@w=u*qiFD-xkz5v@3{#1UJSV!Eki|sQg?~hc&j3avE=#Gcis6MKrY(zD
zE|0bZAtrBP4L2iAUFfO^5z~yAA@t9rz(`<_OdipaIQObolfy^lV*~qxJ2MbJ4v-J%
z1Z2SyWLK@lUmt!7H^1@5w(E?27C~!M)yGYkc<@2OV&}Z|%5x#-f>f*uzUMi;FOIku
zhxU9+q}d~Fi8Pa^SUUnTn8>hFY+#g9p7lhOh0@MXr~noH0U(3>DDuqTO8cu@kd|fv
znAJ;T2;ixr)s4MuI|sm=66;qK8F(Nf?Eqfv<v2|M{)`VXf<WeUTbvIcPiLJ}Wxt#a
zvy-mcCtLg6()PelLron<n6oq<CM8xe)x<iMA)yuv89@05!%wf_xHLm2#-XCC6U)?>
z(Jy=lgMEuOd|c46i1JlLm4il$-`;>awV(1TXG=e0B$4TYh(bC%3>EShY8o^gDOoNC
zKKaa=dCo%Q3E;|P6wWw&Fwoo%6&fVR)Zy$KF2oq;9@=#Tyzau&`hDu0^Ul_u7hAV(
z)uNTl7d0kQRq*0*#QZpXFAgsjgN|t?P1f@~>uJrTJgb!AO<9Pn2%do$MM{LNSfw_(
zC>#kj04R{AfgmE3i`aZ*@a7_U0>BeQ<o_F}J7^FecYJ@0tZ%}}YD{L}WRndVfgw5z
zwLGhWlM{$92q-nk)14zSs&bv7WG(x-^?~Q@k7T$4`+6&o_9jVZ`dzB1TuN2dhl*`k
z$R>LXka(B+rG`p8U4sNQ;@|pA3ECP_Q#G2Dw`6sd_I^3djJomVcw%rya#@(S=OO?0
z5^N0e@He)gYQkt#SNFrnT`q#&e9f7sUHi2=zZ*{`{pbJw*pp$H&!#G>kW5vfA{G5l
zB~s8a-)P@AG4c(0o>iVBVE4(HRmeuMVQp>b*&y%&YrI@8P1$rOGU+t3nNFnBok*v<
z(A11y)YsSN%3ZUJ0<nBVzY3gT0-Rb2WbZx@;e)GjK!pZ<LZR+2ouGV(@Vo@#P;pt?
z-cLqQPE}N7rOH%vv}gLMr_q|&pM3so9QoB@wST{DO+Aks0jxcUnur9>Lsh03Xso2V
zrq)lbtgZN1M{RXKc)2_>P3zG*e*xb4+w)ij;QwxqReHNez)LPUA@SK${_}LtkNHa$
zyz_RtqcfYRs)F+4@cby&)AKx#r<t_29%<W6K2MR=iWtzaU;;!GJdiR<nAj*KN<<Vu
zPWapm{m~pl6vx@uhcy{dWXmfek}r4Py&od7+PQx=xq!|tX#Yy|++#CxI1$KCJ~+9-
zo0r7_x<gIgH`cLgu$LKffk~~oRl4jW)(*V2f7_C`+Yk>zJ-QQi4S>Pxkp9_ANdFDM
zfS9Zu@V#e74t{)=X>Zb*+^Th0<<y4V<A$h&H*WNpiKBDbbo<;nGZ!Y}6`M%sc^*7J
z(*1}cqf10SvYzs+@|0DGMnDBc3{ebGMu7onr6ATu;%7<ypfVQgBk@uI{(&AJ;2a`4
zK}6a<L?eNRC@QBI3yTwCcf+*|0Wh&d(`z3@*p~}@c*ZTIjfw@I&+YwCO>UWg^G>?9
z?Iz%`k^3Irf54D_OP9`nhe*WpJ$TC7jD+M7d!Aw<Z6mjX$I4UISH6W--T6n#f=O}6
z3Q9$m(a73T%s&Q$VWDyy@8j?M0ycNRPXTZtfM0!x27_wnDk;Wg0DilhujLc~_m@~d
z1UnYd^r6Fc6=k~dyrYxjCLVZL5aiMe=D)Q<DId!7p?n{n@5A>Z155$w*jI{u<yl|(
zR%>OIQmm9>XvG?ep|n5&q96c7ZALt7$`=F!4Aobw?NKGx9aw(+W$aZ1%q1(v4I4gY
zNJGQoWg=pI&x5Z#mtquy@;#8}2@$a(Vx<(5BI^iemGZ6D+G?#G5w)`bDJdjf&mWGG
zZ=#fWXtF^cf9Inm*8R5p_{-R<2v}KFJF==@e}Cb>-&&!xg6DhiJmpBJ;3);ANR;xJ
zlwzek*2-t4l=YS3h<q`tp;-e0i0A_HAxdl|$3U<n9^2@1PUZV*fcXo6>jAt8;7<U~
z5s`nDAAcDiG`35ms~I$K%!YMq)(1h}q^ha_rJ!^ax2cs66(!rUQcAQ^(k*Uktr=Qd
z9aC0BNn{4q5`{AYfCX);(-LWX%<NK?dPo?LC;CJ{7nSmJw``9wfdGsEuu(*^eK1BS
zMB!?LC<*riNf~mXb2R|gY$X$8OUKZNVoulZY74Tv?*kBp^fmVJ7z$CESlf<RDfgHW
zaQgJ=sxpxpx~8#Vy;d4Ne0a)-@^qA7+f70tQA&v@#R^KGA)*v(9b+w;J<nqik?uTm
z3nnm;jmSpKM9gqi(xPf<>{fJiROkEnFdibJ1x3r<TiE^*B6<NpJEH7|3=z#IqN|*>
zack#0g^2!yC~>wCQMrm75&eaTPTRtM4-?TNMavnk?er3Dk8ERc+ouqPz;zMPTq63R
z%V*r$@2GOy&PGorNQQ_Si0B7IG-5j+#XattztGG1jv}Im+_^RYSVKh3MD#onU9^qQ
z`Whm7**&`k0BuCH-(Eigu3h?i-Jq$5#n(1AY)HmZP@XHSq`FH?c%X=QB0>@Q6hw()
zt+i+of#+Ftk95`&K;*PNB5<@YQ&gtVfSF+t{bz8xzP`S%BgiNK6N=U?D)I1Qh%BR*
zl{m&^M82l8iRc^=X)UpT3Q=bJ7fbB#12_%9X)Zheni8YYf1;;iTQ}x9v3a6vFUBS4
z5hb<;A5r4)L5MOmt`d=_dg;h#x_dFa#7lb=fUg6%k%+Dlk$boC{AarVO#uF<=)V8J
zsR_luzdxdMt`mspTmYAs8WoAC0>JNjxkr1y4ydh3wzqD`GBd-~bWut{qvvzPKP6fL
zP%6^zv=#sY4+4OUF^Y(l1&G-aF)Q$<plo7hur;n$D1(iSDyCVxemC5Y-}OSiLYxTT
zfnG$Ohk7AjF)jn}S0`$HP#6y2aUwdh#BcdLfG0|juN0ww?Q$V^1iwX8r)O*T<I@11
zBceo!wg>k%@@*FZNqb6Zl~qbXX>1CZ-n2k<TQfzVL}Qa{A%f{9pH<dc#mvfrm1QOd
z6O$+~DC97z4`V|xhpu2#2(fmT`j1>z#OJqh^Uo5|r;FD89{{Is$0?_61KD?n1oW`W
z!05gYV;mv2=jCvx+pjP8{W3&;+HJ)o0RLTdj6<<`0L+JvfPpe9pUZ|l70nc&djh97
z%Un<p**vqGED>32wY98at%7C6%!<K^j2i`EC=xvl*f2OWU~6DPMqqaN2zcXmZht{R
z2Z;A!e*n0{iB2CRMk6XZ)s1>Y71y>06#y>oqoL%MK3ww+L{#X<y>xH2f~xJ`+>y?W
zdP)OY=}qKQo4XYNShCiVwSi)0ZLQTIvtqW2m=zmVOrpfF5+jNYM+KVLAY_Iykv>Q{
zyQ?E8N;&2iyN<Q6MB8BnpFf2t%A**o0elO<`G^WCz0a_W_b2P_3M>WiLjbS!(tbWg
z(1<Enm%<`MNx`doY5z<guIm%%DP&cMjc$~?0#PNnQXTR5g70H{IsQBVj{w+X<9@f<
z2;&R2MLM5`f_4L+#-_5F5tVzAPyr$a!4eTzZL)bXD_GXdtRf<^GHeu+sL+HkVN{-;
zIRu*!mJO^i&9{92?$%u>e)_#U#NUX>11^aBrlPjO{KSd99QsNTdD@-hDMX31X++7i
z835Vc;F?e(a<RJxavggAqHTt{-{U!>M={<4aF{E{@eOBPEG~nwEonF>xP99T#K}^)
zRYdM_*Zdr!(vQU=@gW7DONqbB0URuQc>3BlkAS~=;2$ke%Jl4^d&b1VBG+I7gDfm8
zn3%1yuqtHMA+xrYb;zL(*=S}Hm7_4M3>z|R5Rot+iJxp>ObCmfG7`H8elPbTSM<LS
zRYe`R7>t5KQX-Od<uDqZ)v_AESeNC#GtiExG)6JT6<mW9S|5v0>#nI39_{YPE||Jh
zQt$vLQUaS-cH8V-Cn6067UbTNtY;Kl^D>mMSQq{-CjuAa4cQBFN4G-+6;VXZ3f=QM
zY~It{2LeZ>CL*tbB?~4FSy>w@=1_+mYBsEyL&b(QizpH6#7_gmX45<o#_53RpzXaq
z{64Ph<=&oMFv{*jL}^5&D_Rlx1{Y)V;QLH3F9+cLwP3m>4&yqiLFA_^#&HG2=oXiY
z5jrt-dEw(Mz)2-U^Y@Xfpg;8{rrzd)0=m&#wSvO?HW}}CA)yzwpb#zC3$R_0FiK%5
zREf71qcDh*EO*y?Q3}jL00|((AZAv=MzawuY$EZKjS7Q2^7%a2<Y7!6p$QQhgTRE1
z_4W7f>1ji6_OkvSB0AA^?yvOnrhc`E$i<@Y=|uFV(<9#}W)-FPEGn`8;Q;>Z0t?PU
z>A>^_&L<fVQA3GiOe3O4-H5KY;eIsW{Y9<d&fQEzcZtZgz39aN@I5zm+ZsfE&Qh4Y
zgKEc^q7i?Ydp<+l{m41%@E8EgWEa&2-7X^xWz5{-VV!$KPcT5tOhgh{IHN^dH`;}4
zv|*z|HcE`q##$}bYHLIp6Tq;6$-5<t#7`yi`d;uNdkLlM!Nd`n*uUG0k!Cp}M|(F)
zmA5+tz~2xB0+cc`6r#5P^V0y_*$erAXxgxD{IQp9&OuZ=b*n}r7y9*7Z`}w{ku120
zW#*RHCWgo*bTc+DMBI%4Q6a1y!5IK<1@Koy0RUqFT!W|(S9cZjA0sMbdF&ox1-<!>
z`#MQs$!20FENm1l4Q3&7PIc-gpfSp@Xv0Rc=~;|e%>|>M3G*;P5Y39jft#u<SaJO=
zKiT7_t#-2*UEhaYuP>Yd3BbeKx&K{7-=9EFnZ<3zA^_hj_<lQjO6u<jezA?)UDAv0
zx+Q!^L>BGfGy55$Xr6aP<YEz-TX5ZHxoUcY5!GPD9zj3=uxa}eAYqgzWWm;rf6O3e
zVv;DTC0e>ksM#1T94*!uZP+NWqHSQ6F#+;!W+V>tFhK}wbCS!*3)o8_B9CJGQk)(s
z5eD`IdTN4h4Nr;4jG}800AJb;{U;CLlEOf95$ObQC87tsBlqK_f{|oP+r5n<$NE<A
ziW|*$74nF}37>V63-%}i-cbLO7KXeK>3!T2GREB*3{1>M8L?WNsOhYo+BmV(NVn)2
z>b!|`KNAE9HxV&F-q<(3R)6Pu>_u>sx!ksu&MWQ#Usz&)2JksVv-oZaPnO!>9b+b<
z(iAJUa*Q>IW(a=0#4(;k6xP+cgZJZSj?ArF*>1WMIk&VOBbsUVq}|}Uc@V(2cE{|=
zeabMu?5g@XzrXKC!`Wi;Ch}QE$RUV5<tY(145I+0L|{Zfv}sfnvC0^$gCGx+4`56H
zlg~#>kVg;%3$MN5_E&b|?|d8Y4_Ka8^l(efJ+ZpLs8HN)d+AKyCZhWh`3;YEx`lDq
z@Gk%lZ7CN~MAi_|(Qf~%3Uo(tmcIu8+_5DSyNJB!s(zn`C^mJXJI+$4XTFBW$C=&2
zF&-zP7af7lMC7xpaQAUlFZWAI9OoV)dKkcUPM4bKbhzT}9&(1F8xfTZIS4={fOnmq
z_`nuwxXwg0ecaY8wZ-Tt(j{jjs#<Q*Q&Qt!Td?ZxFm|Xk{Ud+4Yg%Qh@{nXQg=8Xu
zSUib%ED0Uctdz$@#8669G+0LZp@=eUl?n0`1g`viK`Hu7y0dBZI`eRSef@``+Ou;3
zP?4^;t@~<3Ic)=-Wv+7vu7h^eFGfVkzT`!Ikk`D&_m3U@eNR7e|I|dX;y6DRkHwQI
z#Jm{dv4UBUdIGYEnMsUQp$QQLIpp(M1i2it`D`=?L^eBr*_zC=9~SbJQN}JOAOO7h
z=%baW_KuIm{r$a7GvUTTYV){IF@{1D!k7U0d>(<Dgfo-R<n!5%mp*s#O>@eRq>M5F
z`-qu;f3!cxtM-p2yh&Q=TBW@1S;$<OiO9znnmmFaKrWZ*;#~e;In_A#+;i)L^5ZC@
zOu(H*#+iTb@B6WVoaaHLZH=`|)>;VLAe+grHH0;%o_g-aQi^*SWt0h6Mj2)7a;Wkx
pD5H!r0m~?(Ou#bAC}a2H{{u6@0QN5o&p-eG002ovPDHLkV1mhda_Im7

literal 0
HcmV?d00001

diff --git a/components/org.apache.stratos.manager.console/console/themes/theme1/ui/js/mycartridges.js b/components/org.apache.stratos.manager.console/console/themes/theme1/ui/js/mycartridges.js
index a58417b..8304578 100644
--- a/components/org.apache.stratos.manager.console/console/themes/theme1/ui/js/mycartridges.js
+++ b/components/org.apache.stratos.manager.console/console/themes/theme1/ui/js/mycartridges.js
@@ -22,7 +22,8 @@
 $(function () {
     $('.un-subscribe-btn').click(function () {
         $('#alias').val($(this).attr('data-alias'));
-        popbox.message({content: '<div>Un-subscribe will delete all your instances.</div><div>Are you sure you want to un-subscribe?</div>', type: 'confirm',
+        $('#serviceGroup').val($(this).attr('service-group'));
+        popbox.message({content: '<div>Are you sure you want to un-subscribe?</div>', type: 'confirm',
             okCallback: function () {
                 $('#cForm').submit();
             },
diff --git a/components/org.apache.stratos.manager.console/console/util/utility.jag b/components/org.apache.stratos.manager.console/console/util/utility.jag
index c197e47..3cd93eb 100644
--- a/components/org.apache.stratos.manager.console/console/util/utility.jag
+++ b/components/org.apache.stratos.manager.console/console/util/utility.jag
@@ -216,12 +216,19 @@ consoleAppUtil = new function(){
         return this.sendReceive("GET","/cluster/clusterId/" + clusterId,{}).data;
     };
 
+    this.getLBClusterInfo = function(){
+        return this.sendReceive("GET","/cluster/lb",{}).data;
+    };
+
     this.getClusterInfoWithAlias = function(cartridgeType, alias){
         return this.sendReceive("GET","/cluster/" + cartridgeType + "/" + alias,{}).data;
     };
     this.getCartridgeInfo = function(alias){
         return this.sendReceive("GET","/cartridge/info/"+alias,{}).data;
     };
+    this.getCartridgeServiceGroup = function(serviceGroup){
+        return this.sendReceive("GET","/cartridge/list/subscribed/group/"+serviceGroup,{}).data;
+    };
     this.validateCaptcha = function(captchaText){
         return this.sendReceive("POST","/captcha",captchaText).data;
     };
diff --git a/components/org.apache.stratos.manager.styles/pom.xml b/components/org.apache.stratos.manager.styles/pom.xml
index 491cbb6..067b19d 100644
--- a/components/org.apache.stratos.manager.styles/pom.xml
+++ b/components/org.apache.stratos.manager.styles/pom.xml
@@ -21,7 +21,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/components/org.apache.stratos.manager.styles/src/main/resources/META-INF/product.xml b/components/org.apache.stratos.manager.styles/src/main/resources/META-INF/product.xml
index e2228bf..5fae283 100644
--- a/components/org.apache.stratos.manager.styles/src/main/resources/META-INF/product.xml
+++ b/components/org.apache.stratos.manager.styles/src/main/resources/META-INF/product.xml
@@ -18,9 +18,9 @@
   -->
 <product xmlns="http://products.wso2.org/carbon">
     <properties>
-       <property name="userforum">http://stratos.incubator.apache.org/community/mailing-lists.html</property>
-       <property name="userguide">http://stratos.incubator.apache.org/index.html</property>
-       <property name="mailinglist">http://stratos.incubator.apache.org/community/mailing-lists.html</property>
+       <property name="userforum">http://stratos.apache.org/community/mailing-lists.html</property>
+       <property name="userguide">http://stratos.apache.org/index.html</property>
+       <property name="mailinglist">http://stratos.apache.org/community/mailing-lists.html</property>
        <property name="issuetracker">https://issues.apache.org/jira/browse/STRATOS</property>
        <property name="webAdminConsoleTitle">Apache Stratos Controller</property>
     </properties>
diff --git a/components/org.apache.stratos.manager/pom.xml b/components/org.apache.stratos.manager/pom.xml
index b6cd4bb..3c24303 100644
--- a/components/org.apache.stratos.manager/pom.xml
+++ b/components/org.apache.stratos.manager/pom.xml
@@ -23,7 +23,7 @@
 	<parent>
 		<groupId>org.apache.stratos</groupId>
 		<artifactId>stratos-components-parent</artifactId>
-		<version>4.0.0-SNAPSHOT</version>
+		<version>4.0.0</version>
 	</parent>
 
 	<modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/behaviour/CartridgeMgtBehaviour.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/behaviour/CartridgeMgtBehaviour.java
index 40f61b2..352c5b0 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/behaviour/CartridgeMgtBehaviour.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/behaviour/CartridgeMgtBehaviour.java
@@ -21,7 +21,6 @@ package org.apache.stratos.manager.behaviour;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.stratos.cloud.controller.stub.pojo.CartridgeInfo;
-import org.apache.stratos.cloud.controller.stub.pojo.Persistence;
 import org.apache.stratos.cloud.controller.stub.pojo.Properties;
 import org.apache.stratos.cloud.controller.stub.pojo.Property;
 import org.apache.stratos.manager.client.CloudControllerServiceClient;
@@ -88,6 +87,7 @@ public abstract class CartridgeMgtBehaviour implements Serializable {
         PayloadData payloadData = PayloadFactory.getPayloadDataInstance(cartridgeInfo.getProvider(),
                 cartridgeInfo.getType(), basicPayloadData);
 
+        boolean isDeploymentParam = false;
         // get the payload parameters defined in the cartridge definition file for this cartridge type
         if (cartridgeInfo.getProperties() != null && cartridgeInfo.getProperties().length != 0) {
 
@@ -98,11 +98,21 @@ public abstract class CartridgeMgtBehaviour implements Serializable {
                 if (property.getName()
                         .startsWith(CartridgeConstants.CUSTOM_PAYLOAD_PARAM_NAME_PREFIX)) {
                     String payloadParamName = property.getName();
-                    payloadData.add(payloadParamName.substring(payloadParamName.indexOf(".") + 1), property.getValue());
+                    String payloadParamSubstring = payloadParamName.substring(payloadParamName.indexOf(".") + 1);
+                    if("DEPLOYMENT".equals(payloadParamSubstring)) {
+                    	isDeploymentParam = true;
+                    }
+                    payloadData.add(payloadParamSubstring, property.getValue());
                 }
             }
         }
 
+        // DEPLOYMENT payload param must be set because its used by puppet agent 
+        // to generate the hostname. Therefore, if DEPLOYMENT is not set in cartridge properties, 
+        // adding the DEPLOYMENT="default" param
+        if(!isDeploymentParam) {
+        	payloadData.add("DEPLOYMENT", "default");
+        }
         //check if there are any custom payload entries defined
         if (customPayloadEntries != null) {
             //add them to the payload
@@ -115,7 +125,7 @@ public abstract class CartridgeMgtBehaviour implements Serializable {
         return payloadData;
     }
 
-    public void register(CartridgeInfo cartridgeInfo, Cluster cluster, PayloadData payloadData, String autoscalePolicyName, String deploymentPolicyName, Properties properties, Persistence persistence) throws ADCException, UnregisteredCartridgeException {
+    public void register(CartridgeInfo cartridgeInfo, Cluster cluster, PayloadData payloadData, String autoscalePolicyName, String deploymentPolicyName, Properties properties) throws ADCException, UnregisteredCartridgeException {
     	if(payloadData != null) {
         log.info("Payload: " + payloadData.getCompletePayloadData().toString());
     	}else {
@@ -130,8 +140,7 @@ public abstract class CartridgeMgtBehaviour implements Serializable {
                 cluster.getHostName(),
                 autoscalePolicyName,
                 deploymentPolicyName,
-                properties,
-                persistence);
+                properties);
     }
 
     public void remove(String clusterId, String alias) throws ADCException, NotSubscribedException {
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/client/CloudControllerServiceClient.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/client/CloudControllerServiceClient.java
index 1cc2338..df6625e 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/client/CloudControllerServiceClient.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/client/CloudControllerServiceClient.java
@@ -93,9 +93,9 @@ public class CloudControllerServiceClient {
 	}
 
 	public boolean register(String clusterId, String cartridgeType,
-                            String payload, String tenantRange,
+	                        String payload, String tenantRange,
                             String hostName, Properties properties,
-                            String autoscalorPolicyName, String deploymentPolicyName, Persistence persistence) throws RemoteException,
+                            String autoscalorPolicyName, String deploymentPolicyName) throws RemoteException, 
                             CloudControllerServiceUnregisteredCartridgeExceptionException {		
 	    Registrant registrant = new Registrant();
 	    registrant.setClusterId(clusterId);
@@ -106,7 +106,6 @@ public class CloudControllerServiceClient {
 	    registrant.setPayload(payload);
 	    registrant.setAutoScalerPolicyName(autoscalorPolicyName);
         registrant.setDeploymentPolicyName(deploymentPolicyName);
-        registrant.setPersistence(persistence);
 		return stub.registerService(registrant);
 
 	}
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/dao/Cluster.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/dao/Cluster.java
index bacb4d8..c515461 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/dao/Cluster.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/dao/Cluster.java
@@ -75,9 +75,9 @@ public class Cluster implements Serializable {
         this.hostName = hostName;
     }
 
-    public int getId() {
-        return id;
-    }
+    //public int getId() {
+    //    return id;
+    //}
 
     public void setId(int id) {
         this.id = id;
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/Service.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/Service.java
index b73ccf6..6281ec3 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/Service.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/Service.java
@@ -62,7 +62,7 @@ public abstract class Service extends CartridgeMgtBehaviour {
 
         setClusterId(generateClusterId(null, type));
         //host name is the hostname defined in cartridge definition
-        setHostName(cartridgeInfo.getHostName());
+        setHostName(generateHostName(null, cartridgeInfo.getHostName()));
 
         // create and set PayloadData instance
         setPayloadData(createPayload(cartridgeInfo, subscriptionKey, null, cluster, null, null, null));
@@ -70,7 +70,7 @@ public abstract class Service extends CartridgeMgtBehaviour {
 
     protected String generateClusterId (String alias, String cartridgeType) {
 
-        String clusterId = cartridgeType + cartridgeInfo.getHostName() + ".domain";
+        String clusterId = cartridgeType + "." + cartridgeInfo.getHostName() + ".domain";
         // limit the cartridge alias to 30 characters in length
         if (clusterId.length() > 30) {
             clusterId = CartridgeSubscriptionUtils.limitLengthOfString(clusterId, 30);
@@ -79,9 +79,14 @@ public abstract class Service extends CartridgeMgtBehaviour {
         return clusterId;
     }
 
+    protected String generateHostName (String alias, String cartridgeDefinitionHostName) {
+
+        return cartridgeDefinitionHostName;
+    }
+
     public void deploy (Properties properties) throws ADCException, UnregisteredCartridgeException {
 
-        register(getCartridgeInfo(), getCluster(), getPayloadData(), getAutoscalingPolicyName(), getDeploymentPolicyName(), properties, null);
+        register(getCartridgeInfo(), getCluster(), getPayloadData(), getAutoscalingPolicyName(), getDeploymentPolicyName(), properties);
     }
 
     public void undeploy () throws ADCException, NotSubscribedException {
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/ServiceDeploymentManager.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/ServiceDeploymentManager.java
index 0909a77..ed99d14 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/ServiceDeploymentManager.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/ServiceDeploymentManager.java
@@ -28,7 +28,10 @@ import org.apache.stratos.cloud.controller.stub.pojo.Properties;
 import org.apache.stratos.cloud.controller.stub.pojo.Property;
 import org.apache.stratos.manager.client.CloudControllerServiceClient;
 import org.apache.stratos.manager.deploy.service.multitenant.MultiTenantService;
-import org.apache.stratos.manager.deploy.service.multitenant.lb.MultiTenantLBService;
+import org.apache.stratos.manager.deploy.service.multitenant.lb.DefaultLBService;
+import org.apache.stratos.manager.deploy.service.multitenant.lb.ExistingLBService;
+import org.apache.stratos.manager.deploy.service.multitenant.lb.LBService;
+import org.apache.stratos.manager.deploy.service.multitenant.lb.ServiceAwareLBService;
 import org.apache.stratos.manager.exception.*;
 import org.apache.stratos.manager.lb.category.*;
 import org.apache.stratos.manager.retriever.DataInsertionAndRetrievalManager;
@@ -185,7 +188,7 @@ public class ServiceDeploymentManager {
 //                                        if (!AutoscalerServiceClient.getServiceClient().checkDefaultLBExistenceAgainstPolicy(deploymentPolicyName)) {
 //
 //                                            // if lb cluster doesn't exist
-//                                            lbService = new MultiTenantLBService(lbCartridgeType,
+//                                            lbService = new LBService(lbCartridgeType,
 //                                                    lbCartridgeInfo.getDefaultAutoscalingPolicy(),
 //                                                    deploymentPolicyName, tenantId,
 //                                                    lbCartridgeInfo,
@@ -261,7 +264,7 @@ public class ServiceDeploymentManager {
 //                                        lbCartridgeInfo.addProperties(property);
 //                                        lbCartridgeInfo.addProperties(loadBalancedServiceTypeProperty);
 //
-//                                        lbService = new MultiTenantLBService(lbCartridgeType,
+//                                        lbService = new LBService(lbCartridgeType,
 //                                                lbCartridgeInfo.getDefaultAutoscalingPolicy(),
 //                                                deploymentPolicyName, tenantId,
 //                                                lbCartridgeInfo,
@@ -345,35 +348,37 @@ public class ServiceDeploymentManager {
             return;
         }
 
-        LoadBalancerCategory loadBalancerCategory = null;
+        LBService lbService = null;
 
         if (lbDataCtxt.getLbCategory().equals(Constants.EXISTING_LOAD_BALANCERS)) {
-            loadBalancerCategory = new ExistingLoadBalancerCategory();
+            lbService = new ExistingLBService(lbDataCtxt.getLbCartridgeInfo().getType(), lbDataCtxt.getAutoscalePolicy(),
+                    lbDataCtxt.getDeploymentPolicy(), -1234, lbDataCtxt.getLbCartridgeInfo(),
+                    tenantRange);
 
         } else if (lbDataCtxt.getLbCategory().equals(Constants.DEFAULT_LOAD_BALANCER)) {
-            loadBalancerCategory = new DefaultLoadBalancerCategory();
+            lbService = new DefaultLBService(lbDataCtxt.getLbCartridgeInfo().getType(), lbDataCtxt.getAutoscalePolicy(),
+                    lbDataCtxt.getDeploymentPolicy(), -1234, lbDataCtxt.getLbCartridgeInfo(),
+                    tenantRange);
 
         } else if (lbDataCtxt.getLbCategory().equals(Constants.SERVICE_AWARE_LOAD_BALANCER)) {
-            loadBalancerCategory = new ServiceLevelLoadBalancerCategory();
+            lbService = new ServiceAwareLBService(lbDataCtxt.getLbCartridgeInfo().getType(), lbDataCtxt.getAutoscalePolicy(),
+                    lbDataCtxt.getDeploymentPolicy(), -1234, lbDataCtxt.getLbCartridgeInfo(),
+                    tenantRange);
         }
 
-        if (loadBalancerCategory == null) {
+        if (lbService == null) {
             throw new ADCException("The given Load Balancer category " + lbDataCtxt.getLbCategory() + " not found");
         }
 
         // Set the load balanced service type
-        loadBalancerCategory.setLoadBalancedServiceType(loadBalancedService);
+        lbService.setLoadBalancedServiceType(loadBalancedService);
 
         // Set if the load balanced service is multi tenant or not
-        loadBalancerCategory.setLoadBalancedServiceMultiTenant(true); // TODO --- temp hack
+        //lbService.setLoadBalancedServiceMultiTenant(true); // TODO --- temp hack
 
         // set the relevant deployment policy
-        log.info(" ******* Setting Deployment Policy name : ------>  " + lbDataCtxt.getDeploymentPolicy());
-        loadBalancerCategory.setDeploymentPolicyName(lbDataCtxt.getDeploymentPolicy());
-
-        Service lbService = new MultiTenantLBService(lbDataCtxt.getLbCartridgeInfo().getType(), lbDataCtxt.getAutoscalePolicy(),
-                lbDataCtxt.getDeploymentPolicy(), -1234, lbDataCtxt.getLbCartridgeInfo(),
-                tenantRange, loadBalancerCategory);
+        //log.info(" ******* Setting Deployment Policy name : ------>  " + lbDataCtxt.getDeploymentPolicy());
+        //loadBalancerCategory.setDeploymentPolicyName(lbDataCtxt.getDeploymentPolicy());
 
         Properties lbProperties = null;
         if (lbDataCtxt.getLbProperperties() != null && !lbDataCtxt.getLbProperperties().isEmpty())  {
@@ -385,7 +390,9 @@ public class ServiceDeploymentManager {
         lbService.create();
 
         // add LB category to the payload
-        lbService.getPayloadData().add(CartridgeConstants.LB_CATEGORY, lbDataCtxt.getLbCategory());
+        if (lbService.getPayloadData() != null) {
+            lbService.getPayloadData().add(CartridgeConstants.LB_CATEGORY, lbDataCtxt.getLbCategory());
+        }
 
         // delpoy
         lbService.deploy(lbProperties);
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/multitenant/lb/DefaultLBService.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/multitenant/lb/DefaultLBService.java
new file mode 100644
index 0000000..580186e
--- /dev/null
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/multitenant/lb/DefaultLBService.java
@@ -0,0 +1,110 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.stratos.manager.deploy.service.multitenant.lb;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.stratos.cloud.controller.stub.pojo.CartridgeInfo;
+import org.apache.stratos.cloud.controller.stub.pojo.ClusterContext;
+import org.apache.stratos.cloud.controller.stub.pojo.Properties;
+import org.apache.stratos.manager.client.AutoscalerServiceClient;
+import org.apache.stratos.manager.client.CloudControllerServiceClient;
+import org.apache.stratos.manager.dao.Cluster;
+import org.apache.stratos.manager.exception.ADCException;
+import org.apache.stratos.manager.exception.AlreadySubscribedException;
+import org.apache.stratos.manager.exception.UnregisteredCartridgeException;
+import org.apache.stratos.manager.payload.PayloadData;
+import org.apache.stratos.manager.repository.Repository;
+import org.apache.stratos.manager.subscriber.Subscriber;
+
+import java.rmi.RemoteException;
+import java.util.Map;
+
+public class DefaultLBService extends LBService {
+
+    private static Log log = LogFactory.getLog(DefaultLBService.class);
+    private boolean defaultLBServiceExists = false;
+
+    public DefaultLBService (String type, String autoscalingPolicyName, String deploymentPolicyName, int tenantId,
+                            CartridgeInfo cartridgeInfo, String tenantRange) {
+
+        super(type, autoscalingPolicyName, deploymentPolicyName, tenantId, cartridgeInfo, tenantRange);
+    }
+
+    public PayloadData create(String alias, Cluster cluster, Subscriber subscriber, Repository repository, CartridgeInfo cartridgeInfo,
+                              String subscriptionKey, Map<String, String> customPayloadEntries)
+            throws ADCException, AlreadySubscribedException {
+
+        // call the relevant method to get the cluster id, using deployment policy
+        String clusterId = null;
+        try {
+            clusterId = AutoscalerServiceClient.getServiceClient().getDefaultLBClusterId(getDeploymentPolicyName());
+        } catch (Exception e) {
+            log.error("Error occurred in retrieving default LB cluster id" + e.getMessage());
+            throw new ADCException(e);
+        }
+
+        if (clusterId != null) {
+            //set the cluster id to Cluster object
+            cluster.setClusterDomain(clusterId);
+            if (log.isDebugEnabled()) {
+                log.debug("Set existing default LB cluster id " + clusterId);
+            }
+            defaultLBServiceExists = true;
+
+            //get the hostname for this cluster and set it
+            ClusterContext clusterContext;
+            try {
+                clusterContext = CloudControllerServiceClient.getServiceClient().getClusterContext(clusterId);
+
+            } catch (RemoteException e) {
+                log.error("Error occurred in retrieving Cluster Context for default LB ", e);
+                throw new ADCException(e);
+            }
+
+            if (clusterContext != null) {
+                cluster.setHostName(clusterContext.getHostName());
+                if (log.isDebugEnabled()) {
+                    log.debug("Set existing default LB hostname " + clusterContext.getHostName());
+                }
+            }
+
+            return null;
+
+        } else {
+            // set cluster domain
+            cluster.setClusterDomain(generateClusterId(null, cartridgeInfo.getType()));
+            // set hostname
+            cluster.setHostName(generateHostName(null, cartridgeInfo.getHostName()));
+
+            return createPayload(cartridgeInfo, subscriptionKey, subscriber, cluster, repository, alias, customPayloadEntries);
+        }
+    }
+
+    public void register(CartridgeInfo cartridgeInfo, Cluster cluster, PayloadData payloadData, String autoscalePolicyName, String deploymentPolicyName, Properties properties) throws ADCException, UnregisteredCartridgeException {
+
+        //log.info("Register service with payload data ["+payloadData+"] ");
+        if (!defaultLBServiceExists) {
+            super.register(cartridgeInfo, cluster, payloadData, autoscalePolicyName, deploymentPolicyName, properties);
+        }else {
+            log.info("Default LB already exists for deployment policy: " + getDeploymentPolicyName());
+        }
+    }
+}
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/multitenant/lb/ExistingLBService.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/multitenant/lb/ExistingLBService.java
new file mode 100644
index 0000000..5475e42
--- /dev/null
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/multitenant/lb/ExistingLBService.java
@@ -0,0 +1,52 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.stratos.manager.deploy.service.multitenant.lb;
+
+import org.apache.stratos.cloud.controller.stub.pojo.CartridgeInfo;
+import org.apache.stratos.cloud.controller.stub.pojo.Properties;
+import org.apache.stratos.manager.dao.Cluster;
+import org.apache.stratos.manager.exception.ADCException;
+import org.apache.stratos.manager.exception.AlreadySubscribedException;
+import org.apache.stratos.manager.exception.UnregisteredCartridgeException;
+import org.apache.stratos.manager.payload.PayloadData;
+import org.apache.stratos.manager.repository.Repository;
+import org.apache.stratos.manager.subscriber.Subscriber;
+
+import java.util.Map;
+
+public class ExistingLBService extends LBService {
+
+    public ExistingLBService(String type, String autoscalingPolicyName, String deploymentPolicyName, int tenantId, CartridgeInfo cartridgeInfo, String tenantRange) {
+        super(type, autoscalingPolicyName, deploymentPolicyName, tenantId, cartridgeInfo, tenantRange);
+    }
+
+    public PayloadData create(String alias, Cluster cluster, Subscriber subscriber, Repository repository, CartridgeInfo cartridgeInfo,
+                              String subscriptionKey, Map<String, String> customPayloadEntries)
+            throws ADCException, AlreadySubscribedException {
+
+        // TODO
+        return null;
+    }
+
+    public void register(CartridgeInfo cartridgeInfo, Cluster cluster, PayloadData payloadData, String autoscalePolicyName, String deploymentPolicyName, Properties properties) throws ADCException, UnregisteredCartridgeException {
+
+        // TODO
+    }
+}
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/multitenant/lb/LBService.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/multitenant/lb/LBService.java
new file mode 100644
index 0000000..52c33d3
--- /dev/null
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/multitenant/lb/LBService.java
@@ -0,0 +1,69 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.stratos.manager.deploy.service.multitenant.lb;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.stratos.cloud.controller.stub.pojo.CartridgeInfo;
+import org.apache.stratos.cloud.controller.stub.pojo.Properties;
+import org.apache.stratos.manager.deploy.service.Service;
+import org.apache.stratos.manager.exception.ADCException;
+import org.apache.stratos.manager.exception.AlreadySubscribedException;
+import org.apache.stratos.manager.exception.UnregisteredCartridgeException;
+import org.apache.stratos.manager.lb.category.LoadBalancerCategory;
+
+public class LBService extends Service {
+
+    private static Log log = LogFactory.getLog(LBService.class);
+
+    private String loadBalancedServiceType;
+
+    public LBService(String type, String autoscalingPolicyName, String deploymentPolicyName, int tenantId,
+                     CartridgeInfo cartridgeInfo, String tenantRange) {
+
+        super(type, autoscalingPolicyName, deploymentPolicyName, tenantId, cartridgeInfo, tenantRange);
+    }
+
+    public void create () throws ADCException {
+
+        try {
+            setPayloadData(create(null, getCluster(), null, null, getCartridgeInfo(), getSubscriptionKey(), null));
+
+        } catch (AlreadySubscribedException e) {
+            throw new ADCException(e);
+        }
+    }
+
+    @Override
+    public void deploy(Properties properties) throws ADCException, UnregisteredCartridgeException {
+
+        //register the service
+        register(getCartridgeInfo(), getCluster(), getPayloadData(), getAutoscalingPolicyName(), getDeploymentPolicyName(),
+                properties);
+    }
+
+    public String getLoadBalancedServiceType() {
+        return loadBalancedServiceType;
+    }
+
+    public void setLoadBalancedServiceType(String loadBalancedServiceType) {
+        this.loadBalancedServiceType = loadBalancedServiceType;
+    }
+}
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/multitenant/lb/MultiTenantLBService.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/multitenant/lb/MultiTenantLBService.java
index ec200f3..5a16fc5 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/multitenant/lb/MultiTenantLBService.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/multitenant/lb/MultiTenantLBService.java
@@ -46,6 +46,6 @@ public class MultiTenantLBService extends Service {
 
         //register the service
         loadBalancerCategory.register(getCartridgeInfo(), getCluster(), getPayloadData(), getAutoscalingPolicyName(), getDeploymentPolicyName(),
-                properties, null);
+                properties);
     }
 }
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/multitenant/lb/ServiceAwareLBService.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/multitenant/lb/ServiceAwareLBService.java
new file mode 100644
index 0000000..282cbf3
--- /dev/null
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/deploy/service/multitenant/lb/ServiceAwareLBService.java
@@ -0,0 +1,137 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.stratos.manager.deploy.service.multitenant.lb;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.stratos.cloud.controller.stub.pojo.CartridgeInfo;
+import org.apache.stratos.cloud.controller.stub.pojo.ClusterContext;
+import org.apache.stratos.cloud.controller.stub.pojo.Properties;
+import org.apache.stratos.manager.client.AutoscalerServiceClient;
+import org.apache.stratos.manager.client.CloudControllerServiceClient;
+import org.apache.stratos.manager.dao.Cluster;
+import org.apache.stratos.manager.exception.ADCException;
+import org.apache.stratos.manager.exception.AlreadySubscribedException;
+import org.apache.stratos.manager.exception.UnregisteredCartridgeException;
+import org.apache.stratos.manager.payload.PayloadData;
+import org.apache.stratos.manager.repository.Repository;
+import org.apache.stratos.manager.subscriber.Subscriber;
+import org.apache.stratos.manager.subscription.utils.CartridgeSubscriptionUtils;
+import org.apache.stratos.manager.utils.CartridgeConstants;
+
+import java.rmi.RemoteException;
+import java.util.Map;
+
+public class ServiceAwareLBService extends LBService {
+
+    public ServiceAwareLBService(String type, String autoscalingPolicyName, String deploymentPolicyName, int tenantId,
+                                 CartridgeInfo cartridgeInfo, String tenantRange) {
+
+        super(type, autoscalingPolicyName, deploymentPolicyName, tenantId, cartridgeInfo, tenantRange);
+    }
+
+    private static Log log = LogFactory.getLog(ServiceAwareLBService.class);
+
+    private boolean serviceAwareLBExists;
+
+    public PayloadData create (String alias, Cluster cluster, Subscriber subscriber, Repository repository, CartridgeInfo cartridgeInfo,
+                               String subscriptionKey, Map<String, String> customPayloadEntries) throws ADCException, AlreadySubscribedException {
+
+        // call the relevant method to get the cluster id, using deployment policy and type
+        String clusterId = null;
+
+        try {
+            clusterId = AutoscalerServiceClient.getServiceClient().getServiceLBClusterId(getLoadBalancedServiceType(), getDeploymentPolicyName());
+
+        } catch (Exception e) {
+            log.error("Error occurred in retrieving Service LB cluster id" + e.getMessage());
+            throw new ADCException(e);
+        }
+
+        if (clusterId != null) {
+
+            //set the cluster id to Cluster object
+            cluster.setClusterDomain(clusterId);
+            if (log.isDebugEnabled()) {
+                log.debug("Set existing Service LB cluster id " + clusterId);
+            }
+            serviceAwareLBExists = true;
+
+            //get the hostname for this cluster and set it
+            ClusterContext clusterContext;
+            try {
+                clusterContext = CloudControllerServiceClient.getServiceClient().getClusterContext(clusterId);
+
+            } catch (RemoteException e) {
+                log.error("Error occurred in retrieving Cluster Context for Service LB ", e);
+                throw new ADCException(e);
+            }
+
+            if (clusterContext != null) {
+                cluster.setHostName(clusterContext.getHostName());
+                if (log.isDebugEnabled()) {
+                    log.debug("Set existing Service LB hostname " + clusterContext.getHostName());
+                }
+            }
+
+            return null;
+
+        } else {
+
+            // set cluster domain
+            cluster.setClusterDomain(generateClusterId(getLoadBalancedServiceType(), cartridgeInfo.getType()));
+            // set hostname
+            cluster.setHostName(generateHostName(getLoadBalancedServiceType(), cartridgeInfo.getHostName()));
+
+            PayloadData serviceLevelLbPayloadData = createPayload(cartridgeInfo, subscriptionKey, subscriber, cluster,
+                    repository, alias, customPayloadEntries);
+
+            // add payload entry for load balanced service type
+            serviceLevelLbPayloadData.add(CartridgeConstants.LOAD_BALANCED_SERVICE_TYPE, getLoadBalancedServiceType());
+            return serviceLevelLbPayloadData;
+        }
+    }
+
+    protected String generateClusterId (String loadBalancedServiceType, String cartridgeType) {
+
+        String clusterId = cartridgeType + "." + loadBalancedServiceType + "." + getCartridgeInfo().getHostName() + ".domain";
+        // limit the cartridge alias to 30 characters in length
+        if (clusterId.length() > 30) {
+            clusterId = CartridgeSubscriptionUtils.limitLengthOfString(clusterId, 30);
+        }
+
+        return clusterId;
+    }
+
+    protected String generateHostName (String loadBalancedServiceType, String cartridgeDefinitionHostName) {
+
+        return getCartridgeInfo().getType() + "." + loadBalancedServiceType + "." + cartridgeDefinitionHostName;
+    }
+
+    public void register(CartridgeInfo cartridgeInfo, Cluster cluster, PayloadData payloadData, String autoscalePolicyName, String deploymentPolicyName, Properties properties) throws ADCException, UnregisteredCartridgeException {
+
+        if (!serviceAwareLBExists) {
+            super.register(cartridgeInfo, cluster, payloadData, autoscalePolicyName, deploymentPolicyName, properties);
+
+        }else {
+            log.info("Service Aware LB already exists for cartridge type: " + getLoadBalancedServiceType() + ", deployment policy: " + getDeploymentPolicyName());
+        }
+    }
+}
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/lb/category/DefaultLoadBalancerCategory.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/lb/category/DefaultLoadBalancerCategory.java
index e124883..8470cb5 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/lb/category/DefaultLoadBalancerCategory.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/lb/category/DefaultLoadBalancerCategory.java
@@ -23,7 +23,6 @@ import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.stratos.cloud.controller.stub.pojo.CartridgeInfo;
 import org.apache.stratos.cloud.controller.stub.pojo.ClusterContext;
-import org.apache.stratos.cloud.controller.stub.pojo.Persistence;
 import org.apache.stratos.cloud.controller.stub.pojo.Properties;
 import org.apache.stratos.manager.client.AutoscalerServiceClient;
 import org.apache.stratos.manager.client.CloudControllerServiceClient;
@@ -90,20 +89,19 @@ public class DefaultLoadBalancerCategory extends LoadBalancerCategory {
             // set hostname
             cluster.setHostName(generateHostName(alias, cartridgeInfo.getHostName()));
         
-        return createPayload(cartridgeInfo, subscriptionKey, subscriber,
-                cluster, repository, alias, customPayloadEntries);
+            return createPayload(cartridgeInfo, subscriptionKey, subscriber, cluster, repository, alias, customPayloadEntries);
         }
     }
 
-    public void register(CartridgeInfo cartridgeInfo, Cluster cluster, PayloadData payloadData, String autoscalePolicyName, String deploymentPolicyName, Properties properties, Persistence persistence) throws ADCException, UnregisteredCartridgeException {
-    	log.info("Register service with payload data ["+payloadData+"] ");
+    public void register(CartridgeInfo cartridgeInfo, Cluster cluster, PayloadData payloadData, String autoscalePolicyName, String deploymentPolicyName, Properties properties) throws ADCException, UnregisteredCartridgeException {
+    	//log.info("Register service with payload data ["+payloadData+"] ");
         if (!isDefaultLBExists()) {
-        	if(payloadData != null) {
-        		log.info("Payload: " + payloadData.getCompletePayloadData().toString());
-        	}
-            super.register(cartridgeInfo, cluster, payloadData, autoscalePolicyName, deploymentPolicyName, properties, persistence);
+        	//if(payloadData != null) {
+        		//log.info("Payload: " + payloadData.getCompletePayloadData().toString());
+        	//}
+            super.register(cartridgeInfo, cluster, payloadData, autoscalePolicyName, deploymentPolicyName, properties);
         }else {
-        	log.info(" Default LB exists... Not registering...");
+            log.info("Default LB already exists for deployment policy: " + getDeploymentPolicyName());
         }
     }
 
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/lb/category/ExistingLoadBalancerCategory.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/lb/category/ExistingLoadBalancerCategory.java
index 594ad4c..b6ecfac 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/lb/category/ExistingLoadBalancerCategory.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/lb/category/ExistingLoadBalancerCategory.java
@@ -20,7 +20,6 @@
 package org.apache.stratos.manager.lb.category;
 
 import org.apache.stratos.cloud.controller.stub.pojo.CartridgeInfo;
-import org.apache.stratos.cloud.controller.stub.pojo.Persistence;
 import org.apache.stratos.cloud.controller.stub.pojo.Properties;
 import org.apache.stratos.manager.dao.Cluster;
 import org.apache.stratos.manager.exception.ADCException;
@@ -42,7 +41,7 @@ public class ExistingLoadBalancerCategory extends LoadBalancerCategory {
         return null;
     }
 
-    public void register(CartridgeInfo cartridgeInfo, Cluster cluster, PayloadData payloadData, String autoscalePolicyName, String deploymentPolicyName, Properties properties, Persistence persistence) throws ADCException, UnregisteredCartridgeException {
+    public void register (CartridgeInfo cartridgeInfo, Cluster cluster, PayloadData payloadData, String autoscalePolicyName, String deploymentPolicyName, Properties properties) throws ADCException, UnregisteredCartridgeException {
 
         //TODO
     }
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/lb/category/ServiceLevelLoadBalancerCategory.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/lb/category/ServiceLevelLoadBalancerCategory.java
index e713d7d..131b4dc 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/lb/category/ServiceLevelLoadBalancerCategory.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/lb/category/ServiceLevelLoadBalancerCategory.java
@@ -23,7 +23,6 @@ import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.stratos.cloud.controller.stub.pojo.CartridgeInfo;
 import org.apache.stratos.cloud.controller.stub.pojo.ClusterContext;
-import org.apache.stratos.cloud.controller.stub.pojo.Persistence;
 import org.apache.stratos.cloud.controller.stub.pojo.Properties;
 import org.apache.stratos.manager.client.AutoscalerServiceClient;
 import org.apache.stratos.manager.client.CloudControllerServiceClient;
@@ -103,15 +102,15 @@ public class ServiceLevelLoadBalancerCategory extends LoadBalancerCategory {
         }
     }
 
-    public void register(CartridgeInfo cartridgeInfo, Cluster cluster, PayloadData payloadData, String autoscalePolicyName, String deploymentPolicyName, Properties properties, Persistence persistence) throws ADCException, UnregisteredCartridgeException {
+    public void register(CartridgeInfo cartridgeInfo, Cluster cluster, PayloadData payloadData, String autoscalePolicyName, String deploymentPolicyName, Properties properties) throws ADCException, UnregisteredCartridgeException {
 
         if (!serviceLbExists) {
 
-            if(payloadData != null) {
-                log.info("Payload: " + payloadData.getCompletePayloadData().toString());
-            }
+           // if(payloadData != null) {
+              //  log.info("Payload: " + payloadData.getCompletePayloadData().toString());
+           // }
 
-            super.register(cartridgeInfo, cluster, payloadData, autoscalePolicyName, deploymentPolicyName, properties, persistence);
+            super.register(cartridgeInfo, cluster, payloadData, autoscalePolicyName, deploymentPolicyName, properties);
         }else {
             log.info("Service LB already exists for cartridge type: " + getLoadBalancedServiceType() + ", deployment policy: " + getDeploymentPolicyName());
         }
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/manager/CartridgeSubscriptionManager.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/manager/CartridgeSubscriptionManager.java
index b1ce517..ce04409 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/manager/CartridgeSubscriptionManager.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/manager/CartridgeSubscriptionManager.java
@@ -23,10 +23,13 @@ import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.openjpa.util.java$util$ArrayList$proxy;
 import org.apache.stratos.cloud.controller.stub.CloudControllerServiceUnregisteredCartridgeExceptionException;
-import org.apache.stratos.cloud.controller.stub.pojo.*;
+import org.apache.stratos.cloud.controller.stub.pojo.CartridgeInfo;
+import org.apache.stratos.cloud.controller.stub.pojo.LoadbalancerConfig;
 import org.apache.stratos.cloud.controller.stub.pojo.Properties;
+import org.apache.stratos.cloud.controller.stub.pojo.Property;
 import org.apache.stratos.manager.client.CloudControllerServiceClient;
 import org.apache.stratos.manager.dao.CartridgeSubscriptionInfo;
+import org.apache.stratos.manager.deploy.service.Service;
 import org.apache.stratos.manager.dto.SubscriptionInfo;
 import org.apache.stratos.manager.exception.*;
 import org.apache.stratos.manager.internal.DataHolder;
@@ -166,11 +169,11 @@ public class CartridgeSubscriptionManager {
         	if(log.isDebugEnabled()) {
         		log.debug(" Registering LB Cartridge subscription ");
         	}
-            registerCartridgeSubscription(lbCartridgeSubscription, lbCartridgeSubscriptionProperties, subscriptionData.getPersistence());
+            registerCartridgeSubscription(lbCartridgeSubscription, lbCartridgeSubscriptionProperties);
         }
 
         // register service cartridge subscription
-        return registerCartridgeSubscription(serviceCartridgeSubscription, serviceCartridgeSubscriptionProperties, subscriptionData.getPersistence());
+        return registerCartridgeSubscription(serviceCartridgeSubscription, serviceCartridgeSubscriptionProperties);
     }
 
     private boolean activeInstancesAvailable(SubscriptionData subscriptionData) {
@@ -199,7 +202,7 @@ public class CartridgeSubscriptionManager {
 
         
         if (lbDataContext.getLbCategory() == null || lbDataContext.getLbCategory().equals(Constants.NO_LOAD_BALANCER)) {
-            // no load balancer subscription required generate SubscriptionKey
+            // no load balancer subscription requiredgenerateSubscriptionKey
             log.info("No LB subscription required for the Subscription with alias: " + subscriptionData.getCartridgeAlias() + ", type: " +
                     subscriptionData.getCartridgeType());
             return null;
@@ -294,25 +297,64 @@ public class CartridgeSubscriptionManager {
         // Create the CartridgeSubscription instance
         CartridgeSubscription cartridgeSubscription = CartridgeSubscriptionFactory.getCartridgeSubscriptionInstance(cartridgeInfo, tenancyBehaviour);
 
-        // Generate and set the key
-        String subscriptionKey = CartridgeSubscriptionUtils.generateSubscriptionKey();
-        cartridgeSubscription.setSubscriptionKey(subscriptionKey);
         
-        String encryptedRepoPassword;
-        String repositoryPassword = subscriptionData.getRepositoryPassword();
-        if(repositoryPassword != null && !repositoryPassword.isEmpty()) {
-        	encryptedRepoPassword = RepoPasswordMgtUtil.encryptPassword(repositoryPassword, subscriptionKey);
-        } else {
-        	encryptedRepoPassword = "";
+        // For MT cartridges subscription key should not be generated for every subscription,
+        // instead use the already generated key at the time of service deployment
+        String subscriptionKey = null;
+        if(cartridgeInfo.getMultiTenant()) {
+        	try {
+				Service service = new DataInsertionAndRetrievalManager().getService(subscriptionData.getCartridgeType());
+				if(service != null) {
+					subscriptionKey = service.getSubscriptionKey();
+				}else {
+					String msg = "Could not find service for cartridge type [" + subscriptionData.getCartridgeType() + "] " ;
+					log.error(msg);				
+					throw new ADCException(msg);
+				}
+			} catch (Exception e) {
+				String msg = "Exception has occurred in get service for cartridge type [" + subscriptionData.getCartridgeType() + "] " ;
+				log.error(msg);				
+				throw new ADCException(msg, e);
+			}
+        }else {
+        	// Generate and set the key
+            subscriptionKey = CartridgeSubscriptionUtils.generateSubscriptionKey();
+        }
+        
+        cartridgeSubscription.setSubscriptionKey(subscriptionKey);
+
+        if(log.isDebugEnabled()) {
+            log.debug("Repository with url: " + subscriptionData.getRepositoryURL() +
+                    " username: " + subscriptionData.getRepositoryUsername() +
+                    " Type: " + subscriptionData.getRepositoryType());
         }
+        
+        // Create subscriber
+        Subscriber subscriber = new Subscriber(subscriptionData.getTenantAdminUsername(), subscriptionData.getTenantId(), subscriptionData.getTenantDomain());
+        cartridgeSubscription.setSubscriber(subscriber);
+        cartridgeSubscription.setAlias(subscriptionData.getCartridgeAlias());
 
         // Create repository
         Repository repository = cartridgeSubscription.manageRepository(subscriptionData.getRepositoryURL(), subscriptionData.getRepositoryUsername(),
-                encryptedRepoPassword,
+        		subscriptionData.getRepositoryPassword(),
                 subscriptionData.isPrivateRepository());
 
-        // Create subscriber
-        Subscriber subscriber = new Subscriber(subscriptionData.getTenantAdminUsername(), subscriptionData.getTenantId(), subscriptionData.getTenantDomain());
+        // Update repository attributes
+        if(repository != null) {
+        	
+            repository.setCommitEnabled(subscriptionData.isCommitsEnabled());
+            
+            // Encrypt repository password
+            String encryptedRepoPassword;
+            String repositoryPassword = repository.getPassword();
+            if(repositoryPassword != null && !repositoryPassword.isEmpty()) {
+            	encryptedRepoPassword = RepoPasswordMgtUtil.encryptPassword(repositoryPassword, subscriptionKey);
+            } else {
+            	encryptedRepoPassword = "";
+            }
+            repository.setPassword(encryptedRepoPassword);
+            
+        }
 
         // set the LB cluster id relevant to this service cluster
         cartridgeSubscription.setLbClusterId(lbClusterId);
@@ -339,15 +381,7 @@ public class CartridgeSubscriptionManager {
         if(cartridgeSubscription.getPayloadData() != null) {
             cartridgeSubscription.getPayloadData().add(CartridgeConstants.COMMIT_ENABLED, String.valueOf(subscriptionData.isCommitsEnabled()));
         }
-
-        if(subscriptionData.getProperties() != null){
-            for(Property property : subscriptionData.getProperties().getProperties()){
-                if (property.getName().startsWith(CartridgeConstants.CUSTOM_PAYLOAD_PARAM_NAME_PREFIX)) {
-                    String payloadParamName = property.getName();
-                    cartridgeSubscription.getPayloadData().add(payloadParamName.substring(payloadParamName.indexOf(".") + 1), property.getValue());
-                }
-            }
-        }
+        
 
         log.info("Tenant [" + subscriptionData.getTenantId() + "] with username [" + subscriptionData.getTenantAdminUsername() +
                 " subscribed to " + "] Cartridge with Alias " + subscriptionData.getCartridgeAlias() + ", Cartridge Type: " +
@@ -362,15 +396,14 @@ public class CartridgeSubscriptionManager {
      *
      * @param cartridgeSubscription CartridgeSubscription subscription
      *
-     * @param persistence
      * @return SubscriptionInfo object populated with relevant information
      * @throws ADCException
      * @throws UnregisteredCartridgeException
      */
-    private SubscriptionInfo registerCartridgeSubscription(CartridgeSubscription cartridgeSubscription, Properties properties, Persistence persistence)
+    private SubscriptionInfo registerCartridgeSubscription(CartridgeSubscription cartridgeSubscription, Properties properties)
             throws ADCException, UnregisteredCartridgeException {
 
-        CartridgeSubscriptionInfo cartridgeSubscriptionInfo = cartridgeSubscription.registerSubscription(properties, persistence);
+        CartridgeSubscriptionInfo cartridgeSubscriptionInfo = cartridgeSubscription.registerSubscription(properties);
 
         //set status as 'SUBSCRIBED'
         cartridgeSubscription.setSubscriptionStatus(CartridgeConstants.SUBSCRIBED);
@@ -388,8 +421,10 @@ public class CartridgeSubscriptionManager {
         log.info("Successful Subscription: " + cartridgeSubscription.toString());
 
         // Publish tenant subscribed event to message broker
+        Set<String> clusterIds = new HashSet<String>();
+        clusterIds.add(cartridgeSubscription.getCluster().getClusterDomain());
         CartridgeSubscriptionUtils.publishTenantSubscribedEvent(cartridgeSubscription.getSubscriber().getTenantId(),
-                cartridgeSubscription.getCartridgeInfo().getType(), new HashSet<String>(cartridgeSubscription.getCluster().getId()));
+                cartridgeSubscription.getCartridgeInfo().getType(), clusterIds);
 
         return ApplicationManagementUtil.
                 createSubscriptionResponse(cartridgeSubscriptionInfo, cartridgeSubscription.getRepository());
@@ -422,9 +457,10 @@ public class CartridgeSubscriptionManager {
                 " [domain-name] " + domainName + " [application-context] " +applicationContext);
 
         EventPublisher eventPublisher = EventPublisherPool.getPublisher(Constants.TENANT_TOPIC);
+        Set<String> clusterIds = new HashSet<String>();
+        clusterIds.add(cartridgeSubscription.getCluster().getClusterDomain());
         SubscriptionDomainAddedEvent event = new SubscriptionDomainAddedEvent(tenantId, cartridgeSubscription.getType(),
-                new HashSet<String>(cartridgeSubscription.getCluster().getId()),
-                domainName, applicationContext);
+                clusterIds, domainName, applicationContext);
         eventPublisher.publish(event);
     }
 
@@ -450,9 +486,10 @@ public class CartridgeSubscriptionManager {
                 " [domain-name] " + domainName);
 
         EventPublisher eventPublisher = EventPublisherPool.getPublisher(Constants.TENANT_TOPIC);
+        Set<String> clusterIds = new HashSet<String>();
+        clusterIds.add(cartridgeSubscription.getCluster().getClusterDomain());
         SubscriptionDomainRemovedEvent event = new SubscriptionDomainRemovedEvent(tenantId, cartridgeSubscription.getType(),
-                new HashSet<String>(cartridgeSubscription.getCluster().getId()),
-                domainName);
+                clusterIds, domainName);
         eventPublisher.publish(event);
     }
 
@@ -507,6 +544,9 @@ public class CartridgeSubscriptionManager {
                                 tenant.getId(), tenant.getDomain()));
                     }
                     Collection<CartridgeSubscription> subscriptions = manager.getCartridgeSubscriptions(tenant.getId());
+                    if (subscriptions == null) {
+                        continue;
+                    }
                     for (CartridgeSubscription subscription : subscriptions) {
                         if (log.isDebugEnabled()) {
                             log.debug(String.format("Reading domain names in subscription: [alias] %s [domain-names] %s",
@@ -577,10 +617,11 @@ public class CartridgeSubscriptionManager {
             }
 
             // Publish tenant un-subscribed event to message broker
+            Set<String> clusterIds = new HashSet<String>();
+            clusterIds.add(cartridgeSubscription.getCluster().getClusterDomain());
             CartridgeSubscriptionUtils.publishTenantUnSubscribedEvent(
                     cartridgeSubscription.getSubscriber().getTenantId(),
-                    cartridgeSubscription.getCartridgeInfo().getType(),
-                    new HashSet<String>(cartridgeSubscription.getCluster().getId()));
+                    cartridgeSubscription.getCartridgeInfo().getType(), clusterIds);
             
 			// publishing to the unsubscribed event details to bam
 			CartridgeSubscriptionDataPublisher.publish(cartridgeSubscription
@@ -613,7 +654,7 @@ public class CartridgeSubscriptionManager {
 
         Properties persistenceMappingProperties = new Properties();
         persistenceMappingProperties.setProperties(new Property[]{persistenceCtxt.getPersistanceRequiredProperty(), persistenceCtxt.getSizeProperty(),
-                persistenceCtxt.getDeleteOnTerminationProperty(), persistenceCtxt.getVolumeIdProperty()});
+                persistenceCtxt.getDeleteOnTerminationProperty()});
 
         return persistenceMappingProperties;
     }
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/payload/BasicPayloadData.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/payload/BasicPayloadData.java
index 0d27b1b..70fb974 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/payload/BasicPayloadData.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/payload/BasicPayloadData.java
@@ -47,6 +47,7 @@ public class BasicPayloadData implements Serializable {
     private String gitRepositoryUrl;
     private String portMappings;
     private String multitenant;
+    private String provider;
 
     protected StringBuilder payloadBuilder;
 
@@ -74,13 +75,15 @@ public class BasicPayloadData implements Serializable {
         payloadBuilder.append(",");
         payloadBuilder.append("CARTRIDGE_KEY=" + getSubscriptionKey());
         payloadBuilder.append(",");
-        payloadBuilder.append("DEPLOYMENT=" + getDeployment());
-        payloadBuilder.append(",");
+        //payloadBuilder.append("DEPLOYMENT=" + getDeployment());
+        //payloadBuilder.append(",");
         //payloadBuilder.append("APP_PATH=" + getApplicationPath());
         //payloadBuilder.append(",");
         payloadBuilder.append("REPO_URL=" + getGitRepositoryUrl());
         payloadBuilder.append(",");
         payloadBuilder.append("PORTS=" + getPortMappings());
+        payloadBuilder.append(",");
+        payloadBuilder.append("PROVIDER=" + getProvider());
 
         //Payload Data exposed as system variables
         payloadBuilder.append(",");
@@ -216,4 +219,12 @@ public class BasicPayloadData implements Serializable {
     public void setPuppetEnvironment(String puppetEnvironment) {
         this.puppetEnvironment = puppetEnvironment;
     }
+
+    public String getProvider() {
+        return provider;
+    }
+
+    public void setProvider(String provider) {
+        this.provider = provider;
+    }
 }
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/payload/PayloadData.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/payload/PayloadData.java
index aa38780..59bf664 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/payload/PayloadData.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/payload/PayloadData.java
@@ -20,39 +20,30 @@
 package org.apache.stratos.manager.payload;
 
 import java.io.Serializable;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
 
 public abstract class PayloadData implements Serializable {
 
     private BasicPayloadData basicPayloadData;
-    private Map<String, String> completePayloadMap;
+    private StringBuilder completePayloadDataBuilder;
+
     public PayloadData(BasicPayloadData basicPayloadData) {
 
         this.setBasicPayloadData(basicPayloadData);
-        completePayloadMap = new HashMap<String, String>();
+        completePayloadDataBuilder = new StringBuilder(basicPayloadData.getPayloadData());
     }
 
     public void add (String payloadDataName, String payloadDataValue) {
-        completePayloadMap.put(payloadDataName, payloadDataValue);
+
+        if(completePayloadDataBuilder.length() > 0) {
+            completePayloadDataBuilder.append(",");
+        }
+
+        completePayloadDataBuilder.append(payloadDataName + "=" + payloadDataValue);
     }
 
     public StringBuilder getCompletePayloadData () {
 
-        //return completePayloadMap;
-        StringBuilder completePayload = new StringBuilder();
-        completePayload.append(basicPayloadData.getPayloadData());
-        Iterator< String > iter = completePayloadMap.keySet().iterator();
-        while(iter.hasNext()) {
-            String key = iter.next();
-            String val = completePayloadMap.get(key);
-            if(completePayload.length() > 0){
-                completePayload.append(",");
-            }
-            completePayload.append(key + "=" + val);
-        }
-        return completePayload;
+        return completePayloadDataBuilder;
     }
 
     public BasicPayloadData getBasicPayloadData() {
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/publisher/InstanceNotificationPublisher.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/publisher/InstanceNotificationPublisher.java
index e10d4ff..6a885e8 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/publisher/InstanceNotificationPublisher.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/publisher/InstanceNotificationPublisher.java
@@ -57,10 +57,11 @@ public class InstanceNotificationPublisher {
         artifactUpdateEvent.setRepoPassword(repository.getPassword());
         artifactUpdateEvent.setRepoURL(repository.getUrl());
         artifactUpdateEvent.setTenantId(tenantId);
+        artifactUpdateEvent.setCommitEnabled(repository.isCommitEnabled());
 
         log.info(String.format("Publishing artifact updated event: [cluster] %s " +
-                "[repo-URL] %s [repo-username] %s [repo-password] %s [tenant-id] %s",
-                clusterId, repository.getUrl(), repository.getUserName(), repository.getPassword(), tenantId));
+                "[repo-URL] %s [repo-username] %s [tenant-id] %s",
+                clusterId, repository.getUrl(), repository.getUserName(), tenantId));
         publish(artifactUpdateEvent);
     }
 
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/publisher/TenantSynzhronizerTask.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/publisher/TenantSynzhronizerTask.java
index 47911d6..1e291ab 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/publisher/TenantSynzhronizerTask.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/publisher/TenantSynzhronizerTask.java
@@ -77,7 +77,7 @@ public class TenantSynzhronizerTask implements Task {
                         }
                         HashSet<String> clusterIds = new HashSet<String>();
                         clusterIds.add(cartridgeSubscription.getCluster().getClusterDomain());
-                        Subscription subscription = new Subscription(cartridgeSubscription.getType(), clusterIds);
+                        Subscription subscription = new Subscription(cartridgeSubscription.getType(),clusterIds);
                         for(SubscriptionDomain subscriptionDomain : cartridgeSubscription.getSubscriptionDomains()) {
                             subscription.addSubscriptionDomain(subscriptionDomain.getDomainName(), subscriptionDomain.getApplicationContext());
                         }
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/repository/Repository.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/repository/Repository.java
index 16cc2c4..ab95ae3 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/repository/Repository.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/repository/Repository.java
@@ -29,6 +29,7 @@ public class Repository implements Serializable {
     private String userName;
     private String password;
     private boolean isPrivateRepository;
+    private boolean commitEnabled;
 
     public String getUserName() {
         return userName;
@@ -75,4 +76,12 @@ public class Repository implements Serializable {
         return "Repository [id=" + id + ", url=" + url + ", userName=" + userName +
                ", isPrivateRepository=" + isPrivateRepository + "]";
     }
+
+    public boolean isCommitEnabled() {
+        return commitEnabled;
+    }
+
+    public void setCommitEnabled(boolean commitEnabled) {
+        this.commitEnabled = commitEnabled;
+    }
 }
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/repository/RepositoryNotification.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/repository/RepositoryNotification.java
index a109de4..778b3fc 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/repository/RepositoryNotification.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/repository/RepositoryNotification.java
@@ -57,7 +57,7 @@ public class RepositoryNotification {
 		if (cartridgeSubscription.getRepository() != null) {
 			InstanceNotificationPublisher publisher = new InstanceNotificationPublisher();
 			publisher.sendArtifactUpdateEvent(cartridgeSubscription.getRepository(),
-					cartridgeSubscription.getCluster().getClusterDomain(),
+					String.valueOf(cartridgeSubscription.getCluster().getClusterDomain()),
 					String.valueOf(cartridgeSubscription.getSubscriber().getTenantId()));
 
 			if (log.isDebugEnabled()) {
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/CartridgeSubscription.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/CartridgeSubscription.java
index a5d901d..ebf7276 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/CartridgeSubscription.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/CartridgeSubscription.java
@@ -22,7 +22,6 @@ package org.apache.stratos.manager.subscription;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.stratos.cloud.controller.stub.pojo.CartridgeInfo;
-import org.apache.stratos.cloud.controller.stub.pojo.Persistence;
 import org.apache.stratos.cloud.controller.stub.pojo.Properties;
 import org.apache.stratos.manager.dao.CartridgeSubscriptionInfo;
 import org.apache.stratos.manager.dao.Cluster;
@@ -163,19 +162,18 @@ public abstract class CartridgeSubscription implements Serializable {
      *
      * @param properties Any additional properties needed
      *
-     * @param persistence
      * @return CartridgeSubscriptionInfo subscription populated with relevant data
      * @throws ADCException
      * @throws UnregisteredCartridgeException
      */
-    public CartridgeSubscriptionInfo registerSubscription(Properties properties, Persistence persistence)
+    public CartridgeSubscriptionInfo registerSubscription(Properties properties)
             throws ADCException, UnregisteredCartridgeException {
 
         // Properties props = new Properties();
         //props.setProperties(getCartridgeInfo().getProperties());
 
         getSubscriptionTenancyBehaviour().register (getCartridgeInfo(), getCluster(), getPayloadData(), getAutoscalingPolicyName(),
-                getDeploymentPolicyName(), properties, persistence);
+                getDeploymentPolicyName(), properties);
 
         return ApplicationManagementUtil.createCartridgeSubscription(getCartridgeInfo(), getAutoscalingPolicyName(),
                 getType(), getAlias(), getSubscriber().getTenantId(), getSubscriber().getTenantDomain(),
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/DataCartridgeSubscription.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/DataCartridgeSubscription.java
index c97bcd3..4cefa45 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/DataCartridgeSubscription.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/DataCartridgeSubscription.java
@@ -19,7 +19,6 @@
 
 package org.apache.stratos.manager.subscription;
 
-import org.apache.stratos.cloud.controller.stub.pojo.Persistence;
 import org.apache.stratos.manager.dao.CartridgeSubscriptionInfo;
 import org.apache.stratos.manager.dao.DataCartridge;
 import org.apache.stratos.manager.exception.ADCException;
@@ -55,11 +54,11 @@ public class DataCartridgeSubscription extends CartridgeSubscription {
     }
 
     @Override
-    public CartridgeSubscriptionInfo registerSubscription(Properties properties, Persistence persistence) throws ADCException,
+    public CartridgeSubscriptionInfo registerSubscription(Properties properties) throws ADCException,
             UnregisteredCartridgeException {
 
         getSubscriptionTenancyBehaviour().register (getCartridgeInfo(), getCluster(), getPayloadData(), getAutoscalingPolicyName(),
-                getDeploymentPolicyName(), properties, persistence);
+                getDeploymentPolicyName(), properties);
 
         DataCartridge dataCartridge = new DataCartridge();
         dataCartridge.setUserName(getDBUsername());
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/InternalRepoBasedCartridgeSubscription.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/InternalRepoBasedCartridgeSubscription.java
index ebd9a32..1b698e2 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/InternalRepoBasedCartridgeSubscription.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/InternalRepoBasedCartridgeSubscription.java
@@ -52,11 +52,23 @@ public class InternalRepoBasedCartridgeSubscription extends CartridgeSubscriptio
 			RepositoryRequiredException,
 			RepositoryCredentialsRequiredException,
 			RepositoryTransportException, InvalidRepositoryException {
+
+        if(log.isDebugEnabled()) {
+            log.debug("Managing internal repo for repo URL: " + repoURL);
+        }
 		
 		Repository repository = null;
 		String defaultRepoUserName = System.getProperty(CartridgeConstants.INTERNAL_GIT_USERNAME);
 		String defaultRepoPassword = System.getProperty(CartridgeConstants.INTERNAL_GIT_PASSWORD);
-		String[] dirArray = null;
+		String[] dirArray = {"test"};
+
+        if (repoURL != null && !repoURL.equalsIgnoreCase("null") && !repoURL.isEmpty()) {
+            repository = new Repository();
+            repository.setUrl(repoURL);
+            repository.setUserName(defaultRepoUserName);
+            repository.setPassword(defaultRepoPassword);
+            return repository;
+        }
 		
 		// Repo URL will be generated inside createInternalRepository method
 		RepositoryInfoBean repoInfoBean = new RepositoryInfoBean(repoURL, getAlias(), getSubscriber().getTenantDomain(),
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/LBCartridgeSubscription.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/LBCartridgeSubscription.java
index f6555f8..84610e6 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/LBCartridgeSubscription.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/LBCartridgeSubscription.java
@@ -22,7 +22,6 @@ package org.apache.stratos.manager.subscription;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.stratos.cloud.controller.stub.pojo.CartridgeInfo;
-import org.apache.stratos.cloud.controller.stub.pojo.Persistence;
 import org.apache.stratos.cloud.controller.stub.pojo.Properties;
 import org.apache.stratos.manager.dao.CartridgeSubscriptionInfo;
 import org.apache.stratos.manager.exception.ADCException;
@@ -42,6 +41,8 @@ import org.apache.stratos.manager.subscriber.Subscriber;
 import org.apache.stratos.manager.subscription.tenancy.SubscriptionTenancyBehaviour;
 import org.apache.stratos.manager.utils.ApplicationManagementUtil;
 
+import java.util.Set;
+
 public class LBCartridgeSubscription extends CartridgeSubscription {
 
     private LoadBalancerCategory loadBalancerCategory;
@@ -72,24 +73,26 @@ public class LBCartridgeSubscription extends CartridgeSubscription {
         setAutoscalingPolicyName(autoscalingPolicy);
         setDeploymentPolicyName(deploymentPolicyName);
         setRepository(repository);
+        setPayloadData(getLoadBalancerCategory().create(getAlias(), getCluster(), getSubscriber(), getRepository(), getCartridgeInfo(),
+                getSubscriptionKey(), getCustomPayloadEntries()));
         // If LB subscription is for MT service, payload data should not be set
-        if(!loadBalancerCategory.isLoadBalancedServiceMultiTenant()) {        	
-        	setPayloadData(getLoadBalancerCategory().create(getAlias(), getCluster(), getSubscriber(), getRepository(), getCartridgeInfo(),
-                    getSubscriptionKey(), getCustomPayloadEntries()));	
-        }        
+//        if(!loadBalancerCategory.isLoadBalancedServiceMultiTenant()) {
+//        	setPayloadData(getLoadBalancerCategory().create(getAlias(), getCluster(), getSubscriber(), getRepository(), getCartridgeInfo(),
+//                    getSubscriptionKey(), getCustomPayloadEntries()));
+//        }
     }
 
     
     @Override
-    public CartridgeSubscriptionInfo registerSubscription(Properties properties, Persistence persistence) throws ADCException, UnregisteredCartridgeException {
-    	if(!loadBalancerCategory.isLoadBalancedServiceMultiTenant()) {
-    		if(log.isDebugEnabled()) {
-    		 log.debug("Loadbalanced service is single tenant.");
-    		}
+    public CartridgeSubscriptionInfo registerSubscription(Properties properties) throws ADCException, UnregisteredCartridgeException {
+    	//if(!loadBalancerCategory.isLoadBalancedServiceMultiTenant()) {
+    		//if(log.isDebugEnabled()) {
+    		 //log.debug("Loadbalanced service is single tenant.");
+    		//}
     		getLoadBalancerCategory().register (getCartridgeInfo(), getCluster(), getPayloadData(), getAutoscalingPolicyName(),
-    	                getDeploymentPolicyName(), properties, persistence);
-    	}
-       
+    	                getDeploymentPolicyName(), properties);
+    	//}
+
 
         return ApplicationManagementUtil.createCartridgeSubscription(getCartridgeInfo(), getAutoscalingPolicyName(),
                 getType(), getAlias(), getSubscriber().getTenantId(), getSubscriber().getTenantDomain(),
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/PersistenceContext.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/PersistenceContext.java
index 63a13a1..e3b4c13 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/PersistenceContext.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/PersistenceContext.java
@@ -30,13 +30,11 @@ public class PersistenceContext {
     private Property persistanceRequiredProperty;
     private Property sizeProperty;
     private Property deleteOnTerminationProperty;
-    private Property volumeIdProperty;
 
     public PersistenceContext () {
         persistanceRequiredProperty = new Property();
         sizeProperty = new Property();
         deleteOnTerminationProperty = new Property();
-        volumeIdProperty = new Property();
     }
 
 
@@ -66,13 +64,4 @@ public class PersistenceContext {
         this.deleteOnTerminationProperty.setName(propertyName);
         this.deleteOnTerminationProperty.setValue(propertyValue);
     }
-
-    public Property getVolumeIdProperty() {
-        return volumeIdProperty;
-    }
-
-    public void setVolumeIdProperty(String propertyName, String propertyValue) {
-        this.volumeIdProperty.setName(propertyName);
-        this.volumeIdProperty.setValue(propertyValue);
-    }
 }
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/SubscriptionData.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/SubscriptionData.java
index dd40481..ed14d87 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/SubscriptionData.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/SubscriptionData.java
@@ -18,8 +18,6 @@
  */
 package org.apache.stratos.manager.subscription;
 
-import org.apache.stratos.cloud.controller.stub.pojo.Persistence;
-import org.apache.stratos.cloud.controller.stub.pojo.Properties;
 import org.apache.stratos.cloud.controller.stub.pojo.Property;
 
 import java.util.Collections;
@@ -31,6 +29,7 @@ import java.util.Set;
  */
 public class SubscriptionData {
 
+
     private String cartridgeType;
     private String cartridgeAlias;
     private String autoscalingPolicyName;
@@ -43,13 +42,13 @@ public class SubscriptionData {
     private boolean isPrivateRepository;
     private String repositoryUsername;
     private String repositoryPassword;
+    private Property[] properties;
     private PersistenceContext persistanceCtxt;
     private boolean isCommitsEnabled;
     private String serviceGroup;
     private Set<String> domains;
-    private Persistence persistence;
-    private Properties properties;
-
+    private String serviceName;
+    
     public SubscriptionData() {
         this.domains = new HashSet<String>();
     }
@@ -150,6 +149,14 @@ public class SubscriptionData {
         this.repositoryPassword = repositoryPassword;
     }
 
+    public Property[] getProperties() {
+        return properties;
+    }
+
+    public void setProperties(Property[] properties) {
+        this.properties = properties;
+    }
+
     public PersistenceContext getPersistanceContext() {
         return persistanceCtxt;
     }
@@ -190,19 +197,12 @@ public class SubscriptionData {
         return Collections.unmodifiableSet(domains);
     }
 
-    public Persistence getPersistence() {
-        return persistence;
-    }
-
-     public void setPersistence(Persistence persistence) {
-        this.persistence = persistence;
-     }
-
-    public Properties getProperties() {
-        return properties;
-    }
+	public String getServiceName() {
+		return serviceName;
+	}
 
-    public void setProperties(Properties properties) {
-        this.properties = properties;
-    }
+	public void setServiceName(String serviceName) {
+		this.serviceName = serviceName;
+	}
+    
 }
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/factory/CartridgeSubscriptionFactory.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/factory/CartridgeSubscriptionFactory.java
index fbeb159..203ae87 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/factory/CartridgeSubscriptionFactory.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/factory/CartridgeSubscriptionFactory.java
@@ -49,8 +49,13 @@ public class CartridgeSubscriptionFactory {
         //TODO: fix the logic properly
         CartridgeSubscription cartridgeSubscription = null;
         if(cartridgeInfo.getMultiTenant()) {
-            cartridgeSubscription = new FrameworkCartridgeSubscription(cartridgeInfo, subscriptionTenancyBehaviour);
-
+            if (cartridgeInfo.getProvider().equals(CartridgeConstants.INTERNAL_REPO_BASED_CARTRIDGE_PROVIDER)) {
+                cartridgeSubscription = new InternalRepoBasedCartridgeSubscription(cartridgeInfo, subscriptionTenancyBehaviour);
+            } else if (cartridgeInfo.getProvider().equals("application")) {
+                cartridgeSubscription = new ApplicationCartridgeSubscription(cartridgeInfo, subscriptionTenancyBehaviour);
+            } else {
+                cartridgeSubscription = new FrameworkCartridgeSubscription(cartridgeInfo, subscriptionTenancyBehaviour);
+            }
         } else {
             // TODO: fix properly with cartridgeCategory element
             if(cartridgeInfo.getProvider().equals(CartridgeConstants.DATA_CARTRIDGE_PROVIDER)) {
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/tenancy/SubscriptionMultiTenantBehaviour.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/tenancy/SubscriptionMultiTenantBehaviour.java
index 664a2b3..1b96734 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/tenancy/SubscriptionMultiTenantBehaviour.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/tenancy/SubscriptionMultiTenantBehaviour.java
@@ -22,7 +22,6 @@ package org.apache.stratos.manager.subscription.tenancy;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.stratos.cloud.controller.stub.pojo.CartridgeInfo;
-import org.apache.stratos.cloud.controller.stub.pojo.Persistence;
 import org.apache.stratos.cloud.controller.stub.pojo.Properties;
 import org.apache.stratos.manager.dao.Cluster;
 import org.apache.stratos.manager.deploy.service.Service;
@@ -112,8 +111,8 @@ public class SubscriptionMultiTenantBehaviour extends SubscriptionTenancyBehavio
         return null;
     }
 
-    public void register(CartridgeInfo cartridgeInfo, Cluster cluster, PayloadData payloadData, String autoscalePolicyName,
-                         String deploymentPolicyName, Properties properties, Persistence persistence)
+    public void register (CartridgeInfo cartridgeInfo, Cluster cluster, PayloadData payloadData, String autoscalePolicyName,
+                          String deploymentPolicyName, Properties properties)
             throws ADCException, UnregisteredCartridgeException {
 
         //nothing to do
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/utils/CartridgeSubscriptionUtils.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/utils/CartridgeSubscriptionUtils.java
index bd575ce..a12f1f7 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/utils/CartridgeSubscriptionUtils.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/subscription/utils/CartridgeSubscriptionUtils.java
@@ -59,10 +59,11 @@ public class CartridgeSubscriptionUtils {
         BasicPayloadData basicPayloadData = new BasicPayloadData();
         basicPayloadData.setApplicationPath(cartridgeInfo.getBaseDir());
         basicPayloadData.setSubscriptionKey(subscriptionKey);
-        basicPayloadData.setDeployment("default");//currently hard coded to default
+        //basicPayloadData.setDeployment("default");//currently hard coded to default
         basicPayloadData.setMultitenant(String.valueOf(cartridgeInfo.getMultiTenant()));
         basicPayloadData.setPortMappings(createPortMappingPayloadString(cartridgeInfo));
         basicPayloadData.setServiceName(cartridgeInfo.getType());
+        basicPayloadData.setProvider(cartridgeInfo.getProvider());
 
         if(repository != null) {
             basicPayloadData.setGitRepositoryUrl(repository.getUrl());
@@ -97,7 +98,7 @@ public class CartridgeSubscriptionUtils {
         basicPayloadData.setApplicationPath(service.getCartridgeInfo().getBaseDir());
         basicPayloadData.setSubscriptionKey(service.getSubscriptionKey());
         basicPayloadData.setClusterId(service.getClusterId());
-        basicPayloadData.setDeployment("default");//currently hard coded to default
+        //basicPayloadData.setDeployment("default");//currently hard coded to default
         basicPayloadData.setHostName(service.getHostName());
         basicPayloadData.setMultitenant(String.valueOf(service.getCartridgeInfo().getMultiTenant()));
         basicPayloadData.setPortMappings(createPortMappingPayloadString(service.getCartridgeInfo()));
@@ -148,9 +149,7 @@ public class CartridgeSubscriptionUtils {
     }
 
     public static String generateSubscriptionKey() {
-        String key = RandomStringUtils.randomAlphanumeric(16);
-        log.info("Generated key  : " + key); // TODO -- remove the log
-        return key;
+        return RandomStringUtils.randomAlphanumeric(16);
     }
 
     static class TenantSubscribedEventPublisher implements Runnable {
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/topology/model/TopologyClusterInformationModel.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/topology/model/TopologyClusterInformationModel.java
index 928c3ce..2b73dff 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/topology/model/TopologyClusterInformationModel.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/topology/model/TopologyClusterInformationModel.java
@@ -41,6 +41,7 @@ public class TopologyClusterInformationModel {
     //private Map<Integer, Set<CartridgeTypeContext>> tenantIdToCartridgeTypeContextMap;
     private static TopologyClusterInformationModel topologyClusterInformationModel;
     private Map<String, Cluster> clusterIdToClusterMap;
+    private Map<String, Cluster> serviceNameToClusterMap;
     private DataInsertionAndRetrievalManager dataInsertionNRetrievalMgr;
     private boolean initialized;
 
@@ -51,6 +52,7 @@ public class TopologyClusterInformationModel {
     private TopologyClusterInformationModel() {
         //tenantIdToCartridgeTypeContextMap = new HashMap<Integer, Set<CartridgeTypeContext>>();
         clusterIdToClusterMap = new HashMap<String, Cluster>();
+        serviceNameToClusterMap = new HashMap<String, Cluster>();
         dataInsertionNRetrievalMgr = new DataInsertionAndRetrievalManager();
     }
 
@@ -73,6 +75,7 @@ public class TopologyClusterInformationModel {
     		log.debug(" Adding cluster ["+cluster.getClusterId()+"] ");
     	}
     	clusterIdToClusterMap.put(cluster.getClusterId(), cluster);
+    	serviceNameToClusterMap.put(cluster.getServiceName(), cluster);
     }   
 
     public Cluster getCluster (int tenantId, String cartridgeType, String subscriptionAlias) {
@@ -136,6 +139,22 @@ public class TopologyClusterInformationModel {
     	return clusterSet;
     }
    
+	public Set<Cluster> getClusters(String cartridgeType) {
+
+		Set<Cluster> clusterSet = new HashSet<Cluster>();
+
+		if (log.isDebugEnabled()) {
+			log.info("Finding cluster with service name [" + cartridgeType
+					+ "] ");
+		}
+		Cluster foundCluster = serviceNameToClusterMap.get(cartridgeType);
+		if (foundCluster != null) {
+			clusterSet.add(foundCluster);
+		}
+
+		return clusterSet;
+	}
+	
 //    public void removeCluster (int tenantId, String cartridgeType, String subscriptionAlias) {
 //
 //        Set<CartridgeTypeContext> cartridgeTypeContextSet = null;
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/utils/ApplicationManagementUtil.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/utils/ApplicationManagementUtil.java
index 7282253..d0136f5 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/utils/ApplicationManagementUtil.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/utils/ApplicationManagementUtil.java
@@ -36,7 +36,6 @@ import org.apache.axis2.engine.AxisConfiguration;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.stratos.cloud.controller.stub.pojo.CartridgeInfo;
-import org.apache.stratos.cloud.controller.stub.pojo.Persistence;
 import org.apache.stratos.cloud.controller.stub.pojo.Properties;
 import org.apache.stratos.cloud.controller.stub.pojo.Property;
 import org.apache.stratos.cloud.controller.stub.CloudControllerServiceUnregisteredCartridgeExceptionException;
@@ -248,14 +247,14 @@ public class ApplicationManagementUtil {
     
     
     public static void registerService(String cartridgeType, String domain, String subDomain,
-                                       StringBuilder payload, String tenantRange, String hostName,
-                                       String autoscalingPoliyName, String deploymentPolicyName,
-                                       Properties properties, Persistence persistence)
+                                        StringBuilder payload, String tenantRange, String hostName,
+                                        String autoscalingPoliyName, String deploymentPolicyName,
+                                        Properties properties)
             throws ADCException, UnregisteredCartridgeException {
         log.info("Register service..");
         try {
             CloudControllerServiceClient.getServiceClient().register(domain, cartridgeType, payload.toString(), tenantRange,
-                    hostName, properties, autoscalingPoliyName, deploymentPolicyName, persistence );
+                    hostName, properties, autoscalingPoliyName, deploymentPolicyName );
         } catch (CloudControllerServiceUnregisteredCartridgeExceptionException e) {
             String msg = "Exception is occurred in register service operation. Reason :" + e.getMessage();
             log.error(msg, e);
diff --git a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/utils/RepositoryCreator.java b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/utils/RepositoryCreator.java
index b17b85f..c6406f1 100644
--- a/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/utils/RepositoryCreator.java
+++ b/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/utils/RepositoryCreator.java
@@ -120,7 +120,7 @@ public class RepositoryCreator implements Runnable {
 			handleException(e.getMessage(), e);
 		}
 		
-		repository.setUrl(System.getProperty(CartridgeConstants.INTERNAL_GIT_URL)+repoName);
+		repository.setUrl(System.getProperty(CartridgeConstants.INTERNAL_GIT_URL) + "/git/" + repoName);
 		repository.setUserName(userName);
 		repository.setPassword(password);
 		
@@ -155,8 +155,9 @@ public class RepositoryCreator implements Runnable {
 
 		CloneCommand cloneCmd =
 		                        git.cloneRepository()
-		                           .setURI(System.getProperty(CartridgeConstants.INTERNAL_GIT_URL) + tenantDomain + "/" +
-		                                           cartridgeName + ".git")
+		                           .setURI(System.getProperty(CartridgeConstants.INTERNAL_GIT_URL) +
+                                                    "/git/" + tenantDomain + "/" +
+		                                            cartridgeName + ".git")
 		                           .setDirectory(new File(parentDirName));
 
 		cloneCmd.setCredentialsProvider(credentialsProvider);
diff --git a/components/org.apache.stratos.messaging/pom.xml b/components/org.apache.stratos.messaging/pom.xml
index 54b8fde..8545681 100644
--- a/components/org.apache.stratos.messaging/pom.xml
+++ b/components/org.apache.stratos.messaging/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
@@ -64,6 +64,11 @@
             <version>${wso2carbon.version}</version>
         </dependency>
         <dependency>
+            <groupId>org.wso2.carbon</groupId>
+            <artifactId>org.wso2.carbon.utils</artifactId>
+            <version>${wso2carbon.version}</version>
+        </dependency>
+        <dependency>
     		<groupId>com.jamesmurty.utils</groupId>
     		<artifactId>java-xmlbuilder</artifactId>
     		<version>0.6</version>
diff --git a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/domain/topology/Cluster.java b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/domain/topology/Cluster.java
index dddb869..08bd262 100644
--- a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/domain/topology/Cluster.java
+++ b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/domain/topology/Cluster.java
@@ -49,6 +49,8 @@ public class Cluster implements Serializable {
     @XmlJavaTypeAdapter(MapAdapter.class)
     private Map<String, Member> memberMap;
 
+    private ClusterStatus status;
+
     private String loadBalanceAlgorithmName;
     @XmlJavaTypeAdapter(MapAdapter.class)
     private Properties properties;
@@ -200,5 +202,13 @@ public class Cluster implements Serializable {
         }
         return partitionIds.keySet();
     }
+
+    public ClusterStatus getStatus() {
+        return status;
+    }
+
+    public void setStatus(ClusterStatus status) {
+        this.status = status;
+    }
 }
 
diff --git a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/domain/topology/ClusterStatus.java b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/domain/topology/ClusterStatus.java
new file mode 100644
index 0000000..b3301c8
--- /dev/null
+++ b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/domain/topology/ClusterStatus.java
@@ -0,0 +1,36 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.stratos.messaging.domain.topology;
+public enum ClusterStatus {
+    Created(1),
+    In_Maintenance(2),
+    Removed(3);
+
+    private int code;
+
+    private ClusterStatus(int code) {
+        this.code = code;
+    }
+
+    public int getCode() {
+        return code;
+    }
+
+}
diff --git a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/instance/notifier/ArtifactUpdatedEvent.java b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/instance/notifier/ArtifactUpdatedEvent.java
index fe0240d..0f6aaef 100644
--- a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/instance/notifier/ArtifactUpdatedEvent.java
+++ b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/instance/notifier/ArtifactUpdatedEvent.java
@@ -33,6 +33,7 @@ public class ArtifactUpdatedEvent extends InstanceNotifierEvent implements Seria
     private String repoPassword;
     private String repoURL;
     private String tenantId;
+    private boolean commitEnabled;
 
     public String getClusterId() {
         return clusterId;
@@ -87,4 +88,12 @@ public class ArtifactUpdatedEvent extends InstanceNotifierEvent implements Seria
         return String.format("[cluster] %s [repo-url] %s [repo-username] %s [tenant] %s",
                 getClusterId(), getRepoURL(), getRepoUserName(), getTenantId());
     }
+
+    public boolean isCommitEnabled() {
+        return commitEnabled;
+    }
+
+    public void setCommitEnabled(boolean commitEnabled) {
+        this.commitEnabled = commitEnabled;
+    }
 }
diff --git a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/tenant/SubscriptionDomainsAddedEvent.java b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/tenant/SubscriptionDomainsAddedEvent.java
new file mode 100644
index 0000000..312571a
--- /dev/null
+++ b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/tenant/SubscriptionDomainsAddedEvent.java
@@ -0,0 +1,60 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.stratos.messaging.event.tenant;
+
+import org.apache.stratos.messaging.event.Event;
+
+import java.io.Serializable;
+import java.util.*;
+
+/**
+ * This event is fired when domains are added to a tenant subscription.
+ */
+public class SubscriptionDomainsAddedEvent extends Event implements Serializable {
+    private static final long serialVersionUID = 3457484382856403382L;
+
+    private final int tenantId;
+    private final String serviceName;
+    private final Set<String> clusterIds;
+    private final Set<String> domains;
+
+    public SubscriptionDomainsAddedEvent(int tenantId, String serviceName, Set<String> clusterIds, Set<String> domains) {
+        this.tenantId = tenantId;
+        this.serviceName = serviceName;
+        this.clusterIds = clusterIds;
+        this.domains = (domains != null) ? domains : new HashSet<String>();
+    }
+
+    public int getTenantId() {
+        return tenantId;
+    }
+
+    public String getServiceName() {
+        return serviceName;
+    }
+
+    public Set<String> getClusterIds() {
+        return Collections.unmodifiableSet(clusterIds);
+    }
+
+    public Set<String> getDomains() {
+        return Collections.unmodifiableSet(domains);
+    }
+}
diff --git a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/tenant/SubscriptionDomainsRemovedEvent.java b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/tenant/SubscriptionDomainsRemovedEvent.java
new file mode 100644
index 0000000..3cc5664
--- /dev/null
+++ b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/tenant/SubscriptionDomainsRemovedEvent.java
@@ -0,0 +1,60 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.stratos.messaging.event.tenant;
+
+import org.apache.stratos.messaging.event.Event;
+
+import java.io.Serializable;
+import java.util.*;
+
+/**
+ * This event is fired when domains are removed from a tenant subscription.
+ */
+public class SubscriptionDomainsRemovedEvent extends Event implements Serializable {
+    private static final long serialVersionUID = -8837521344795740210L;
+
+    private final int tenantId;
+    private final String serviceName;
+    private final Set<String> clusterIds;
+    private Set<String> domains;
+
+    public SubscriptionDomainsRemovedEvent(int tenantId, String serviceName, Set<String> clusterIds, Set<String> domains) {
+        this.tenantId = tenantId;
+        this.serviceName = serviceName;
+        this.clusterIds = clusterIds;
+        this.domains = (domains != null) ? domains : new HashSet<String>();
+    }
+
+    public int getTenantId() {
+        return tenantId;
+    }
+
+    public String getServiceName() {
+        return serviceName;
+    }
+
+    public Set<String> getClusterIds() {
+        return Collections.unmodifiableSet(clusterIds);
+    }
+
+    public Set<String> getDomains() {
+        return Collections.unmodifiableSet(domains);
+    }
+}
diff --git a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/topology/ClusterMaintenanceModeEvent.java b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/topology/ClusterMaintenanceModeEvent.java
new file mode 100644
index 0000000..76e5820
--- /dev/null
+++ b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/topology/ClusterMaintenanceModeEvent.java
@@ -0,0 +1,58 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.stratos.messaging.event.topology;
+
+import org.apache.stratos.messaging.domain.topology.ClusterStatus;
+
+import java.io.Serializable;
+
+public class ClusterMaintenanceModeEvent extends TopologyEvent implements Serializable {
+
+	private final String serviceName;
+	private final String clusterId;
+    private ClusterStatus status;
+
+    public ClusterMaintenanceModeEvent(String serviceName, String clusterId) {
+        this.serviceName = serviceName;
+        this.clusterId = clusterId;
+    }
+
+    public String getServiceName() {
+        return serviceName;
+    }
+
+    @Override
+    public String toString() {
+        return "ClusterMaintenanceModeEvent [serviceName=" + serviceName + ", clusterStatus=" +
+                status.toString() + "]";
+    }
+
+    public String getClusterId() {
+        return clusterId;
+    }
+
+    public ClusterStatus getStatus() {
+        return status;
+    }
+
+    public void setStatus(ClusterStatus status) {
+        this.status = status;
+    }
+}
diff --git a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/topology/InstanceSpawnedEvent.java b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/topology/InstanceSpawnedEvent.java
index f42dda8..3e99a30 100644
--- a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/topology/InstanceSpawnedEvent.java
+++ b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/topology/InstanceSpawnedEvent.java
@@ -20,6 +20,7 @@ package org.apache.stratos.messaging.event.topology;
 
 
 import java.io.Serializable;
+import java.util.Properties;
 
 
 /**
@@ -36,6 +37,8 @@ public class InstanceSpawnedEvent extends TopologyEvent implements Serializable
     private String lbClusterId;
     private String memberPublicIp;
     private String memberIp;
+    private Properties properties;
+
 
     public InstanceSpawnedEvent(String serviceName, String clusterId, String networkPartitionId, String partitionId, String memberId) {
         this.serviceName = serviceName;
@@ -88,5 +91,12 @@ public class InstanceSpawnedEvent extends TopologyEvent implements Serializable
 	public void setMemberIp(String memberIp) {
 		this.memberIp = memberIp;
 	}
-    
+
+    public Properties getProperties() {
+        return properties;
+    }
+
+    public void setProperties(Properties properties) {
+        this.properties = properties;
+    }
 }
diff --git a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/topology/MemberTerminatedEvent.java b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/topology/MemberTerminatedEvent.java
index 986b309..21aa340 100644
--- a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/topology/MemberTerminatedEvent.java
+++ b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/topology/MemberTerminatedEvent.java
@@ -20,6 +20,7 @@
 package org.apache.stratos.messaging.event.topology;
 
 import java.io.Serializable;
+import java.util.Properties;
 
 /**
  * This event is fired by Cloud Controller when a member is terminated.
@@ -33,6 +34,8 @@ public class
     private final String networkPartitionId;
     private final String partitionId;
     private final String memberId;
+    private Properties properties;
+
 
     public MemberTerminatedEvent(String serviceName, String clusterId, String networkPartitionId, String partitionId, String memberId) {
         this.serviceName = serviceName;
@@ -61,4 +64,12 @@ public class
     public String getNetworkPartitionId() {
         return networkPartitionId;
     }
+
+    public Properties getProperties() {
+        return properties;
+    }
+
+    public void setProperties(Properties properties) {
+        this.properties = properties;
+    }
 }
diff --git a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/listener/topology/ClusterMaintenanceModeEventListener.java b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/listener/topology/ClusterMaintenanceModeEventListener.java
new file mode 100644
index 0000000..3bd2a19
--- /dev/null
+++ b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/listener/topology/ClusterMaintenanceModeEventListener.java
@@ -0,0 +1,25 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.stratos.messaging.listener.topology;
+
+import org.apache.stratos.messaging.listener.EventListener;
+
+public abstract class ClusterMaintenanceModeEventListener extends EventListener {
+
+}
diff --git a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/tenant/SubscriptionDomainAddedMessageProcessor.java b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/tenant/SubscriptionDomainAddedMessageProcessor.java
index 8952b71..79d1e12 100644
--- a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/tenant/SubscriptionDomainAddedMessageProcessor.java
+++ b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/tenant/SubscriptionDomainAddedMessageProcessor.java
@@ -47,7 +47,7 @@ public class SubscriptionDomainAddedMessageProcessor extends MessageProcessor {
     public boolean process(String type, String message, Object object) {
         if (SubscriptionDomainAddedEvent.class.getName().equals(type)) {
             // Return if tenant manager has not initialized
-            if(!TenantManager.getInstance().isInitialized()) {
+            if (!TenantManager.getInstance().isInitialized()) {
                 return false;
             }
 
@@ -57,39 +57,37 @@ public class SubscriptionDomainAddedMessageProcessor extends MessageProcessor {
             try {
                 TenantManager.acquireWriteLock();
                 Tenant tenant = TenantManager.getInstance().getTenant(event.getTenantId());
-                if(tenant == null) {
-                    if(log.isWarnEnabled()) {
+                if (tenant == null) {
+                    if (log.isWarnEnabled()) {
                         log.warn(String.format("Tenant not found: [tenant-id] %d", event.getTenantId()));
                     }
                     return false;
                 }
                 Subscription subscription = tenant.getSubscription(event.getServiceName());
-                if(subscription == null) {
-                    if(log.isWarnEnabled()) {
+                if (subscription == null) {
+                    if (log.isWarnEnabled()) {
                         log.warn(String.format("Subscription not found: [tenant-id] %d", event.getTenantId()));
                     }
                     return false;
                 }
                 subscription.addSubscriptionDomain(new SubscriptionDomain(event.getDomainName(), event.getApplicationContext()));
-                if(log.isInfoEnabled()) {
+                if (log.isInfoEnabled()) {
                     log.info(String.format("Domain added to tenant subscription: [tenant-id] %d [tenant-domain] %s " +
-                            "[service] %s [domain-name] %s [application-context] %s", tenant.getTenantId(),
-                            tenant.getTenantDomain(), event.getServiceName(), event.getDomainName(), event.getApplicationContext()));
+                                    "[service] %s [domain-name] %s [application-context] %s", tenant.getTenantId(),
+                            tenant.getTenantDomain(), event.getServiceName(), event.getDomainName(), event.getApplicationContext()
+                    ));
                 }
 
                 // Notify event listeners
                 notifyEventListeners(event);
                 return true;
-            }
-            finally {
+            } finally {
                 TenantManager.releaseWriteLock();
             }
-        }
-        else {
-            if(nextProcessor != null) {
+        } else {
+            if (nextProcessor != null) {
                 return nextProcessor.process(type, message, object);
-            }
-            else {
+            } else {
                 throw new RuntimeException(String.format("Failed to process tenant message using available message processors: [type] %s [body] %s", type, message));
             }
         }
diff --git a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/tenant/SubscriptionDomainRemovedMessageProcessor.java b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/tenant/SubscriptionDomainRemovedMessageProcessor.java
index 5c46655..ea413cd 100644
--- a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/tenant/SubscriptionDomainRemovedMessageProcessor.java
+++ b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/tenant/SubscriptionDomainRemovedMessageProcessor.java
@@ -46,7 +46,7 @@ public class SubscriptionDomainRemovedMessageProcessor extends MessageProcessor
     public boolean process(String type, String message, Object object) {
         if (SubscriptionDomainRemovedEvent.class.getName().equals(type)) {
             // Return if tenant manager has not initialized
-            if(!TenantManager.getInstance().isInitialized()) {
+            if (!TenantManager.getInstance().isInitialized()) {
                 return false;
             }
 
@@ -56,39 +56,37 @@ public class SubscriptionDomainRemovedMessageProcessor extends MessageProcessor
             try {
                 TenantManager.acquireWriteLock();
                 Tenant tenant = TenantManager.getInstance().getTenant(event.getTenantId());
-                if(tenant == null) {
-                    if(log.isWarnEnabled()) {
+                if (tenant == null) {
+                    if (log.isWarnEnabled()) {
                         log.warn(String.format("Tenant not found: [tenant-id] %d", event.getTenantId()));
                     }
                     return false;
                 }
                 Subscription subscription = tenant.getSubscription(event.getServiceName());
-                if(subscription == null) {
-                    if(log.isWarnEnabled()) {
+                if (subscription == null) {
+                    if (log.isWarnEnabled()) {
                         log.warn(String.format("Subscription not found: [tenant-id] %d", event.getTenantId()));
                     }
                     return false;
                 }
                 subscription.removeSubscriptionDomain(event.getDomainName());
-                if(log.isInfoEnabled()) {
+                if (log.isInfoEnabled()) {
                     log.info(String.format("Domain removed from tenant subscription: [tenant-id] %d [tenant-domain] %s " +
-                            "[service] %s [domain-name] %s", tenant.getTenantId(), tenant.getTenantDomain(),
-                            event.getServiceName(), event.getDomainName()));
+                                    "[service] %s [domain-name] %s", tenant.getTenantId(), tenant.getTenantDomain(),
+                            event.getServiceName(), event.getDomainName()
+                    ));
                 }
 
                 // Notify event listeners
                 notifyEventListeners(event);
                 return true;
-            }
-            finally {
+            } finally {
                 TenantManager.releaseWriteLock();
             }
-        }
-        else {
-            if(nextProcessor != null) {
+        } else {
+            if (nextProcessor != null) {
                 return nextProcessor.process(type, message, object);
-            }
-            else {
+            } else {
                 throw new RuntimeException(String.format("Failed to process tenant message using available message processors: [type] %s [body] %s", type, message));
             }
         }
diff --git a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/ClusterMaintenanceModeMessageProcessor.java b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/ClusterMaintenanceModeMessageProcessor.java
new file mode 100644
index 0000000..0300b24
--- /dev/null
+++ b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/ClusterMaintenanceModeMessageProcessor.java
@@ -0,0 +1,115 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.stratos.messaging.message.processor.topology;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.stratos.messaging.domain.topology.Cluster;
+import org.apache.stratos.messaging.domain.topology.ClusterStatus;
+import org.apache.stratos.messaging.domain.topology.Service;
+import org.apache.stratos.messaging.domain.topology.Topology;
+import org.apache.stratos.messaging.event.topology.ClusterMaintenanceModeEvent;
+import org.apache.stratos.messaging.message.filter.topology.TopologyClusterFilter;
+import org.apache.stratos.messaging.message.filter.topology.TopologyServiceFilter;
+import org.apache.stratos.messaging.message.processor.MessageProcessor;
+import org.apache.stratos.messaging.util.Util;
+
+public class ClusterMaintenanceModeMessageProcessor extends MessageProcessor {
+    private static final Log log = LogFactory.getLog(ClusterMaintenanceModeMessageProcessor.class);
+    private MessageProcessor nextProcessor;
+
+    @Override
+    public void setNext(MessageProcessor nextProcessor) {
+        this.nextProcessor = nextProcessor;
+    }
+
+    @Override
+    public boolean process(String type, String message, Object object) {
+        Topology topology = (Topology) object;
+
+        if (ClusterMaintenanceModeEvent.class.getName().equals(type)) {
+            // Return if topology has not been initialized
+            if (!topology.isInitialized())
+                return false;
+
+            // Parse complete message and build event
+            ClusterMaintenanceModeEvent event = (ClusterMaintenanceModeEvent) Util.
+                                jsonToObject(message, ClusterMaintenanceModeEvent.class);
+
+            // Apply service filter
+            if (TopologyServiceFilter.getInstance().isActive()) {
+                if (TopologyServiceFilter.getInstance().serviceNameExcluded(event.getServiceName())) {
+                    // Service is excluded, do not update topology or fire event
+                    if (log.isDebugEnabled()) {
+                        log.debug(String.format("Service is excluded: [service] %s", event.getServiceName()));
+                    }
+                    return false;
+                }
+            }
+
+            // Apply cluster filter
+            if (TopologyClusterFilter.getInstance().isActive()) {
+                if (TopologyClusterFilter.getInstance().clusterIdExcluded(event.getClusterId())) {
+                    // Cluster is excluded, do not update topology or fire event
+                    if (log.isDebugEnabled()) {
+                        log.debug(String.format("Cluster is excluded: [cluster] %s", event.getClusterId()));
+                    }
+                    return false;
+                }
+            }
+
+            // Validate event against the existing topology
+            Service service = topology.getService(event.getServiceName());
+            if (service == null) {
+                if (log.isWarnEnabled()) {
+                    log.warn(String.format("Service does not exist: [service] %s",
+                            event.getServiceName()));
+                }
+                return false;
+            }
+            Cluster cluster = service.getCluster(event.getClusterId());
+
+            if (cluster == null) {
+                if (log.isWarnEnabled()) {
+                    log.warn(String.format("Cluster not exists in service: [service] %s [cluster] %s", event.getServiceName(),
+                            event.getClusterId()));
+                }
+			} else {
+			    // Apply changes to the topology
+                cluster.setStatus(ClusterStatus.In_Maintenance);
+				if (log.isInfoEnabled()) {
+					log.info(String.format("Cluster updated as maintenance mode: %s",
+							cluster.toString()));
+				}
+			}
+
+            // Notify event listeners
+            notifyEventListeners(event);
+            return true;
+
+        } else {
+            if (nextProcessor != null) {
+                // ask the next processor to take care of the message.
+                return nextProcessor.process(type, message, topology);
+            } else {
+                throw new RuntimeException(String.format("Failed to process message using available message processors: [type] %s [body] %s", type, message));
+            }
+        }
+    }
+}
diff --git a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/ClusterRemovedMessageProcessor.java b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/ClusterRemovedMessageProcessor.java
index 69ef5b0..0e5a56f 100644
--- a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/ClusterRemovedMessageProcessor.java
+++ b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/ClusterRemovedMessageProcessor.java
@@ -80,10 +80,6 @@ public class ClusterRemovedMessageProcessor extends MessageProcessor {
                 }
                 return false;
             }
-
-            // Notify event listeners before removing the cluster object
-            notifyEventListeners(event);
-
             if (!service.clusterExists(event.getClusterId())) {
                 if (log.isWarnEnabled()) {
                     log.warn(String.format("Cluster does not exist: [service] %s [cluster] %s",
@@ -101,7 +97,11 @@ public class ClusterRemovedMessageProcessor extends MessageProcessor {
             	}
             }
 
+
+            // Notify event listeners
+            notifyEventListeners(event);
             return true;
+
         } else {
             if (nextProcessor != null) {
                 // ask the next processor to take care of the message.
diff --git a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/InstanceSpawnedMessageProcessor.java b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/InstanceSpawnedMessageProcessor.java
index 3bb0532..8e4e1b1 100644
--- a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/InstanceSpawnedMessageProcessor.java
+++ b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/InstanceSpawnedMessageProcessor.java
@@ -114,6 +114,7 @@ public class InstanceSpawnedMessageProcessor extends MessageProcessor {
             	member.setMemberPublicIp(event.getMemberPublicIp());
             	member.setMemberIp(event.getMemberIp());
             	member.setLbClusterId(event.getLbClusterId());
+                member.setProperties(event.getProperties());
             	cluster.addMember(member);
             	
             	if (log.isInfoEnabled()) {
diff --git a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/MemberTerminatedMessageProcessor.java b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/MemberTerminatedMessageProcessor.java
index 5b5cbc9..461b0da 100644
--- a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/MemberTerminatedMessageProcessor.java
+++ b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/MemberTerminatedMessageProcessor.java
@@ -104,9 +104,6 @@ public class MemberTerminatedMessageProcessor extends MessageProcessor {
                 }
             }
 
-            // Notify event listeners before removing member object
-            notifyEventListeners(event);
-
             if (member == null) {
                 if (log.isWarnEnabled()) {
                     log.warn(String.format("Member already terminated: [service] %s [cluster] %s [member] %s",
@@ -126,7 +123,10 @@ public class MemberTerminatedMessageProcessor extends MessageProcessor {
             	}
             }
 
+
+            notifyEventListeners(event);
             return true;
+
         } else {
             if (nextProcessor != null) {
                 // ask the next processor to take care of the message.
diff --git a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/ServiceRemovedMessageProcessor.java b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/ServiceRemovedMessageProcessor.java
index 2c0bc70..5ea95cd 100644
--- a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/ServiceRemovedMessageProcessor.java
+++ b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/ServiceRemovedMessageProcessor.java
@@ -60,9 +60,6 @@ public class ServiceRemovedMessageProcessor extends MessageProcessor {
                 }
             }
 
-            // Notify event listeners before removing service object
-            notifyEventListeners(event);
-
             // Validate event against the existing topology
             Service service = topology.getService(event.getServiceName());
             if (service == null) {
@@ -80,7 +77,11 @@ public class ServiceRemovedMessageProcessor extends MessageProcessor {
             	}
             }
 
+
+            // Notify event listeners
+            notifyEventListeners(event);
             return true;
+
         } else {
             if (nextProcessor != null) {
                 // ask the next processor to take care of the message.
diff --git a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/TopologyMessageProcessorChain.java b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/TopologyMessageProcessorChain.java
index 7415c1f..eac7358 100644
--- a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/TopologyMessageProcessorChain.java
+++ b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/TopologyMessageProcessorChain.java
@@ -35,6 +35,7 @@ public class TopologyMessageProcessorChain extends MessageProcessorChain {
     private ServiceCreatedMessageProcessor serviceCreatedMessageProcessor;
     private ServiceRemovedMessageProcessor serviceRemovedMessageProcessor;
     private ClusterCreatedMessageProcessor clusterCreatedMessageProcessor;
+    private ClusterMaintenanceModeMessageProcessor clusterMaintenanceModeMessageProcessor;
     private ClusterRemovedMessageProcessor clusterRemovedMessageProcessor;
     private InstanceSpawnedMessageProcessor instanceSpawnedMessageProcessor;
     private MemberStartedMessageProcessor memberStartedMessageProcessor;
@@ -58,6 +59,9 @@ public class TopologyMessageProcessorChain extends MessageProcessorChain {
         clusterCreatedMessageProcessor = new ClusterCreatedMessageProcessor();
         add(clusterCreatedMessageProcessor);
 
+        clusterMaintenanceModeMessageProcessor = new ClusterMaintenanceModeMessageProcessor();
+        add(clusterMaintenanceModeMessageProcessor);
+
         clusterRemovedMessageProcessor = new ClusterRemovedMessageProcessor();
         add(clusterRemovedMessageProcessor);
 
@@ -93,6 +97,8 @@ public class TopologyMessageProcessorChain extends MessageProcessorChain {
         } else if (eventListener instanceof ClusterCreatedEventListener) {
             clusterCreatedMessageProcessor.addEventListener(eventListener);
             log.info("Messaging: added ClusterCreatedEventListener");
+        } else if (eventListener instanceof ClusterMaintenanceModeEventListener) {
+            clusterMaintenanceModeMessageProcessor.addEventListener(eventListener);
         } else if (eventListener instanceof ClusterRemovedEventListener) {
             clusterRemovedMessageProcessor.addEventListener(eventListener);
         } else if (eventListener instanceof InstanceSpawnedEventListener) {
diff --git a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/tenant/TenantManager.java b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/tenant/TenantManager.java
index 8133b90..4581889 100644
--- a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/tenant/TenantManager.java
+++ b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/tenant/TenantManager.java
@@ -22,6 +22,7 @@ package org.apache.stratos.messaging.message.receiver.tenant;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.stratos.messaging.domain.tenant.Tenant;
+import org.wso2.carbon.base.MultitenantConstants;
 
 import java.util.HashMap;
 import java.util.List;
@@ -78,6 +79,10 @@ public class TenantManager {
     private TenantManager() {
         this.tenantIdTenantMap = new HashMap<Integer, Tenant>();
         this.tenantDomainTenantMap = new HashMap<String, Tenant>();
+        Tenant superTenant = new Tenant(MultitenantConstants.SUPER_TENANT_ID, 
+        		MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);
+        this.tenantIdTenantMap.put(MultitenantConstants.SUPER_TENANT_ID, superTenant);
+        this.tenantDomainTenantMap.put(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME, superTenant);
     }
 
     public static TenantManager getInstance() {
diff --git a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/util/Constants.java b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/util/Constants.java
index d624d6c..a44489f 100644
--- a/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/util/Constants.java
+++ b/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/util/Constants.java
@@ -60,8 +60,9 @@ public class Constants {
     public static final String IS_VOLUME_REQUIRED = "volume.required";
     public static final String SHOULD_DELETE_VOLUME = "volume.delete.on.unsubscription";
     public static final String VOLUME_SIZE = "volume.size.gb";
-    public static final String VOLUME_ID = "volume.id";
     public static final String DEVICE_NAME = "volume.device.name";
 	public static final String GRACEFUL_SHUTDOWN_TIMEOUT = "graceful.shutdown.timeout";
 
+    public static final String IS_PRIMARY = "PRIMARY";
+
 }
diff --git a/components/org.apache.stratos.metadataservice/pom.xml b/components/org.apache.stratos.metadataservice/pom.xml
new file mode 100644
index 0000000..1ecad08
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/pom.xml
@@ -0,0 +1,143 @@
+<!-- 
+  #  Licensed to the Apache Software Foundation (ASF) under one
+  #  or more contributor license agreements.  See the NOTICE file
+  #  distributed with this work for additional information
+  #  regarding copyright ownership.  The ASF licenses this file
+  #  to you under the Apache License, Version 2.0 (the
+  #  "License"); you may not use this file except in compliance
+  #  with the License.  You may obtain a copy of the License at
+  #  
+  #  http://www.apache.org/licenses/LICENSE-2.0
+  #  
+  #  Unless required by applicable law or agreed to in writing,
+  #  software distributed under the License is distributed on an
+  #  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  #  KIND, either express or implied.  See the License for the
+  #  specific language governing permissions and limitations
+  #  under the License.
+  -->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+    <parent>
+        <groupId>org.apache.stratos</groupId>
+        <artifactId>stratos-components-parent</artifactId>
+        <version>4.0.0</version>
+    </parent>
+
+    <modelVersion>4.0.0</modelVersion>
+    <artifactId>org.apache.stratos.metadataservice</artifactId>
+    <packaging>war</packaging>
+    <name>Apache Stratos -Meta Data Service</name>
+
+    <profiles>
+        <profile>
+            <id>test</id>
+            <activation>
+                <property>
+                    <name>env</name>
+                    <value>test</value>
+                </property>
+            </activation>
+            <properties>
+                <appName>stratosmetadataservice-test</appName>
+            </properties>
+        </profile>
+        <profile>
+            <id>prod</id>
+            <activation>
+                <activeByDefault>true</activeByDefault>
+            </activation>
+            <properties>
+                <appName>stratosmetadataservice</appName>
+            </properties>
+        </profile>
+    </profiles>
+
+
+    <build>
+        <plugins>
+          <plugin>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <configuration>
+                    <source>1.5</source>
+                    <target>1.5</target>
+                </configuration>
+                <version>2.3.2</version>
+            </plugin>
+            <plugin>
+                <artifactId>maven-war-plugin</artifactId>
+                <version>2.2</version>
+                <configuration>
+                    <webResources>
+                        <resource>
+                            <!-- this is relative to the pom.xml directory -->
+                            <directory>src/main/webapp/${appName}</directory>
+                        </resource>
+                    </webResources>
+                    <warName>stratosmetadataservice</warName>
+                </configuration>
+            </plugin>
+        </plugins>
+    </build>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.cxf</groupId>
+            <artifactId>cxf-bundle</artifactId>
+            <version>2.7.7</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.wso2.carbon</groupId>
+            <artifactId>org.wso2.carbon.core</artifactId>
+            <version>4.2.0</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.wso2.carbon</groupId>
+            <artifactId>org.wso2.carbon.utils</artifactId>
+            <version>4.2.0</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.wso2.carbon</groupId>
+            <artifactId>org.wso2.carbon.identity.oauth.stub</artifactId>
+            <version>4.2.0</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.stratos</groupId>
+            <artifactId>org.apache.stratos.tenant.mgt</artifactId>
+            <version>${project.version}</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.stratos</groupId>
+            <artifactId>org.apache.stratos.common</artifactId>
+            <version>${project.version}</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.stratos</groupId>
+            <artifactId>org.apache.stratos.manager</artifactId>
+            <version>${project.version}</version>
+            <scope>provided</scope>
+        </dependency>
+               
+        <dependency>
+            <groupId>org.apache.stratos</groupId>
+            <artifactId>org.apache.stratos.cloud.controller.service.stub</artifactId>
+            <version>${project.version}</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.stratos</groupId>
+            <artifactId>org.apache.stratos.autoscaler.service.stub</artifactId>
+            <version>${project.version}</version>
+            <scope>provided</scope>
+      </dependency>
+      
+      
+       
+        
+    </dependencies>
+</project>
diff --git a/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/Constants.java b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/Constants.java
new file mode 100644
index 0000000..710ad1b
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/Constants.java
@@ -0,0 +1,28 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.stratos.metadataservice;
+
+/**
+ * Global constants used in this module
+ */
+public class Constants {
+
+	public static final String SUPER_TENANT_SERVICE = "super.tenant.service";
+
+}
diff --git a/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/ServiceHolder.java b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/ServiceHolder.java
new file mode 100644
index 0000000..9b43ca4
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/ServiceHolder.java
@@ -0,0 +1,84 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.stratos.metadataservice;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.stratos.common.TenantBillingService;
+import org.apache.stratos.tenant.mgt.core.TenantPersistor;
+import org.wso2.carbon.context.PrivilegedCarbonContext;
+import org.wso2.carbon.registry.core.service.RegistryService;
+import org.wso2.carbon.user.core.service.RealmService;
+import org.wso2.carbon.user.core.tenant.TenantManager;
+import org.wso2.carbon.utils.ConfigurationContextService;
+
+/**
+ * Some of the admin services needs objects with states inside the runtime.
+ * There are
+ * two mechanisms to get those kind of objects. Either with singleton with or
+ * via OSGi
+ * services. OSGi services mechanism is preferred. This is a helper class for
+ * doing that.
+ */
+public class ServiceHolder {
+	private static Log log = LogFactory.getLog(ServiceHolder.class);
+
+	public static TenantManager getTenantManager() {
+		PrivilegedCarbonContext carbonContext =
+		                                        PrivilegedCarbonContext.getThreadLocalCarbonContext();
+		RealmService realmService = (RealmService) carbonContext.getOSGiService(RealmService.class);
+		return realmService.getTenantManager();
+	}
+
+	public static TenantBillingService getBillingService() {
+		PrivilegedCarbonContext carbonContext =
+		                                        PrivilegedCarbonContext.getThreadLocalCarbonContext();
+		TenantBillingService tenantBillingService =
+		                                            (TenantBillingService) carbonContext.getOSGiService(TenantBillingService.class);
+		return tenantBillingService;
+	}
+
+	public static RealmService getRealmService() {
+		PrivilegedCarbonContext carbonContext =
+		                                        PrivilegedCarbonContext.getThreadLocalCarbonContext();
+		RealmService realmService = (RealmService) carbonContext.getOSGiService(RealmService.class);
+		return realmService;
+	}
+
+	public static RegistryService getRegistryService() {
+		PrivilegedCarbonContext carbonContext =
+		                                        PrivilegedCarbonContext.getThreadLocalCarbonContext();
+		RegistryService registryService =
+		                                  (RegistryService) carbonContext.getOSGiService(RegistryService.class);
+		return registryService;
+	}
+
+	public static TenantPersistor getTenantPersistor() {
+		TenantPersistor tenantPersistor = new TenantPersistor();
+		return tenantPersistor;
+	}
+
+	public static ConfigurationContextService getConfigurationContext() {
+		PrivilegedCarbonContext carbonContext =
+		                                        PrivilegedCarbonContext.getThreadLocalCarbonContext();
+		ConfigurationContextService configurationContextService =
+		                                                          (ConfigurationContextService) carbonContext.getOSGiService(ConfigurationContextService.class);
+		return configurationContextService;
+	}
+}
diff --git a/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/Utils.java b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/Utils.java
new file mode 100644
index 0000000..42b100a
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/Utils.java
@@ -0,0 +1,44 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.stratos.metadataservice;
+
+public class Utils {
+
+	public static String buildMessage(int errorCode, String errorMessage) {
+		String jsonResponse =
+		                      "{\"Error\":{" + " \"errorCode\": \" " + errorCode + "\"," +
+		                              " \"errorMessage\": \" " + errorMessage + "\"" + "}" + "}";
+		return jsonResponse;
+	}
+
+	public static String buildMessage(String errorMessage) {
+		String jsonResponse =
+		                      "{\"Error\":{" + " \"errorCode\": \" " + -1234 + "\"," +
+		                              " \"errorMessage\": \" " + errorMessage + "\"" + "}" + "}";
+		return jsonResponse;
+	}
+
+	public static String buildAuthenticationSuccessMessage(String jSessionId) {
+		String jsonResponse =
+		                      "{\"Success\":{" + " \"sessionId\": \"" + jSessionId + "\"" + "}" +
+		                              "}";
+		return jsonResponse;
+	}
+
+}
diff --git a/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/annotation/AuthorizationAction.java b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/annotation/AuthorizationAction.java
new file mode 100644
index 0000000..a6c8765
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/annotation/AuthorizationAction.java
@@ -0,0 +1,36 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.stratos.metadataservice.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Carbon kernel handles permissions by means of permission strings.
+ * Permission strings are defined at the operation level. Here the admin
+ * service developer has to specify authorization requirements using
+ * the below annotation
+ */
+@Retention(value = RetentionPolicy.RUNTIME)
+@Target(value = ElementType.METHOD)
+public @interface AuthorizationAction {
+	String[] value();
+}
diff --git a/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/annotation/SuperTenantService.java b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/annotation/SuperTenantService.java
new file mode 100644
index 0000000..761faa4
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/annotation/SuperTenantService.java
@@ -0,0 +1,34 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.stratos.metadataservice.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * In Carbon admin authorization framework there are super-tenant only
+ * admin services. We use below annotation to mark such admin services.
+ */
+@Retention(value = RetentionPolicy.RUNTIME)
+@Target(value = ElementType.METHOD)
+public @interface SuperTenantService {
+	boolean value();
+}
diff --git a/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/context/AuthenticationContext.java b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/context/AuthenticationContext.java
new file mode 100644
index 0000000..7adbff6
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/context/AuthenticationContext.java
@@ -0,0 +1,40 @@
+package org.apache.stratos.metadataservice.context;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+public class AuthenticationContext {
+	// maintaining the authenticated state in threadLocal. We want to skip
+	// subsequent authentication handlers
+	// once a request get authenticated by a handler.
+	private static final ThreadLocal<Boolean> authenticated = new ThreadLocal<Boolean>() {
+		@Override
+		protected Boolean initialValue() {
+			return false;
+		}
+	};
+
+	public static boolean isAthenticated() {
+		return authenticated.get();
+	}
+
+	public static void setAuthenticated(boolean isAuthenticated) {
+		authenticated.set(isAuthenticated);
+	}
+}
diff --git a/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/definition/CartridgeMetaData.java b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/definition/CartridgeMetaData.java
new file mode 100644
index 0000000..0f47b96
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/definition/CartridgeMetaData.java
@@ -0,0 +1,41 @@
+package org.apache.stratos.metadataservice.definition;
+
+import java.util.List;
+
+import javax.xml.bind.annotation.XmlRootElement;
+
+@XmlRootElement(name = "cartridgeMetaData")
+public class CartridgeMetaData {
+	public String type;
+
+	public String host;
+
+	public String provider;
+
+	public String displayName;
+
+	public String description;
+
+	public String version;
+
+	public List<PropertyBean> property;
+
+	@Override
+	public String toString() {
+
+		return "Type: " + type + ", Provider: " + provider + ", Host: " + host +
+		       ", Display Name: " + displayName + ", Description: " + description + ", Version: " +
+		       version + ", Multitenant " + getProperties();
+	}
+
+	private String getProperties() {
+
+		StringBuilder propertyBuilder = new StringBuilder();
+		if (property != null) {
+			for (PropertyBean propertyBean : property) {
+				propertyBuilder.append(propertyBean.name + " : " + propertyBean.value + " | ");
+			}
+		}
+		return propertyBuilder.toString();
+	}
+}
diff --git a/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/definition/PropertyBean.java b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/definition/PropertyBean.java
new file mode 100644
index 0000000..9ec1981
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/definition/PropertyBean.java
@@ -0,0 +1,30 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.stratos.metadataservice.definition;
+
+import javax.xml.bind.annotation.XmlRootElement;
+
+@XmlRootElement(name = "property")
+public class PropertyBean {
+
+	public String name;
+
+	public String value;
+}
diff --git a/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/exception/RestAPIException.java b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/exception/RestAPIException.java
new file mode 100644
index 0000000..df43cc0
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/exception/RestAPIException.java
@@ -0,0 +1,70 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.stratos.metadataservice.exception;
+
+import javax.ws.rs.core.Response;
+
+public class RestAPIException extends Exception {
+
+	private static final long serialVersionUID = 1L;
+
+	private String message;
+	private Response.Status httpStatusCode;
+
+	public RestAPIException() {
+		super();
+	}
+
+	public RestAPIException(String message, Throwable cause) {
+		super(message, cause);
+		this.message = message;
+	}
+
+	public RestAPIException(Response.Status httpStatusCode, String message, Throwable cause) {
+		super(message, cause);
+		this.message = message;
+		this.httpStatusCode = httpStatusCode;
+	}
+
+	public RestAPIException(String message) {
+		super(message);
+		this.message = message;
+	}
+
+	public RestAPIException(Response.Status httpStatusCode, String message) {
+		super(message);
+		this.message = message;
+		this.httpStatusCode = httpStatusCode;
+	}
+
+	public RestAPIException(Throwable cause) {
+		super(cause);
+	}
+
+	@Override
+	public String getMessage() {
+		return message;
+	}
+
+	public Response.Status getHTTPStatusCode() {
+		return httpStatusCode;
+	}
+
+}
diff --git a/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/AbstractAuthenticationAuthorizationHandler.java b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/AbstractAuthenticationAuthorizationHandler.java
new file mode 100644
index 0000000..93bf904
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/AbstractAuthenticationAuthorizationHandler.java
@@ -0,0 +1,56 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.stratos.metadataservice.handlers;
+
+import java.util.List;
+
+import javax.ws.rs.core.HttpHeaders;
+import javax.ws.rs.core.Response;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.cxf.jaxrs.ext.RequestHandler;
+import org.apache.cxf.jaxrs.impl.HttpHeadersImpl;
+import org.apache.cxf.jaxrs.model.ClassResourceInfo;
+import org.apache.cxf.message.Message;
+import org.apache.stratos.metadataservice.context.AuthenticationContext;
+
+public abstract class AbstractAuthenticationAuthorizationHandler implements RequestHandler {
+	private final Log log = LogFactory.getLog(AbstractAuthenticationAuthorizationHandler.class);
+
+	@Override
+	public Response handleRequest(Message message, ClassResourceInfo classResourceInfo) {
+		HttpHeaders headers = new HttpHeadersImpl(message);
+		List<String> authHeader = headers.getRequestHeader(HttpHeaders.AUTHORIZATION);
+		if (log.isDebugEnabled()) {
+			log.debug("Executing " + this.getClass());
+		}
+		if (!AuthenticationContext.isAthenticated() && authHeader != null &&
+		    authHeader.size() > 0 && canHandle(authHeader.get(0).trim().split(" ")[0])) {
+			return handle(message, classResourceInfo);
+		}
+		// give the control to the next handler
+		return null;
+
+	}
+
+	protected abstract boolean canHandle(String authHeaderPrefix);
+
+	protected abstract Response handle(Message message, ClassResourceInfo classResourceInfo);
+}
diff --git a/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/CookieBasedAuthenticationHandler.java b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/CookieBasedAuthenticationHandler.java
new file mode 100644
index 0000000..da50e3e
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/CookieBasedAuthenticationHandler.java
@@ -0,0 +1,94 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.stratos.metadataservice.handlers;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpSession;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.cxf.jaxrs.ext.RequestHandler;
+import org.apache.cxf.jaxrs.model.ClassResourceInfo;
+import org.apache.cxf.message.Message;
+import org.apache.stratos.metadataservice.Utils;
+import org.apache.stratos.metadataservice.context.AuthenticationContext;
+import org.wso2.carbon.context.PrivilegedCarbonContext;
+
+/*
+ * authenticate an incoming request using the session availability. Session is
+ * first established using the
+ * basic auth authentication. This handler will be the last to get executed in
+ * the current handler chain. Hence failure
+ * too provide a session would result in an authentication failure.
+ */
+public class CookieBasedAuthenticationHandler implements RequestHandler {
+	private final Log log = LogFactory.getLog(CookieBasedAuthenticationHandler.class);
+
+	@Override
+	public Response handleRequest(Message message, ClassResourceInfo classResourceInfo) {
+		if (AuthenticationContext.isAthenticated()) {
+			return null;
+		}
+
+		HttpServletRequest httpServletRequest = (HttpServletRequest) message.get("HTTP.REQUEST");
+		HttpSession httpSession = httpServletRequest.getSession(false);
+		if (httpSession != null && isUserLoggedIn(httpSession)) { // if sesion
+			                                                      // is
+			                                                      // avaialble
+			String userName = (String) httpSession.getAttribute("userName");
+			String tenantDomain = (String) httpSession.getAttribute("tenantDomain");
+			int tenantId = (Integer) httpSession.getAttribute("tenantId");
+			// the following will get used by the authorization handler..
+			PrivilegedCarbonContext carbonContext =
+			                                        PrivilegedCarbonContext.getThreadLocalCarbonContext();
+			carbonContext.setUsername(userName);
+			carbonContext.setTenantDomain(tenantDomain);
+			carbonContext.setTenantId(tenantId);
+
+			AuthenticationContext.setAuthenticated(true);
+			if (log.isDebugEnabled()) {
+				log.debug("authenticated using the " +
+				          CookieBasedAuthenticationHandler.class.getName() + "for username  :" +
+				          userName + "tenantDomain : " + tenantDomain + " tenantId : " + tenantId);
+			}
+			return null;
+
+		}
+		return Response.status(Response.Status.FORBIDDEN).type(MediaType.APPLICATION_JSON)
+		               .entity(Utils.buildMessage("The endpoint requires authentication")).build();
+	}
+
+	/*
+	 * if the userName and tenantDomain is present in the session, we conclude
+	 * this as an authenticated session.
+	 * Thos params get set by the AuthenticationAdmin endpoint.
+	 */
+	private boolean isUserLoggedIn(HttpSession httpSession) {
+		String userName = (String) httpSession.getAttribute("userName");
+		String tenantDomain = (String) httpSession.getAttribute("tenantDomain");
+		Integer tenantId = (Integer) httpSession.getAttribute("tenantId");
+		if (userName != null && tenantDomain != null && tenantId != null) {
+			return true;
+		}
+		return false;
+	}
+
+}
diff --git a/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/CustomExceptionMapper.java b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/CustomExceptionMapper.java
new file mode 100644
index 0000000..0731c99
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/CustomExceptionMapper.java
@@ -0,0 +1,47 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.stratos.metadataservice.handlers;
+
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.ext.ExceptionMapper;
+
+import org.apache.stratos.metadataservice.Utils;
+import org.apache.stratos.metadataservice.exception.RestAPIException;
+
+public class CustomExceptionMapper implements ExceptionMapper<RestAPIException> {
+	@Override
+	public Response toResponse(RestAPIException restAPIException) {
+		// if no specific error message specified, spitting out a generaic error
+		// message
+		String errorMessage =
+		                      (restAPIException.getMessage() != null)
+		                                                             ? restAPIException.getMessage()
+		                                                             : "Error while fullfilling the request";
+		// if no specific error specified we are throwing the bad request http
+		// status code by default
+		Response.Status httpStatus =
+		                             (restAPIException.getHTTPStatusCode() != null)
+		                                                                           ? restAPIException.getHTTPStatusCode()
+		                                                                           : Response.Status.BAD_REQUEST;
+		return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON)
+		               .entity(Utils.buildMessage(httpStatus.getStatusCode(), errorMessage))
+		               .build();
+	}
+}
diff --git a/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/CustomThrowableExceptionMapper.java b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/CustomThrowableExceptionMapper.java
new file mode 100644
index 0000000..fd0e2a5
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/CustomThrowableExceptionMapper.java
@@ -0,0 +1,44 @@
+package org.apache.stratos.metadataservice.handlers;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.ext.ExceptionMapper;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.stratos.metadataservice.Utils;
+
+public class CustomThrowableExceptionMapper implements ExceptionMapper<Throwable> {
+	private static Log log = LogFactory.getLog(CustomThrowableExceptionMapper.class);
+
+	@Override
+	public Response toResponse(Throwable throwable) {
+		if (log.isDebugEnabled()) {
+			log.debug("Internal server error", throwable);
+		}
+
+		return Response.status(Response.Status.INTERNAL_SERVER_ERROR)
+		               .type(MediaType.APPLICATION_JSON)
+		               .entity(Utils.buildMessage(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),
+		                                          "Internal server error")).build();
+	}
+}
diff --git a/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/GenericExceptionMapper.java b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/GenericExceptionMapper.java
new file mode 100644
index 0000000..4d2fadb
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/GenericExceptionMapper.java
@@ -0,0 +1,54 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.stratos.metadataservice.handlers;
+
+import javax.ws.rs.WebApplicationException;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.ext.ExceptionMapper;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.stratos.metadataservice.Utils;
+
+/*
+ * This class maps any exception thrown by the server, which is not mapped by a
+ * specifi exception mapper
+ * in to an appropriate format
+ */
+public class GenericExceptionMapper implements ExceptionMapper<WebApplicationException> {
+	private static Log log = LogFactory.getLog(GenericExceptionMapper.class);
+
+	@Override
+	public Response toResponse(WebApplicationException webApplicationException) {
+		if (log.isDebugEnabled()) {
+			log.debug("Internal erver error", webApplicationException);
+		}
+		// if no specific error message specified, spitting out a generaic error
+		// message
+		String errorMessage =
+		                      (webApplicationException.getMessage() != null)
+		                                                                    ? webApplicationException.getMessage()
+		                                                                    : "Internal server error";
+		return Response.status(Response.Status.INTERNAL_SERVER_ERROR)
+		               .type(MediaType.APPLICATION_JSON)
+		               .entity(Utils.buildMessage(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),
+		                                          errorMessage)).build();
+	}
+}
diff --git a/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/OAuthHandler.java b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/OAuthHandler.java
new file mode 100644
index 0000000..4dc5573
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/OAuthHandler.java
@@ -0,0 +1,95 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.stratos.metadataservice.handlers;
+
+import javax.ws.rs.core.HttpHeaders;
+import javax.ws.rs.core.Response;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.cxf.jaxrs.impl.HttpHeadersImpl;
+import org.apache.cxf.jaxrs.model.ClassResourceInfo;
+import org.apache.cxf.message.Message;
+import org.apache.stratos.metadataservice.context.AuthenticationContext;
+import org.apache.stratos.metadataservice.oauth2.ValidationServiceClient;
+import org.wso2.carbon.identity.oauth2.stub.dto.OAuth2TokenValidationResponseDTO;
+
+/**
+ * This class responsible for OAuth based authentication/authorization. A client
+ * has to bring a valid OAuth token from a
+ * a OAuth provider. This class intercept the request and calls the
+ * OAuthTokenValidation endpoint of the provider.
+ */
+public class OAuthHandler extends AbstractAuthenticationAuthorizationHandler {
+	private static Log log = LogFactory.getLog(OAuthHandler.class);
+	private static String SUPPORTED_AUTHENTICATION_TYPE = "Bearer";
+	private static String oauthValidationEndpoint;
+	private static String username;
+	private static String password;
+
+	public void setOauthValidationEndpoint(String oauthValidationEndpoint) {
+		OAuthHandler.oauthValidationEndpoint = oauthValidationEndpoint;
+	}
+
+	public void setUsername(String username) {
+		OAuthHandler.username = username;
+	}
+
+	public void setPassword(String password) {
+		OAuthHandler.password = password;
+	}
+
+	@Override
+	public boolean canHandle(String authHeaderPrefix) {
+		return SUPPORTED_AUTHENTICATION_TYPE.equals(authHeaderPrefix);
+	}
+
+	@Override
+	public Response handle(Message message, ClassResourceInfo classResourceInfo) {
+		try {
+			OAuth2TokenValidationResponseDTO respDTO;
+			ValidationServiceClient validationServiceClient =
+			                                                  new ValidationServiceClient(
+			                                                                              oauthValidationEndpoint,
+			                                                                              username,
+			                                                                              password);
+			HttpHeaders httpHeaders = new HttpHeadersImpl(message);
+			String header = httpHeaders.getRequestHeaders().getFirst("Authorization");
+			// if the authorization token has Bearer..
+			if (header.startsWith("Bearer ")) {
+				String accessToken = header.substring(7).trim();
+				respDTO = validationServiceClient.validateAuthenticationRequest(accessToken); // TODO
+				                                                                              // :
+				                                                                              // send
+				                                                                              // scope
+				                                                                              // params
+				boolean valid = respDTO.getValid();
+				if (!valid) {
+					// authorization failure..
+					return Response.status(Response.Status.FORBIDDEN).build();
+				}
+			}
+		} catch (Exception e) {
+			log.error("Error while validating access token", e);
+			return Response.status(Response.Status.FORBIDDEN).build();
+		}
+		AuthenticationContext.setAuthenticated(true);
+		return null;
+	}
+}
diff --git a/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/StratosAuthenticationHandler.java b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/StratosAuthenticationHandler.java
new file mode 100644
index 0000000..fd83b8e
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/StratosAuthenticationHandler.java
@@ -0,0 +1,156 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.stratos.metadataservice.handlers;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.cxf.configuration.security.AuthorizationPolicy;
+import org.apache.cxf.jaxrs.ext.RequestHandler;
+import org.apache.cxf.jaxrs.model.ClassResourceInfo;
+import org.apache.cxf.message.Message;
+import org.apache.cxf.security.SecurityContext;
+import org.apache.stratos.metadataservice.ServiceHolder;
+import org.apache.stratos.metadataservice.Utils;
+import org.apache.stratos.metadataservice.context.AuthenticationContext;
+import org.apache.stratos.metadataservice.security.StratosSecurityContext;
+import org.wso2.carbon.context.PrivilegedCarbonContext;
+import org.wso2.carbon.core.util.AnonymousSessionUtil;
+import org.wso2.carbon.registry.core.service.RegistryService;
+import org.wso2.carbon.user.api.UserRealm;
+import org.wso2.carbon.user.core.service.RealmService;
+import org.wso2.carbon.utils.multitenancy.MultitenantUtils;
+
+/**
+ * Here we are doing the request authentication within a {@link RequestHandler}.
+ * The request handlers
+ * are get invoked just before the actual method invocation. This authentication
+ * handler make use
+ * of HTTP basic auth headers as the authentication mechanism.
+ */
+public class StratosAuthenticationHandler extends AbstractAuthenticationAuthorizationHandler {
+	private static Log log = LogFactory.getLog(StratosAuthenticationHandler.class);
+	private static String SUPPORTED_AUTHENTICATION_TYPE = "Basic";
+
+	@Override
+	public boolean canHandle(String authHeaderPrefix) {
+		return SUPPORTED_AUTHENTICATION_TYPE.equals(authHeaderPrefix);
+	}
+
+	/**
+	 * Authenticate the user against the user store. Once authenticate, populate
+	 * the {@link org.wso2.carbon.context.CarbonContext} to be used by the
+	 * downstream code.
+	 * 
+	 * @param message
+	 * @param classResourceInfo
+	 * @return
+	 */
+	@Override
+	public Response handle(Message message, ClassResourceInfo classResourceInfo) {
+		// If Mutual SSL is enabled
+		HttpServletRequest request = (HttpServletRequest) message.get("HTTP.REQUEST");
+		Object certObject = request.getAttribute("javax.servlet.request.X509Certificate");
+
+		AuthorizationPolicy policy = message.get(AuthorizationPolicy.class);
+		String username = policy.getUserName().trim();
+		String password = policy.getPassword().trim();
+
+		// sanity check
+		if ((username == null) || username.equals("")) {
+			log.error("username is seen as null/empty values.");
+			return Response.status(Response.Status.UNAUTHORIZED)
+			               .header("WWW-Authenticate", "Basic").type(MediaType.APPLICATION_JSON)
+			               .entity(Utils.buildMessage("Username cannot be null")).build();
+		} else if (certObject == null && ((password == null) || password.equals(""))) {
+			log.error("password is seen as null/empty values.");
+			return Response.status(Response.Status.UNAUTHORIZED)
+			               .header("WWW-Authenticate", "Basic").type(MediaType.APPLICATION_JSON)
+			               .entity(Utils.buildMessage("password cannot be null")).build();
+		}
+
+		try {
+			RealmService realmService = ServiceHolder.getRealmService();
+			RegistryService registryService = ServiceHolder.getRegistryService();
+			String tenantDomain = MultitenantUtils.getTenantDomain(username);
+			int tenantId = realmService.getTenantManager().getTenantId(tenantDomain);
+
+			UserRealm userRealm = null;
+			if (certObject == null) {
+				userRealm =
+				            AnonymousSessionUtil.getRealmByTenantDomain(registryService,
+				                                                        realmService, tenantDomain);
+				if (userRealm == null) {
+					log.error("Invalid domain or unactivated tenant login");
+					// is this the correct HTTP code for this scenario ? (401)
+					return Response.status(Response.Status.UNAUTHORIZED)
+					               .header("WWW-Authenticate", "Basic")
+					               .type(MediaType.APPLICATION_JSON)
+					               .entity(Utils.buildMessage("Tenant not found")).build();
+				}
+			}
+			username = MultitenantUtils.getTenantAwareUsername(username);
+			if (certObject != null ||
+			    userRealm.getUserStoreManager().authenticate(username, password)) { // if
+				                                                                    // authenticated
+
+				// setting the correct tenant info for downstream code..
+				PrivilegedCarbonContext carbonContext =
+				                                        PrivilegedCarbonContext.getThreadLocalCarbonContext();
+				carbonContext.setTenantDomain(tenantDomain);
+				carbonContext.setTenantId(tenantId);
+				carbonContext.setUsername(username);
+				// populate the secuirtyContext of authenticated user
+				SecurityContext securityContext = new StratosSecurityContext(username);
+				message.put(SecurityContext.class, securityContext);
+
+				// set the authenticated flag and let the request to continue
+				AuthenticationContext.setAuthenticated(true);
+				if (log.isDebugEnabled()) {
+					log.debug("authenticated using the " +
+					          CookieBasedAuthenticationHandler.class.getName() + "for username  :" +
+					          username + "tenantDomain : " + tenantDomain + " tenantId : " +
+					          tenantId);
+				}
+				return null;
+			} else {
+				log.warn("unable to authenticate the request");
+				// authentication failed, request the authetication, add the
+				// realm name if needed to the value of WWW-Authenticate
+				return Response.status(Response.Status.UNAUTHORIZED)
+				               .header("WWW-Authenticate", "Basic")
+				               .type(MediaType.APPLICATION_JSON)
+				               .entity(Utils.buildMessage("Authentication failed. Please "
+				                                          + "check your username/password"))
+				               .build();
+			}
+		} catch (Exception exception) {
+			log.error("Authentication failed", exception);
+			// server error in the eyes of the client. Hence 5xx HTTP code.
+			return Response.status(Response.Status.INTERNAL_SERVER_ERROR)
+			               .type(MediaType.APPLICATION_JSON)
+			               .entity(Utils.buildMessage("Unexpected error. Please contact the system admin"))
+			               .build();
+		}
+
+	}
+}
diff --git a/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/StratosAuthorizingHandler.java b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/StratosAuthorizingHandler.java
new file mode 100644
index 0000000..429399f
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/handlers/StratosAuthorizingHandler.java
@@ -0,0 +1,333 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.stratos.metadataservice.handlers;
+
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Method;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.cxf.common.util.ClassHelper;
+import org.apache.cxf.frontend.MethodDispatcher;
+import org.apache.cxf.interceptor.security.AccessDeniedException;
+import org.apache.cxf.jaxrs.ext.RequestHandler;
+import org.apache.cxf.jaxrs.model.ClassResourceInfo;
+import org.apache.cxf.message.Message;
+import org.apache.cxf.service.Service;
+import org.apache.cxf.service.model.BindingOperationInfo;
+import org.apache.stratos.metadataservice.Utils;
+import org.apache.stratos.metadataservice.context.AuthenticationContext;
+import org.wso2.carbon.context.CarbonContext;
+import org.wso2.carbon.context.PrivilegedCarbonContext;
+import org.wso2.carbon.user.api.AuthorizationManager;
+import org.wso2.carbon.user.api.UserRealm;
+import org.wso2.carbon.user.api.UserStoreException;
+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;
+
+/**
+ * {@link StratosAuthorizingHandler} authorize resource requests. It collects
+ * expected permission
+ * details using annotations present in the service bean. This particular
+ * implementation is inspired
+ * by the {@link org.apache.cxf.jaxrs.security.SimpleAuthorizingFilter}
+ */
+public class StratosAuthorizingHandler implements RequestHandler {
+	private final Log log = LogFactory.getLog(StratosAuthorizingHandler.class);
+
+	private static String SUPPORTED_AUTHENTICATION_TYPE = "Basic";
+	private static final String AUTHORIZATION_ANNOTATION_CLASS_NAME =
+	                                                                  "org.apache.stratos.metadataservice.annotation.AuthorizationAction";
+	private static final String TENANT_ANNOTATION_CLASS_NAME =
+	                                                           "org.apache.stratos.metadataservice.annotation.SuperTenantService";
+	private static final String ACTION_ON_RESOURCE = "ui.execute";
+	private static final Set<String> SKIP_METHODS;
+	private Map<String, String> authorizationActionMap = Collections.emptyMap();
+	private Set<String> superTenantServiceSet = Collections.emptySet();
+
+	static {
+		SKIP_METHODS = new HashSet<String>();
+		SKIP_METHODS.addAll(Arrays.asList(new String[] { "wait", "notify", "notifyAll", "equals",
+		                                                "toString", "hashCode" }));
+	}
+
+	@Override
+	public Response handleRequest(Message message, ClassResourceInfo resourceClass) {
+		try {
+			AuthenticationContext.setAuthenticated(false); // TODO : fix this
+			                                               // properly
+			String userName = CarbonContext.getThreadLocalCarbonContext().getUsername();
+			String tenantDomain = CarbonContext.getThreadLocalCarbonContext().getTenantDomain();
+			int tenantId = CarbonContext.getThreadLocalCarbonContext().getTenantId();
+			if (log.isDebugEnabled()) {
+				log.debug("authorizing the action using" +
+				          StratosAuthorizingHandler.class.getName());
+				log.debug("username :" + userName);
+				log.debug("tenantDomain" + tenantDomain);
+				log.debug("tenantId :" + tenantId);
+			}
+			Method targetMethod = getTargetMethod(message);
+			if (!authorize(userName, tenantDomain, tenantId, targetMethod)) {
+				log.warn("User :" + userName + "trying to perform unauthrorized action" +
+				         " against the resource :" + targetMethod);
+				return Response.status(Response.Status.FORBIDDEN)
+				               .type(MediaType.APPLICATION_JSON)
+				               .entity(Utils.buildMessage("The user does not have required permissions to "
+				                                          + "perform this operation")).build();
+			}
+			return null;
+
+		} catch (Exception exception) {
+			log.error("Unexpected error occured while REST api, authorization process", exception);
+			return Response.status(Response.Status.INTERNAL_SERVER_ERROR)
+			               .type(MediaType.APPLICATION_JSON)
+			               .entity(Utils.buildMessage("Unexpected error. Please contact the system admin"))
+			               .build();
+		}
+	}
+
+	private boolean authorize(String userName, String tenantDomain, int tenantId,
+	                          Method targetMethod) throws Exception {
+		// first we try to see whether this is a super.tenant only operation
+		if (superTenantServiceSet.contains(targetMethod.getName()) &&
+		    !isCurrentUserSuperTenant(tenantDomain, tenantId)) {
+			return false;
+		}
+		// authorize using permissionString given as annotation in the service
+		// class
+		String permissionString = authorizationActionMap.get(targetMethod.getName());
+
+		// get the authorization manager for this tenant..
+		UserRealm userRealm = PrivilegedCarbonContext.getThreadLocalCarbonContext().getUserRealm();
+		AuthorizationManager authorizationManager = userRealm.getAuthorizationManager();
+
+		boolean isAuthorized =
+		                       isAuthorized(authorizationManager, userName, permissionString,
+		                                    ACTION_ON_RESOURCE);
+		return isAuthorized;
+
+	}
+
+	private boolean isCurrentUserSuperTenant(String tenantDomain, int tenantId) {
+		if (MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(tenantDomain) &&
+		    MultitenantConstants.SUPER_TENANT_ID == tenantId) {
+			return true;
+		}
+		return false;
+	}
+
+	private boolean isAuthorized(AuthorizationManager authorizationManager, String username,
+	                             String permissionString, String action) throws UserStoreException {
+		boolean isAuthorized = false;
+		String[] resourceIds = permissionString.trim().split(",");
+		for (String resourceId : resourceIds) {
+			if (authorizationManager.isUserAuthorized(username, resourceId, action)) {
+				isAuthorized = true;
+				break;
+			}
+		}
+		return isAuthorized;
+	}
+
+	/**
+	 * Here we are getting the target invocation method. The method get set as a
+	 * property in the
+	 * message by the
+	 * {@link org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor}
+	 * 
+	 * @param message
+	 *            incoming message
+	 * @return
+	 */
+	protected Method getTargetMethod(Message message) {
+		BindingOperationInfo bop = message.getExchange().get(BindingOperationInfo.class);
+		if (bop != null) {
+			MethodDispatcher md =
+			                      (MethodDispatcher) message.getExchange().get(Service.class)
+			                                                .get(MethodDispatcher.class.getName());
+			return md.getMethod(bop);
+		}
+		Method method = (Method) message.get("org.apache.cxf.resource.method");
+		if (method != null) {
+			return method;
+		}
+		log.error("The requested resource is not found. Please check the resource path etc..");
+		throw new AccessDeniedException("Method is not available : Unauthorized");
+	}
+
+	/**
+	 * The instance of the secured bean get injected by the IOC framework
+	 * 
+	 * @param securedObject
+	 */
+	public void setSecuredObject(Object securedObject) {
+		Class<?> clazz = ClassHelper.getRealClass(securedObject);
+		authorizationActionMap = getAuthorizationActionMap(clazz);
+		superTenantServiceSet = getSuperTenantServiceSet(clazz);
+
+	}
+
+	private Set<String> getSuperTenantServiceSet(Class<?> clazz) {
+		Set<String> superTenantServiceSet = new HashSet<String>();
+		findSuperTenantServices(clazz, superTenantServiceSet);
+		return superTenantServiceSet;
+	}
+
+	private Map<String, String> getAuthorizationActionMap(Class<?> clazz) {
+		Map<String, String> authorizationActionMap = new HashMap<String, String>();
+		findAuthorizationActions(clazz, authorizationActionMap);
+		return authorizationActionMap;
+	}
+
+	/**
+	 * Goes through the class hierarchy and find the authorization annotations
+	 * attached to a certain
+	 * method.
+	 * 
+	 * @param clazz
+	 *            class to be scanned
+	 * @param authorizationActionMap
+	 *            the map to be populated
+	 */
+	private void findAuthorizationActions(Class<?> clazz, Map<String, String> authorizationActionMap) {
+		if (clazz == null || clazz == Object.class) {
+			return;
+		}
+		String classAuthorizationActionsAllowed =
+		                                          getAuthorizationActions(clazz.getAnnotations(),
+		                                                                  AUTHORIZATION_ANNOTATION_CLASS_NAME);
+		for (Method m : clazz.getMethods()) {
+			if (SKIP_METHODS.contains(m.getName())) {
+				continue;
+			}
+			String methodAuthorizationActionsAllowed =
+			                                           getAuthorizationActions(m.getAnnotations(),
+			                                                                   AUTHORIZATION_ANNOTATION_CLASS_NAME);
+			String authorizationActions =
+			                              methodAuthorizationActionsAllowed != null
+			                                                                       ? methodAuthorizationActionsAllowed
+			                                                                       : classAuthorizationActionsAllowed;
+			if (authorizationActions != null) {
+				authorizationActionMap.put(m.getName(), authorizationActions);
+			}
+		}
+		if (!authorizationActionMap.isEmpty()) {
+			return;
+		}
+
+		findAuthorizationActions(clazz.getSuperclass(), authorizationActionMap);
+
+		if (!authorizationActionMap.isEmpty()) {
+			return;
+		}
+
+		for (Class<?> interfaceCls : clazz.getInterfaces()) {
+			findAuthorizationActions(interfaceCls, authorizationActionMap);
+		}
+	}
+
+	/**
+	 * Goes through the class hierarchy and figure out the supertenant
+	 * annotations coupled with operations/methods.
+	 * 
+	 * @param clazz
+	 * @param superTenantServiceSet
+	 */
+	private void findSuperTenantServices(Class<?> clazz, Set<String> superTenantServiceSet) {
+		if (clazz == null || clazz == Object.class) {
+			return;
+		}
+		for (Method m : clazz.getMethods()) {
+			if (SKIP_METHODS.contains(m.getName())) {
+				continue;
+			}
+			boolean isSuperTenantService =
+			                               getSuperTenantServices(m.getAnnotations(),
+			                                                      TENANT_ANNOTATION_CLASS_NAME);
+			if (isSuperTenantService) {
+				superTenantServiceSet.add(m.getName());
+			}
+		}
+		if (!superTenantServiceSet.isEmpty()) {
+			return;
+		}
+
+		findSuperTenantServices(clazz.getSuperclass(), superTenantServiceSet);
+
+		if (!superTenantServiceSet.isEmpty()) {
+			return;
+		}
+
+		for (Class<?> interfaceCls : clazz.getInterfaces()) {
+			findSuperTenantServices(interfaceCls, superTenantServiceSet);
+		}
+	}
+
+	private boolean getSuperTenantServices(Annotation[] annotations,
+	                                       String tenantAnnotationClassName) {
+		for (Annotation ann : annotations) {
+			if (ann.annotationType().getName().equals(tenantAnnotationClassName)) {
+				try {
+					Method valueMethod = ann.annotationType().getMethod("value", new Class[] {});
+					boolean isSuperTenantService =
+					                               (Boolean) valueMethod.invoke(ann,
+					                                                            new Object[] {});
+					return isSuperTenantService;
+				} catch (Exception ex) {
+					// ignore
+				}
+				break;
+			}
+		}
+		return false;
+	}
+
+	private String getAuthorizationActions(Annotation[] annotations,
+	                                       String authorizationAnnotationClassName) {
+		for (Annotation ann : annotations) {
+			if (ann.annotationType().getName().equals(authorizationAnnotationClassName)) {
+				try {
+					Method valueMethod = ann.annotationType().getMethod("value", new Class[] {});
+					String[] permissions = (String[]) valueMethod.invoke(ann, new Object[] {});
+					StringBuilder sb = new StringBuilder();
+					for (int i = 0; i < permissions.length; i++) {
+						sb.append(permissions[i]);
+						if (i + 1 < permissions.length) {
+							sb.append(",");
+						}
+					}
+					return sb.toString();
+				} catch (Exception ex) {
+					// ignore
+				}
+				break;
+			}
+		}
+		return null;
+	}
+
+}
diff --git a/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/oauth2/ValidationServiceClient.java b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/oauth2/ValidationServiceClient.java
new file mode 100644
index 0000000..dbc8947
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/oauth2/ValidationServiceClient.java
@@ -0,0 +1,65 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.stratos.metadataservice.oauth2;
+
+import java.rmi.RemoteException;
+
+import org.apache.axis2.AxisFault;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.cxf.rs.security.oauth2.utils.OAuthConstants;
+import org.wso2.carbon.utils.CarbonUtils;
+import org.wso2.carbon.identity.oauth2.stub.OAuth2TokenValidationServiceStub;
+import org.wso2.carbon.identity.oauth2.stub.dto.OAuth2TokenValidationRequestDTO;
+import org.wso2.carbon.identity.oauth2.stub.dto.OAuth2TokenValidationResponseDTO;
+
+/**
+ * Service class wrapper for OAuthTokenValidation endpoint.
+ */
+public class ValidationServiceClient {
+	private OAuth2TokenValidationServiceStub stub = null;
+	private static final Log log = LogFactory.getLog(OAuth2TokenValidationServiceStub.class);
+
+	public ValidationServiceClient(String backendServerURL, String username, String password)
+	                                                                                         throws Exception {
+		String serviceURL = backendServerURL + "OAuth2TokenValidationService";
+		try {
+			stub = new OAuth2TokenValidationServiceStub(serviceURL);
+			CarbonUtils.setBasicAccessSecurityHeaders(username, password, true,
+			                                          stub._getServiceClient());
+		} catch (AxisFault e) {
+			log.error("Error initializing OAuth2 Client");
+			throw new Exception("Error initializing OAuth Client", e);
+		}
+	}
+
+	public OAuth2TokenValidationResponseDTO validateAuthenticationRequest(String accessToken)
+	                                                                                         throws Exception {
+		OAuth2TokenValidationRequestDTO oauthReq = new OAuth2TokenValidationRequestDTO();
+		oauthReq.setAccessToken(accessToken);
+		oauthReq.setTokenType(OAuthConstants.BEARER_TOKEN_TYPE);
+		try {
+			return stub.validate(oauthReq);
+		} catch (RemoteException e) {
+			log.error("Error while validating OAuth2 request");
+			throw new Exception("Error while validating OAuth2 request", e);
+		}
+	}
+
+}
diff --git a/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/security/StratosPrincipal.java b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/security/StratosPrincipal.java
new file mode 100644
index 0000000..b0be94a
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/security/StratosPrincipal.java
@@ -0,0 +1,53 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.stratos.metadataservice.security;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import java.security.Principal;
+
+/**
+ * {@link StratosSecurityContext} make use of principal instance. Here with Stratos
+ * authentication/authorization framework we only need username as the principal details
+ */
+public class StratosPrincipal implements Principal {
+    private Log log = LogFactory.getLog(StratosPrincipal.class);
+    private String userName;
+
+    public StratosPrincipal(String userName) {
+        this.userName = userName;
+    }
+
+    public boolean equals(Object another) {
+      return userName.equals((another));
+    }
+
+    public String toString() {
+        return userName.toString();
+    }
+
+    public int hashCode() {
+        return userName.hashCode();
+    }
+
+    public String getName() {
+        return userName;
+    }
+}
diff --git a/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/security/StratosSecurityContext.java b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/security/StratosSecurityContext.java
new file mode 100644
index 0000000..5cc64f3
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/security/StratosSecurityContext.java
@@ -0,0 +1,50 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.stratos.metadataservice.security;
+
+import java.security.Principal;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.cxf.security.SecurityContext;
+
+/**
+ * {@link StratosSecurityContext} is what get passed between authentication
+ * handlers
+ * and the authorization handler.
+ */
+public class StratosSecurityContext implements SecurityContext {
+	private static Log log = LogFactory.getLog(StratosSecurityContext.class);
+	Principal principal;
+
+	public StratosSecurityContext(String user) {
+		this.principal = new StratosPrincipal(user);
+	}
+
+	@Override
+	public Principal getUserPrincipal() {
+		return principal;
+	}
+
+	@Override
+	public boolean isUserInRole(String role) {
+		return false;
+	}
+
+}
diff --git a/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/services/MetaDataAdmin.java b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/services/MetaDataAdmin.java
new file mode 100644
index 0000000..2080951
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/services/MetaDataAdmin.java
@@ -0,0 +1,143 @@
+package org.apache.stratos.metadataservice.services;
+
+import java.io.File;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.ws.rs.Consumes;
+import javax.ws.rs.GET;
+import javax.ws.rs.POST;
+import javax.ws.rs.Path;
+import javax.ws.rs.PathParam;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.Context;
+
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.context.ConfigurationContextFactory;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.stratos.metadataservice.annotation.AuthorizationAction;
+import org.apache.stratos.metadataservice.definition.CartridgeMetaData;
+import org.apache.stratos.metadataservice.exception.RestAPIException;
+import org.wso2.carbon.registry.api.Registry;
+import org.wso2.carbon.registry.api.Resource;
+import org.wso2.carbon.registry.core.Comment;
+import org.wso2.carbon.registry.ws.client.registry.WSRegistryServiceClient;
+
+@Path("/metadataservice/")
+public class MetaDataAdmin {
+
+	private static Log log = LogFactory.getLog(MetaDataAdmin.class);
+	@Context
+	HttpServletRequest httpServletRequest;
+
+	private static ConfigurationContext configContext = null;
+
+	private static final String CARBON_HOME = "/../../../../";
+	private static String axis2Repo = "repository/deployment/client";
+	private static String axis2Conf = "repository/conf/axis2/axis2_client.xml";
+
+	private static final String username = "admin@org.com";
+	private static final String password = "admin123";
+	private static final String serverURL = "https://localhost:9445/services/";
+
+	@POST
+	@Path("/init")
+	@AuthorizationAction("/permission/protected/manage/monitor/tenants")
+	public void initialize() throws RestAPIException {
+
+	}
+
+	private static WSRegistryServiceClient setRegistry() throws Exception {
+
+		System.setProperty("javax.net.ssl.trustStore", "repository" + File.separator + "resources" +
+		                                               File.separator + "security" +
+		                                               File.separator + "wso2carbon.jks");
+		System.setProperty("javax.net.ssl.trustStorePassword", "wso2carbon");
+		System.setProperty("javax.net.ssl.trustStoreType", "JKS");
+		System.setProperty("carbon.repo.write.mode", "true");
+		configContext =
+		                ConfigurationContextFactory.createConfigurationContextFromFileSystem(axis2Repo,
+		                                                                                     axis2Conf);
+		return new WSRegistryServiceClient(serverURL, username, password, configContext);
+	}
+
+	@POST
+	@Path("/cartridge/metadata")
+	@Produces("application/json")
+	@Consumes("application/json")
+	@AuthorizationAction("/permission/protected/manage/monitor/tenants")
+	public String addCartridgeMetaDataDetails(CartridgeMetaData cartridgeMetaData) throws Exception {
+		System.out.println("Adding meta data details");
+		Registry registry = setRegistry();
+		try {
+
+			Resource resource = registry.newResource();
+
+			String type = cartridgeMetaData.type;
+
+			resource.setContent("Hello Out there!" + type);
+
+			String resourcePath = "/startos/app-3/" + type;
+
+			resource.addProperty("id", "ewwtreiwet");
+			resource.addProperty("name", "admin");
+
+			registry.put(resourcePath, resource);
+
+			System.out.println("A resource added to: " + resourcePath);
+
+			System.out.println(cartridgeMetaData.type);
+			registry.rateResource(resourcePath, 3);
+
+			System.out.println("Resource rated with 3 stars!");
+			Comment comment = new Comment();
+			comment.setText("Wow! A comment out there");
+			registry.addComment(resourcePath, comment);
+			System.out.println("Comment added to resource");
+
+			Resource getResource = registry.get("/startos/app-2");
+			System.out.println("Resource retrived");
+			System.out.println("Printing retrieved resource content: " +
+			                   new String((byte[]) getResource.getContent()));
+
+		} catch (Exception e) {
+
+			System.out.println(e.getMessage());
+			e.printStackTrace();
+		} finally {
+			// Close the session
+			((WSRegistryServiceClient) registry).logut();
+		}
+		System.out.println("Add meta data details");
+		return "success";
+
+	}
+
+	@GET
+	@Path("/cartridge/metadata/{applicationname}/{cartridgetype}")
+	@Produces("application/json")
+	@Consumes("application/json")
+	@AuthorizationAction("/permission/protected/manage/monitor/tenants")
+	public String getPartition(@PathParam("applicationname") String applicationName,
+	                           @PathParam("cartridgetype") String cartridgeType)
+
+	throws Exception {
+		Registry registry = setRegistry();
+		try {
+
+			Resource getResource = registry.get("/startos/" + cartridgeType);
+			System.out.println("Resource retrived");
+			System.out.println("Printing retrieved resource content: " +
+			                   new String((byte[]) getResource.getContent()));
+
+		} catch (Exception e) {
+
+			System.out.println(e.getMessage());
+			e.printStackTrace();
+		} finally {
+			// Close the session
+			((WSRegistryServiceClient) registry).logut();
+		}
+		return "result";
+	}
+}
diff --git a/components/org.apache.stratos.metadataservice/src/main/resources/axis2_client.xml b/components/org.apache.stratos.metadataservice/src/main/resources/axis2_client.xml
new file mode 100644
index 0000000..db07954
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/resources/axis2_client.xml
@@ -0,0 +1,299 @@
+<!--
+  ~ Copyright 2005-2011 WSO2, Inc. (http://wso2.com)
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<axisconfig name="AxisJava2.0">
+    <!-- ================================================= -->
+    <!-- Parameters -->
+    <!-- ================================================= -->
+    <parameter name="hotdeployment">true</parameter>
+    <parameter name="hotupdate">false</parameter>
+    <parameter name="enableMTOM">false</parameter>
+
+    <!-- commons-http-client defaultMaxConnPerHost -->
+    <parameter name="defaultMaxConnPerHost">500</parameter>
+    <!-- commons-http-client maxTotalConnections -->
+    <parameter name="maxTotalConnections">15000</parameter>
+
+    <!--If turned on with use the Accept header of the request to determine the contentType of the
+    response-->
+    <parameter name="httpContentNegotiation">false</parameter>
+
+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->
+    <!--that behaviour.-->
+    <parameter name="sendStacktraceDetailsWithFaults">true</parameter>
+
+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->
+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->
+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->
+    <!--is set then, Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->
+    <parameter name="DrillDownToRootCauseForFaultReason">false</parameter>
+
+    <!--This is the user name and password of admin console-->
+    <parameter name="userName">admin</parameter>
+    <parameter name="password">axis2</parameter>
+
+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->
+    <!--ServicesDirectory only works on the following cases-->
+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->
+    <!---When creating URL Based configurator with URL “file://”  -->
+    <!--- War based configurator with expanded case , -->
+
+    <!--All the other scenarios it will be ignored.-->
+    <!--<parameter name="ServicesDirectory">service</parameter>-->
+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->
+    <!--<parameter name="ModulesDirectory">modules</parameter>-->
+
+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->
+    <!--root which can configured using the following contextRoot parameter-->
+    <!--<parameter name="contextRoot">axis2</parameter>-->
+
+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguish those endpoints-->
+    <!--<parameter name="servicePath">services</parameter>-->
+    <!--<parameter name="restPath">rest</parameter>-->
+
+    <!-- Following parameter will completely disable REST handling in Axis2-->
+    <parameter name="disableREST" locked="false">false</parameter>
+
+    <!--POJO deployer , this will alow users to drop .class file and make that into a service-->
+    <deployer extension=".class" directory="pojo" class="org.apache.axis2.deployment.POJODeployer"/>
+
+    <!-- Following parameter will set the host name for the epr-->
+    <!--<parameter name="hostname" locked="true">myhost.com</parameter>-->
+
+    <!-- ================================================= -->
+    <!-- Message Receivers -->
+    <!-- ================================================= -->
+    <!--This is the Default Message Receiver for the system , if you want to have MessageReceivers for -->
+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->
+    <!--any operation -->
+    <!--Note : You can override this for particular service by adding the same element with your requirement-->
+    <messageReceivers>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+    </messageReceivers>
+
+    <!-- ================================================= -->
+    <!-- Message Formatter -->
+    <!-- ================================================= -->
+    <!--Following content type to message formatter mapping can be used to implement support for different message -->
+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageFormatters>
+        <messageFormatter contentType="application/x-www-form-urlencoded"
+                          class="org.apache.axis2.transport.http.XFormURLEncodedFormatter"/>
+        <messageFormatter contentType="multipart/form-data"
+                          class="org.apache.axis2.transport.http.MultipartFormDataFormatter"/>
+        <messageFormatter contentType="application/xml"
+                          class="org.apache.axis2.transport.http.ApplicationXMLFormatter"/>
+        <messageFormatter contentType="text/xml"
+                          class="org.apache.axis2.transport.http.SOAPMessageFormatter"/>
+        <messageFormatter contentType="application/soap+xml"
+                          class="org.apache.axis2.transport.http.SOAPMessageFormatter"/>
+	<!--JSON Message Formatters-->
+        <messageFormatter contentType="application/json"
+                          class="org.apache.axis2.json.JSONMessageFormatter"/>
+        <messageFormatter contentType="application/json/badgerfish"
+                          class="org.apache.axis2.json.JSONBadgerfishMessageFormatter"/>
+        <messageFormatter contentType="text/javascript"
+                          class="org.apache.axis2.json.JSONMessageFormatter"/>
+    </messageFormatters>
+
+    <!-- ================================================= -->
+    <!-- Message Builders -->
+    <!-- ================================================= -->
+    <!--Following content type to builder mapping can be used to implement support for different message -->
+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageBuilders>
+        <messageBuilder contentType="application/xml"
+                        class="org.apache.axis2.builder.ApplicationXMLBuilder"/>
+        <messageBuilder contentType="application/x-www-form-urlencoded"
+                        class="org.apache.axis2.builder.XFormURLEncodedBuilder"/>
+	<!--JSON Message Builders-->
+        <messageBuilder contentType="application/json"
+                        class="org.apache.axis2.json.JSONOMBuilder"/>
+        <messageBuilder contentType="application/json/badgerfish"
+                        class="org.apache.axis2.json.JSONBadgerfishOMBuilder"/>
+        <messageBuilder contentType="text/javascript"
+                        class="org.apache.axis2.json.JSONOMBuilder"/>
+        <!--Left commented because it adds the depandancy of servlet-api to other modules.
+        Please uncomment to Receive messages in multipart/form-data format-->
+        <!--<messageBuilder contentType="multipart/form-data"-->
+        <!--class="org.apache.axis2.builder.MultipartFormDataBuilder"/>-->
+    </messageBuilders>
+
+    <!-- ================================================= -->
+    <!-- Target Resolvers -->
+    <!-- ================================================= -->
+    <!-- Uncomment the following and specify the class name for your TargetResolver to add -->
+    <!-- a TargetResolver. TargetResolvers are used to process the To EPR for example to -->
+    <!-- choose a server in a cluster -->
+    <!--<targetResolvers>-->
+    <!--<targetResolver class="" />-->
+    <!--</targetResolvers>-->
+
+
+    <!-- ================================================= -->
+    <!-- Transport Ins -->
+    <!-- ================================================= -->
+    <transportReceiver name="http"
+                       class="org.apache.axis2.transport.http.SimpleHTTPServer">
+        <parameter name="port">6071</parameter>
+        <!--If you want to give your own host address for EPR generation-->
+        <!--uncomment following parameter , and set as you required.-->
+        <!--<parameter name="hostname">http://myApp.com/ws</parameter>-->
+    </transportReceiver>
+
+    <!--Uncomment if you want to have TCP transport support-->
+    <!--<transportReceiver name="tcp"
+                       class="org.apache.axis2.transport.tcp.TCPServer">
+        <parameter name="port">6061</parameter>-->
+    <!--If you want to give your own host address for EPR generation-->
+    <!--uncomment following parameter , and set as you required.-->
+    <!--<parameter name="hostname">tcp://myApp.com/ws</parameter>-->
+    <!--</transportReceiver>-->
+
+    <!-- ================================================= -->
+    <!-- Transport Outs -->
+    <!-- ================================================= -->
+
+    <!--<transportSender name="jms"-->
+    <!--class="org.apache.axis2.transport.jms.JMSSender"/>-->
+    <transportSender name="tcp"
+                     class="org.apache.axis2.transport.tcp.TCPTransportSender"/>
+    <transportSender name="local"
+                     class="org.apache.axis2.transport.local.LocalTransportSender"/>
+    <transportSender name="http"
+                     class="org.apache.axis2.transport.http.CommonsHTTPTransportSender">
+        <parameter name="PROTOCOL">HTTP/1.1</parameter>
+        <parameter name="Transfer-Encoding">chunked</parameter>
+        <parameter name="SO_TIMEOUT">60000</parameter>
+        <parameter name="CONNECTION_TIMEOUT">60000</parameter>
+    </transportSender>
+    <transportSender name="https"
+                     class="org.apache.axis2.transport.http.CommonsHTTPTransportSender">
+        <parameter name="PROTOCOL">HTTP/1.1</parameter>
+        <parameter name="Transfer-Encoding">chunked</parameter>
+        <parameter name="SO_TIMEOUT">60000</parameter>
+        <parameter name="CONNECTION_TIMEOUT">60000</parameter>
+    </transportSender>
+    <!--<transportSender name="java"-->
+    <!--class="org.apache.axis2.transport.java.JavaTransportSender"/>-->
+
+
+    <!-- ================================================= -->
+    <!--  SOAP Role Configuration                          -->
+    <!-- ================================================= -->
+    <!-- Use the following pattern to configure this axis2
+         instance to act in particular roles. Note that in
+         the absence of any configuration, Axis2 will act 
+         only in the ultimate receiver role -->
+    <!--
+    <SOAPRoleConfiguration isUltimateReceiver="true">
+    	<role>http://my/custom/role</role>
+    </SOAPRoleConfiguration>
+	-->
+
+    <!-- ================================================= -->
+    <!-- Phases  -->
+    <!-- ================================================= -->
+    <phaseOrder type="InFlow">
+        <!--  System pre-defined phases       -->
+        <phase name="Transport">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+        </phase>
+        <phase name="Addressing">
+            <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--  System pre defined phases       -->
+        <!--   After Postdispatch phase module author or or service author can add any phase he want      -->
+        <phase name="OperationInPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationOutPhase"/>
+        <!--system predefined phase-->
+        <!--these phase will run irrespective of the service-->
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+    <phaseOrder type="InFaultFlow">
+        <phase name="Addressing">
+            <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationInFaultPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFaultFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationOutFaultPhase"/>
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+</axisconfig>
diff --git a/components/org.apache.stratos.metadataservice/src/main/webapp/stratosmetadataservice-test/META-INF/webapp-classloading.xml b/components/org.apache.stratos.metadataservice/src/main/webapp/stratosmetadataservice-test/META-INF/webapp-classloading.xml
new file mode 100644
index 0000000..c62912d
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/webapp/stratosmetadataservice-test/META-INF/webapp-classloading.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<!--
+  #  Licensed to the Apache Software Foundation (ASF) under one
+  #  or more contributor license agreements.  See the NOTICE file
+  #  distributed with this work for additional information
+  #  regarding copyright ownership.  The ASF licenses this file
+  #  to you under the Apache License, Version 2.0 (the
+  #  "License"); you may not use this file except in compliance
+  #  with the License.  You may obtain a copy of the License at
+  #
+  #  http://www.apache.org/licenses/LICENSE-2.0
+  #
+  #  Unless required by applicable law or agreed to in writing,
+  #  software distributed under the License is distributed on an
+  #  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  #  KIND, either express or implied.  See the License for the
+  #  specific language governing permissions and limitations
+  #  under the License.
+  -->
+
+<!--
+    This file defines class loading policy of the whole container. But this behaviour can be overridden by individual webapps by putting this file into the META-INF/ directory.
+-->
+<Classloading xmlns="http://wso2.org/projects/as/classloading">
+
+    <!-- Parent-first or child-first. Default behaviour is child-first.-->
+    <ParentFirst>false</ParentFirst>
+
+    <!--
+	Default environments that contains provides to all the webapps. This can be overridden by individual webapps by specifing required environments
+	Tomcat environment is the default and every webapps gets it even if they didn't specify it.
+	e.g. If a webapps requires CXF, they will get both Tomcat and CXF.
+     -->
+    <Environments>CXF,Carbon</Environments>
+</Classloading>
diff --git a/components/org.apache.stratos.metadataservice/src/main/webapp/stratosmetadataservice-test/WEB-INF/cxf-servlet.xml b/components/org.apache.stratos.metadataservice/src/main/webapp/stratosmetadataservice-test/WEB-INF/cxf-servlet.xml
new file mode 100644
index 0000000..f8b8750
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/webapp/stratosmetadataservice-test/WEB-INF/cxf-servlet.xml
@@ -0,0 +1,46 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  #  Licensed to the Apache Software Foundation (ASF) under one
+  #  or more contributor license agreements.  See the NOTICE file
+  #  distributed with this work for additional information
+  #  regarding copyright ownership.  The ASF licenses this file
+  #  to you under the Apache License, Version 2.0 (the
+  #  "License"); you may not use this file except in compliance
+  #  with the License.  You may obtain a copy of the License at
+  #
+  #  http://www.apache.org/licenses/LICENSE-2.0
+  #
+  #  Unless required by applicable law or agreed to in writing,
+  #  software distributed under the License is distributed on an
+  #  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  #  KIND, either express or implied.  See the License for the
+  #  specific language governing permissions and limitations
+  #  under the License.
+  -->
+
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:jaxrs="http://cxf.apache.org/jaxrs"
+       xsi:schemaLocation="
+         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
+         http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd">
+
+    <jaxrs:server id="stratosAdmin" address="/">
+        <jaxrs:serviceBeans>
+            <ref bean="stratosRestEndpointTestBean"/>
+        </jaxrs:serviceBeans>
+
+        <jaxrs:providers>
+			<ref bean="throwableExceptionHandler"/>
+            <bean class="org.apache.cxf.jaxrs.provider.json.JSONProvider">
+                <property name="dropRootElement" value="true"/>
+                <property name="supportUnwrapped" value="true"/>
+            </bean>>
+            <ref bean="exceptionHandler"/>
+        </jaxrs:providers>
+    </jaxrs:server>
+
+    <bean id="stratosRestEndpointTestBean" class="org.apache.stratos.rest.endpoint.mock.StratosTestAdmin"/>
+    <bean id="exceptionHandler" class="org.apache.stratos.rest.endpoint.handlers.CustomExceptionMapper"/>
+    <bean id="throwableExceptionHandler" class="org.apache.stratos.rest.endpoint.handlers.CustomThrowableExceptionMapper"/>
+</beans>
diff --git a/components/org.apache.stratos.metadataservice/src/main/webapp/stratosmetadataservice-test/WEB-INF/web.xml b/components/org.apache.stratos.metadataservice/src/main/webapp/stratosmetadataservice-test/WEB-INF/web.xml
new file mode 100644
index 0000000..4a752f6
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/webapp/stratosmetadataservice-test/WEB-INF/web.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  #  Licensed to the Apache Software Foundation (ASF) under one
+  #  or more contributor license agreements.  See the NOTICE file
+  #  distributed with this work for additional information
+  #  regarding copyright ownership.  The ASF licenses this file
+  #  to you under the Apache License, Version 2.0 (the
+  #  "License"); you may not use this file except in compliance
+  #  with the License.  You may obtain a copy of the License at
+  #
+  #  http://www.apache.org/licenses/LICENSE-2.0
+  #
+  #  Unless required by applicable law or agreed to in writing,
+  #  software distributed under the License is distributed on an
+  #  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  #  KIND, either express or implied.  See the License for the
+  #  specific language governing permissions and limitations
+  #  under the License.
+  -->
+
+<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
+         http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
+
+    <display-name>S2 Meta Data Admin Endpoint</display-name>
+
+    <servlet>
+        <servlet-name>StratosAdminEndpoint</servlet-name>
+        <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
+        <load-on-startup>1</load-on-startup>
+    </servlet>
+
+    <servlet-mapping>
+        <servlet-name>StratosAdminEndpoint</servlet-name>
+        <url-pattern>/*</url-pattern>
+    </servlet-mapping>
+
+</web-app>
+
diff --git a/components/org.apache.stratos.metadataservice/src/main/webapp/stratosmetadataservice/META-INF/webapp-classloading.xml b/components/org.apache.stratos.metadataservice/src/main/webapp/stratosmetadataservice/META-INF/webapp-classloading.xml
new file mode 100644
index 0000000..c62912d
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/webapp/stratosmetadataservice/META-INF/webapp-classloading.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<!--
+  #  Licensed to the Apache Software Foundation (ASF) under one
+  #  or more contributor license agreements.  See the NOTICE file
+  #  distributed with this work for additional information
+  #  regarding copyright ownership.  The ASF licenses this file
+  #  to you under the Apache License, Version 2.0 (the
+  #  "License"); you may not use this file except in compliance
+  #  with the License.  You may obtain a copy of the License at
+  #
+  #  http://www.apache.org/licenses/LICENSE-2.0
+  #
+  #  Unless required by applicable law or agreed to in writing,
+  #  software distributed under the License is distributed on an
+  #  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  #  KIND, either express or implied.  See the License for the
+  #  specific language governing permissions and limitations
+  #  under the License.
+  -->
+
+<!--
+    This file defines class loading policy of the whole container. But this behaviour can be overridden by individual webapps by putting this file into the META-INF/ directory.
+-->
+<Classloading xmlns="http://wso2.org/projects/as/classloading">
+
+    <!-- Parent-first or child-first. Default behaviour is child-first.-->
+    <ParentFirst>false</ParentFirst>
+
+    <!--
+	Default environments that contains provides to all the webapps. This can be overridden by individual webapps by specifing required environments
+	Tomcat environment is the default and every webapps gets it even if they didn't specify it.
+	e.g. If a webapps requires CXF, they will get both Tomcat and CXF.
+     -->
+    <Environments>CXF,Carbon</Environments>
+</Classloading>
diff --git a/components/org.apache.stratos.metadataservice/src/main/webapp/stratosmetadataservice/WEB-INF/cxf-servlet.xml b/components/org.apache.stratos.metadataservice/src/main/webapp/stratosmetadataservice/WEB-INF/cxf-servlet.xml
new file mode 100644
index 0000000..bf40055
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/webapp/stratosmetadataservice/WEB-INF/cxf-servlet.xml
@@ -0,0 +1,79 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  #  Licensed to the Apache Software Foundation (ASF) under one
+  #  or more contributor license agreements.  See the NOTICE file
+  #  distributed with this work for additional information
+  #  regarding copyright ownership.  The ASF licenses this file
+  #  to you under the Apache License, Version 2.0 (the
+  #  "License"); you may not use this file except in compliance
+  #  with the License.  You may obtain a copy of the License at
+  #
+  #  http://www.apache.org/licenses/LICENSE-2.0
+  #
+  #  Unless required by applicable law or agreed to in writing,
+  #  software distributed under the License is distributed on an
+  #  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  #  KIND, either express or implied.  See the License for the
+  #  specific language governing permissions and limitations
+  #  under the License.
+  -->
+
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:jaxrs="http://cxf.apache.org/jaxrs"
+       xsi:schemaLocation="
+         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
+         http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd">
+
+    <jaxrs:server id="stratosMetaDataAdmin" address="/">
+        <jaxrs:serviceBeans>
+            <ref bean="stratosRestEndpointBean"/>
+        </jaxrs:serviceBeans>
+
+        <jaxrs:providers>
+            <ref bean="throwableExceptionHandler"/>
+			<ref bean="genericExceptionHandler"/>
+            <ref bean="jsonProvider"/>
+            <ref bean="exceptionHandler"/>
+            <ref bean="basicAuthenticationFilter"/>
+            <ref bean="sessionAuthenticationFilter"/>
+            <ref bean="authorizationFilter"/>
+        </jaxrs:providers>
+    </jaxrs:server>
+
+    <bean id="stratosRestEndpointBean" class="org.apache.stratos.metadataservice.services.MetaDataAdmin"/>
+    <bean id="basicAuthenticationFilter" class="org.apache.stratos.metadataservice.handlers.StratosAuthenticationHandler"/>
+    <bean id="sessionAuthenticationFilter" class="org.apache.stratos.metadataservice.handlers.CookieBasedAuthenticationHandler"/>
+    <bean id="authorizationFilter" class="org.apache.stratos.metadataservice.handlers.StratosAuthorizingHandler">
+        <property name="securedObject" ref="stratosRestEndpointBean"/>
+    </bean>
+    <bean id="exceptionHandler" class="org.apache.stratos.metadataservice.handlers.CustomExceptionMapper"/>
+    <bean id="genericExceptionHandler" class="org.apache.stratos.metadataservice.handlers.GenericExceptionMapper"/>
+    <bean id="throwableExceptionHandler" class="org.apache.stratos.metadataservice.handlers.CustomThrowableExceptionMapper"/>
+    <!--The below config enables OAuth based authentication/authorization for REST API-->
+    <bean id="OAuthFilter" class="org.apache.stratos.metadataservice.handlers.OAuthHandler">
+        <property name="password" value="admin"/>
+        <property name="username" value="admin"/>
+        <property name="oauthValidationEndpoint" value="https://localhost:9443/services/"/>
+    </bean>
+    <bean id="jsonProvider" class="org.apache.cxf.jaxrs.provider.json.JSONProvider">
+        <property name="supportUnwrapped" value="true"/>
+        <property name="serializeAsArray" value="true"/>
+        <property name="arrayKeys">
+            <list>
+                <value>partitions</value>
+                <value>property</value>
+                <value>hostNames</value>
+                <value>memberMap</value>
+                <value>portMap</value>
+                <value>partitionGroup</value>
+                <value>partition</value>
+                <value>member</value>
+                <value>hostNames</value>
+                <value>portMappings</value>
+                <value>volumes</value>
+            </list>
+        </property>
+    </bean>
+
+</beans>
diff --git a/components/org.apache.stratos.metadataservice/src/main/webapp/stratosmetadataservice/WEB-INF/web.xml b/components/org.apache.stratos.metadataservice/src/main/webapp/stratosmetadataservice/WEB-INF/web.xml
new file mode 100644
index 0000000..7cef351
--- /dev/null
+++ b/components/org.apache.stratos.metadataservice/src/main/webapp/stratosmetadataservice/WEB-INF/web.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  #  Licensed to the Apache Software Foundation (ASF) under one
+  #  or more contributor license agreements.  See the NOTICE file
+  #  distributed with this work for additional information
+  #  regarding copyright ownership.  The ASF licenses this file
+  #  to you under the Apache License, Version 2.0 (the
+  #  "License"); you may not use this file except in compliance
+  #  with the License.  You may obtain a copy of the License at
+  #
+  #  http://www.apache.org/licenses/LICENSE-2.0
+  #
+  #  Unless required by applicable law or agreed to in writing,
+  #  software distributed under the License is distributed on an
+  #  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  #  KIND, either express or implied.  See the License for the
+  #  specific language governing permissions and limitations
+  #  under the License.
+  -->
+
+<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
+         http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
+
+    <display-name>S2 Admin Endpoint</display-name>
+
+    <servlet>
+        <servlet-name>StratosAdminEndpoint</servlet-name>
+        <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
+        <load-on-startup>1</load-on-startup>
+    </servlet>
+
+    <servlet-mapping>
+        <servlet-name>StratosAdminEndpoint</servlet-name>
+        <url-pattern>/*</url-pattern>
+    </servlet-mapping>
+
+</web-app>
+
diff --git a/components/org.apache.stratos.metadataserviceconsole/pom.xml b/components/org.apache.stratos.metadataserviceconsole/pom.xml
new file mode 100644
index 0000000..66b364b
--- /dev/null
+++ b/components/org.apache.stratos.metadataserviceconsole/pom.xml
@@ -0,0 +1,93 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- 
+  #  Licensed to the Apache Software Foundation (ASF) under one
+  #  or more contributor license agreements.  See the NOTICE file
+  #  distributed with this work for additional information
+  #  regarding copyright ownership.  The ASF licenses this file
+  #  to you under the Apache License, Version 2.0 (the
+  #  "License"); you may not use this file except in compliance
+  #  with the License.  You may obtain a copy of the License at
+  #  
+  #  http://www.apache.org/licenses/LICENSE-2.0
+  #  
+  #  Unless required by applicable law or agreed to in writing,
+  #  software distributed under the License is distributed on an
+  #  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  #  KIND, either express or implied.  See the License for the
+  #  specific language governing permissions and limitations
+  #  under the License.
+  -->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+
+	<parent>
+		<groupId>org.apache.stratos</groupId>
+		<artifactId>stratos-components-parent</artifactId>
+		<version>4.0.0</version>
+	</parent>
+
+	<modelVersion>4.0.0</modelVersion>
+	<artifactId>org.apache.stratos.metadataserviceconsole</artifactId>
+	<packaging>jar</packaging>
+	<name>Apache Stratos - Meta Data Service</name>
+	<description>Apache Stratos Meta Data Service</description>
+	<url>http://apache.org</url>
+
+	<dependencies>
+        <dependency>
+            <groupId>org.apache.stratos</groupId>
+            <artifactId>org.apache.stratos.common</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.wso2.andes.wso2</groupId>
+            <artifactId>andes-client</artifactId>
+            <version>0.13.wso2v8</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.geronimo.specs.wso2</groupId>
+            <artifactId>geronimo-jms_1.1_spec</artifactId>
+            <version>1.1.0.wso2v1</version>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>slf4j-log4j12</artifactId>
+            <version>1.7.5</version>
+        </dependency>
+        <dependency>
+            <groupId>com.google.code.gson</groupId>
+            <artifactId>gson</artifactId>
+            <version>2.2.4</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.stratos</groupId>
+            <artifactId>org.apache.stratos.messaging</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>commons-io</groupId>
+            <artifactId>commons-io</artifactId>
+            <version>2.0</version>
+        </dependency>
+        <dependency>
+            <groupId>org.eclipse.jgit.wso2</groupId>
+            <artifactId>org.eclipse.jgit</artifactId>
+            <!--version>2.1.0.wso2v1</version-->
+            <version>2.3.1.wso2v2</version>
+        </dependency>
+        <dependency>
+            <groupId>com.jcraft</groupId>
+            <artifactId>jsch</artifactId>
+            <version>0.1.49.wso2v1</version>
+        </dependency>
+        <dependency>
+            <groupId>org.wso2.carbon</groupId>
+            <artifactId>org.wso2.carbon.utils</artifactId>
+            <version>4.2.0</version>
+        </dependency>
+        <dependency>
+            <groupId>org.wso2.carbon</groupId>
+            <artifactId>org.wso2.carbon.databridge.agent.thrift</artifactId>
+            <version>4.2.0</version>
+        </dependency>
+	</dependencies>
+</project>
diff --git a/components/org.apache.stratos.metadataserviceconsole/src/main/java/org/apache/stratos/metadataservice/Main.java b/components/org.apache.stratos.metadataserviceconsole/src/main/java/org/apache/stratos/metadataservice/Main.java
new file mode 100644
index 0000000..e5b1bd7
--- /dev/null
+++ b/components/org.apache.stratos.metadataserviceconsole/src/main/java/org/apache/stratos/metadataservice/Main.java
@@ -0,0 +1,13 @@
+package org.apache.stratos.metadataservice;
+
+public class Main {
+
+	/**
+	 * @param args
+	 */
+	public static void main(String[] args) {
+		// TODO Auto-generated method stub
+		System.out.println("Meta data service started");
+	}
+
+}
diff --git a/components/org.apache.stratos.redirector.servlet.ui/pom.xml b/components/org.apache.stratos.redirector.servlet.ui/pom.xml
index d3595ea..dd2c47a 100644
--- a/components/org.apache.stratos.redirector.servlet.ui/pom.xml
+++ b/components/org.apache.stratos.redirector.servlet.ui/pom.xml
@@ -21,7 +21,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.redirector.servlet/pom.xml b/components/org.apache.stratos.redirector.servlet/pom.xml
index 7ea160a..11e65c7 100644
--- a/components/org.apache.stratos.redirector.servlet/pom.xml
+++ b/components/org.apache.stratos.redirector.servlet/pom.xml
@@ -20,7 +20,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.register.ui/pom.xml b/components/org.apache.stratos.register.ui/pom.xml
index 6ab6dab..7a4b37e 100644
--- a/components/org.apache.stratos.register.ui/pom.xml
+++ b/components/org.apache.stratos.register.ui/pom.xml
@@ -21,7 +21,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.rest.endpoint/pom.xml b/components/org.apache.stratos.rest.endpoint/pom.xml
index 41b707c..2a0248e 100644
--- a/components/org.apache.stratos.rest.endpoint/pom.xml
+++ b/components/org.apache.stratos.rest.endpoint/pom.xml
@@ -20,7 +20,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/CartridgeInfoBean.java b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/CartridgeInfoBean.java
index 4a43499..1bce7fb 100644
--- a/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/CartridgeInfoBean.java
+++ b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/CartridgeInfoBean.java
@@ -18,8 +18,6 @@
  */
 package org.apache.stratos.rest.endpoint.bean;
 
-import org.apache.stratos.rest.endpoint.bean.cartridge.definition.PersistenceBean;
-import org.apache.stratos.rest.endpoint.bean.cartridge.definition.PropertyBean;
 import javax.xml.bind.annotation.XmlRootElement;
 import java.util.ArrayList;
 import java.util.List;
@@ -37,12 +35,15 @@ public class CartridgeInfoBean {
     String dataCartridgeType;
     String dataCartridgeAlias;
     boolean commitsEnabled;
-    private String serviceGroup;
-    private PersistenceBean persistence;
 
-    private List<PropertyBean> property;
+    private boolean persistanceRequired;
+    private String size;
+    private boolean removeOnTermination;
+    private String serviceGroup;
+    private List<String> domains;
 
     public CartridgeInfoBean() {
+        this.domains = new ArrayList<String>();
     }
 
     public String getCartridgeType() {
@@ -125,7 +126,31 @@ public class CartridgeInfoBean {
         this.deploymentPolicy = deploymentPolicy;
     }
 
-    public boolean isCommitsEnabled() {
+    public boolean isPersistanceRequired() {
+        return persistanceRequired;
+    }
+
+    public void setPersistanceRequired(boolean persistanceRequired) {
+        this.persistanceRequired = persistanceRequired;
+    }
+
+    public String getSize() {
+        return size;
+    }
+
+    public void setSize(String size) {
+        this.size = size;
+    }
+
+    public boolean isRemoveOnTermination() {
+        return removeOnTermination;
+    }
+
+    public void setRemoveOnTermination(boolean removeOnTermination) {
+        this.removeOnTermination = removeOnTermination;
+    }
+
+	public boolean isCommitsEnabled() {
 		return commitsEnabled;
 	}
 
@@ -140,20 +165,9 @@ public class CartridgeInfoBean {
 	public void setServiceGroup(String serviceGroup) {
 		this.serviceGroup = serviceGroup;
 	}
+    
+    public List<String> getDomains() { return domains; }
 
-    public PersistenceBean getPersistence() {
-        return persistence;
-    }
-
-    public void setPersistence(PersistenceBean persistence) {
-        this.persistence = persistence;
-    }
+    public void setDomains(List<String> domains) { this.domains = domains; }
 
-    public List<PropertyBean> getProperty() {
-        return property;
-    }
-
-    public void setProperty(List<PropertyBean> property) {
-        this.property = property;
-    }
 }
diff --git a/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/autoscaler/policy/autoscale/LoadAverage.java b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/autoscaler/policy/autoscale/LoadAverage.java
new file mode 100644
index 0000000..d500f90
--- /dev/null
+++ b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/autoscaler/policy/autoscale/LoadAverage.java
@@ -0,0 +1,36 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.stratos.rest.endpoint.bean.autoscaler.policy.autoscale;
+
+import javax.xml.bind.annotation.XmlRootElement;
+
+@XmlRootElement
+public class LoadAverage {
+
+    public float average;
+
+    public float secondDerivative;
+
+    public float gradient;
+
+    public float scaleDownMarginOfGradient;
+
+    public float scaleDownMarginOfSecondDerivative;
+}
diff --git a/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/autoscaler/policy/autoscale/LoadThresholds.java b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/autoscaler/policy/autoscale/LoadThresholds.java
index 30de3bd..a53cf8c 100644
--- a/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/autoscaler/policy/autoscale/LoadThresholds.java
+++ b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/autoscaler/policy/autoscale/LoadThresholds.java
@@ -24,7 +24,9 @@ import javax.xml.bind.annotation.XmlRootElement;
 @XmlRootElement
 public class LoadThresholds {
 
-	public RequestsInFlightThresholds requestsInFlight;
-	public MemoryConsumptionThresholds memoryConsumption;
-	public LoadAverageThresholds loadAverage;
+    public RequestsInFlight requestsInFlight;
+
+    public MemoryConsumption memoryConsumption;
+
+    public LoadAverage loadAverage;
 }
diff --git a/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/autoscaler/policy/autoscale/MemoryConsumption.java b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/autoscaler/policy/autoscale/MemoryConsumption.java
new file mode 100644
index 0000000..b1c9675
--- /dev/null
+++ b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/autoscaler/policy/autoscale/MemoryConsumption.java
@@ -0,0 +1,36 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.stratos.rest.endpoint.bean.autoscaler.policy.autoscale;
+
+import javax.xml.bind.annotation.XmlRootElement;
+
+@XmlRootElement
+public class MemoryConsumption {
+
+    public float average;
+
+    public float secondDerivative;
+
+    public float gradient;
+
+    public float scaleDownMarginOfGradient;
+
+    public float scaleDownMarginOfSecondDerivative;
+}
diff --git a/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/autoscaler/policy/autoscale/RequestsInFlight.java b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/autoscaler/policy/autoscale/RequestsInFlight.java
new file mode 100644
index 0000000..7e5b7cd
--- /dev/null
+++ b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/autoscaler/policy/autoscale/RequestsInFlight.java
@@ -0,0 +1,36 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.stratos.rest.endpoint.bean.autoscaler.policy.autoscale;
+
+import javax.xml.bind.annotation.XmlRootElement;
+
+@XmlRootElement
+public class RequestsInFlight {
+
+    public float average;
+
+    public float secondDerivative;
+
+    public float gradient;
+
+    public float scaleDownMarginOfGradient;
+
+    public float scaleDownMarginOfSecondDerivative;
+}
diff --git a/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/cartridge/definition/VolumeBean.java b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/cartridge/definition/VolumeBean.java
index a9d7441..7eabb45 100644
--- a/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/cartridge/definition/VolumeBean.java
+++ b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/cartridge/definition/VolumeBean.java
@@ -23,8 +23,6 @@ import javax.xml.bind.annotation.XmlRootElement;
 @XmlRootElement
 public class VolumeBean {
 
-    public String id;
-
     public String size;
 
     public String device;
@@ -32,10 +30,6 @@ public class VolumeBean {
     public boolean removeOnTermination;
 
     public String mappingPath;
-    
-    public String snapshotId;
-
-    public String volumeId;
 
     public String toString () {
         return " [ Persistence Required : " + ", Size: " + size + ", device: " +
diff --git a/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/util/converter/PojoConverter.java b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/util/converter/PojoConverter.java
index dc77ad5..efb2960 100644
--- a/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/util/converter/PojoConverter.java
+++ b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/util/converter/PojoConverter.java
@@ -19,7 +19,6 @@
 
 package org.apache.stratos.rest.endpoint.bean.util.converter;
 
-import org.apache.commons.lang.StringUtils;
 import org.apache.stratos.cloud.controller.stub.pojo.*;
 import org.apache.stratos.manager.deploy.service.Service;
 import org.apache.stratos.manager.subscription.SubscriptionDomain;
@@ -148,7 +147,7 @@ public class PojoConverter {
         return iaasConfigsArray;
     }
 
-     public static Persistence getPersistence(PersistenceBean persistenceBean) {
+    private static Persistence getPersistence(PersistenceBean persistenceBean) {
         Persistence persistence = new Persistence();
         persistence.setPersistanceRequired(persistenceBean.isRequired);
         VolumeBean[] volumeBean = new VolumeBean[persistenceBean.volume.size()];
@@ -156,17 +155,10 @@ public class PojoConverter {
         Volume[] volumes = new Volume[persistenceBean.volume.size()];
         for (int i = 0 ; i < volumes.length ; i++) {
             Volume volume = new Volume();
-            volume.setId(volumeBean[i].id);
-            volume.setVolumeId(volumeBean[i].volumeId);
-            if(StringUtils.isEmpty(volume.getVolumeId())){
-                volume.setSize(Integer.parseInt(volumeBean[i].size));
-            }
-
+            volume.setSize(Integer.parseInt(volumeBean[i].size));
             volume.setDevice(volumeBean[i].device);
             volume.setRemoveOntermination(volumeBean[i].removeOnTermination);
             volume.setMappingPath(volumeBean[i].mappingPath);
-            volume.setSnapshotId(volumeBean[i].snapshotId);
-
             volumes[i] = volume;
         }
         persistence.setVolumes(volumes);
@@ -174,7 +166,7 @@ public class PojoConverter {
 
     }
 
-    public static Properties getProperties(List<PropertyBean> propertyBeans) {
+    private static Properties getProperties (List<PropertyBean> propertyBeans) {
 
         //convert to an array
         PropertyBean [] propertyBeansArray = new PropertyBean[propertyBeans.size()];
@@ -246,31 +238,40 @@ public class PojoConverter {
             if(autoscalePolicyBean.getLoadThresholds().loadAverage != null) {
 
                 //set load average information
-                org.apache.stratos.autoscaler.policy.model.LoadAverageThresholds loadAverage = new
-                        org.apache.stratos.autoscaler.policy.model.LoadAverageThresholds();
-                loadAverage.setUpperLimit(autoscalePolicyBean.getLoadThresholds().loadAverage.upperLimit);
-                loadAverage.setLowerLimit(autoscalePolicyBean.getLoadThresholds().loadAverage.lowerLimit);
+                org.apache.stratos.autoscaler.policy.model.LoadAverage loadAverage = new
+                        org.apache.stratos.autoscaler.policy.model.LoadAverage();
+                loadAverage.setAverage(autoscalePolicyBean.getLoadThresholds().loadAverage.average);
+                loadAverage.setGradient(autoscalePolicyBean.getLoadThresholds().loadAverage.gradient);
+                loadAverage.setSecondDerivative(autoscalePolicyBean.getLoadThresholds().loadAverage.secondDerivative);
+                loadAverage.setScaleDownMarginOfGradient(autoscalePolicyBean.getLoadThresholds().loadAverage.scaleDownMarginOfGradient);
+                loadAverage.setScaleDownMarginOfSecondDerivative(autoscalePolicyBean.getLoadThresholds().loadAverage.scaleDownMarginOfSecondDerivative);
                 //set load average
                 loadThresholds.setLoadAverage(loadAverage);
             }
             if (autoscalePolicyBean.getLoadThresholds().requestsInFlight != null) {
 
-                org.apache.stratos.autoscaler.policy.model.RequestsInFlightThresholds requestsInFlight = new
-                        org.apache.stratos.autoscaler.policy.model.RequestsInFlightThresholds();
+                org.apache.stratos.autoscaler.policy.model.RequestsInFlight requestsInFlight = new
+                        org.apache.stratos.autoscaler.policy.model.RequestsInFlight();
                 //set request in flight information
-                requestsInFlight.setUpperLimit(autoscalePolicyBean.getLoadThresholds().requestsInFlight.upperLimit);
-                requestsInFlight.setLowerLimit(autoscalePolicyBean.getLoadThresholds().requestsInFlight.lowerLimit);
+                requestsInFlight.setAverage(autoscalePolicyBean.getLoadThresholds().requestsInFlight.average);
+                requestsInFlight.setGradient(autoscalePolicyBean.getLoadThresholds().requestsInFlight.gradient);
+                requestsInFlight.setSecondDerivative(autoscalePolicyBean.getLoadThresholds().requestsInFlight.secondDerivative);
+                requestsInFlight.setScaleDownMarginOfGradient(autoscalePolicyBean.getLoadThresholds().requestsInFlight.scaleDownMarginOfGradient);
+                requestsInFlight.setScaleDownMarginOfSecondDerivative(autoscalePolicyBean.getLoadThresholds().requestsInFlight.scaleDownMarginOfSecondDerivative);
                 //set request in flight
                 loadThresholds.setRequestsInFlight(requestsInFlight);
             }
             if (autoscalePolicyBean.getLoadThresholds().memoryConsumption != null) {
 
-                org.apache.stratos.autoscaler.policy.model.MemoryConsumptionThresholds memoryConsumption = new
-                        org.apache.stratos.autoscaler.policy.model.MemoryConsumptionThresholds();
+                org.apache.stratos.autoscaler.policy.model.MemoryConsumption memoryConsumption = new
+                        org.apache.stratos.autoscaler.policy.model.MemoryConsumption();
 
                 //set memory consumption information
-                memoryConsumption.setUpperLimit(autoscalePolicyBean.getLoadThresholds().memoryConsumption.upperLimit);
-                memoryConsumption.setLowerLimit(autoscalePolicyBean.getLoadThresholds().memoryConsumption.lowerLimit);
+                memoryConsumption.setAverage(autoscalePolicyBean.getLoadThresholds().memoryConsumption.average);
+                memoryConsumption.setGradient(autoscalePolicyBean.getLoadThresholds().memoryConsumption.gradient);
+                memoryConsumption.setSecondDerivative(autoscalePolicyBean.getLoadThresholds().memoryConsumption.secondDerivative);
+                memoryConsumption.setScaleDownMarginOfGradient(autoscalePolicyBean.getLoadThresholds().memoryConsumption.scaleDownMarginOfGradient);
+                memoryConsumption.setScaleDownMarginOfSecondDerivative(autoscalePolicyBean.getLoadThresholds().memoryConsumption.scaleDownMarginOfSecondDerivative);
                 //set memory consumption
                 loadThresholds.setMemoryConsumption(memoryConsumption);
             }
@@ -504,21 +505,35 @@ public class PojoConverter {
 
         LoadThresholds loadThresholdBean = new LoadThresholds();
         if(loadThresholds.getLoadAverage() != null) {
-            LoadAverageThresholds loadAverage = new LoadAverageThresholds();
-            loadAverage.upperLimit = loadThresholds.getLoadAverage().getUpperLimit();
-            loadAverage.lowerLimit = loadThresholds.getLoadAverage().getLowerLimit();
+            LoadAverage loadAverage = new LoadAverage();
+            loadAverage.average = loadThresholds.getLoadAverage().getAverage();
+            loadAverage.gradient = loadThresholds.getLoadAverage().getGradient();
+            loadAverage.scaleDownMarginOfGradient = loadThresholds.getLoadAverage().getScaleDownMarginOfGradient();
+            loadAverage.scaleDownMarginOfSecondDerivative = loadThresholds.getLoadAverage().
+                    getScaleDownMarginOfSecondDerivative();
+            loadAverage.secondDerivative = loadThresholds.getLoadAverage().getSecondDerivative();
             loadThresholdBean.loadAverage = loadAverage;
         }
         if(loadThresholds.getMemoryConsumption() != null) {
-            MemoryConsumptionThresholds memoryConsumption = new MemoryConsumptionThresholds();
-            memoryConsumption.upperLimit = loadThresholds.getMemoryConsumption().getUpperLimit();
-            memoryConsumption.lowerLimit = loadThresholds.getMemoryConsumption().getLowerLimit();
+            MemoryConsumption memoryConsumption = new MemoryConsumption();
+            memoryConsumption.average = loadThresholds.getMemoryConsumption().getAverage();
+            memoryConsumption.gradient = loadThresholds.getMemoryConsumption().getGradient();
+            memoryConsumption.scaleDownMarginOfGradient = loadThresholds.getMemoryConsumption().
+                    getScaleDownMarginOfGradient();
+            memoryConsumption.scaleDownMarginOfSecondDerivative = loadThresholds.getMemoryConsumption().
+                    getScaleDownMarginOfSecondDerivative();
+            memoryConsumption.secondDerivative = loadThresholds.getMemoryConsumption().getSecondDerivative();
             loadThresholdBean.memoryConsumption = memoryConsumption;
         }
         if(loadThresholds.getRequestsInFlight() != null) {
-            RequestsInFlightThresholds requestsInFlight = new RequestsInFlightThresholds();
-            requestsInFlight.upperLimit = loadThresholds.getRequestsInFlight().getUpperLimit();
-            requestsInFlight.lowerLimit = loadThresholds.getRequestsInFlight().getLowerLimit();
+            RequestsInFlight requestsInFlight = new RequestsInFlight();
+            requestsInFlight.average = loadThresholds.getRequestsInFlight().getAverage();
+            requestsInFlight.gradient = loadThresholds.getRequestsInFlight().getGradient();
+            requestsInFlight.scaleDownMarginOfGradient = loadThresholds.getRequestsInFlight().
+                    getScaleDownMarginOfGradient();
+            requestsInFlight.scaleDownMarginOfSecondDerivative = loadThresholds.getRequestsInFlight().
+                    getScaleDownMarginOfSecondDerivative();
+            requestsInFlight.secondDerivative = loadThresholds.getRequestsInFlight().getSecondDerivative();
             loadThresholdBean.requestsInFlight = requestsInFlight;
         }
 
diff --git a/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/handlers/CustomExceptionMapper.java b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/handlers/CustomExceptionMapper.java
index 1a8d374..e33241f 100644
--- a/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/handlers/CustomExceptionMapper.java
+++ b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/handlers/CustomExceptionMapper.java
@@ -18,8 +18,6 @@
  */
 package org.apache.stratos.rest.endpoint.handlers;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.stratos.rest.endpoint.Utils;
 import org.apache.stratos.rest.endpoint.exception.RestAPIException;
 
@@ -27,24 +25,15 @@ import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
 import javax.ws.rs.ext.ExceptionMapper;
 
-/*
-* Stratos admin APIs' throw {@link RestAPIException} upon failure. This Class
-* maps such exceptions to appropriate JSON output
-* */
 public class CustomExceptionMapper implements ExceptionMapper<RestAPIException> {
-    private static Log log = LogFactory.getLog(CustomExceptionMapper.class);
-
     public Response toResponse(RestAPIException restAPIException) {
-        if(log.isDebugEnabled()){
-            log.debug("Error while invoking the admin rest api", restAPIException);
-        }
         // if no specific error message specified, spitting out a generaic error message
         String errorMessage = (restAPIException.getMessage() != null)?
                 restAPIException.getMessage():"Error while fullfilling the request";
         // if no specific error specified we are throwing the bad request http status code by default
         Response.Status httpStatus= (restAPIException.getHTTPStatusCode() != null)?
                 restAPIException.getHTTPStatusCode():Response.Status.BAD_REQUEST;
-        return Response.status(httpStatus.getStatusCode()).type(MediaType.APPLICATION_JSON).
+        return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON).
                 entity(Utils.buildMessage(httpStatus.getStatusCode(),errorMessage)).build();
     }
 }
diff --git a/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/handlers/StratosAuthenticationHandler.java b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/handlers/StratosAuthenticationHandler.java
index 7e66e6e..bfa676f 100644
--- a/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/handlers/StratosAuthenticationHandler.java
+++ b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/handlers/StratosAuthenticationHandler.java
@@ -18,6 +18,10 @@
  */
 package org.apache.stratos.rest.endpoint.handlers;
 
+import javax.servlet.http.HttpServletRequest;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.cxf.configuration.security.AuthorizationPolicy;
@@ -63,32 +67,45 @@ public class StratosAuthenticationHandler extends AbstractAuthenticationAuthoriz
      * @return
      */
     public Response handle(Message message, ClassResourceInfo classResourceInfo) {
+    	// If Mutual SSL is enabled
+        HttpServletRequest request = (HttpServletRequest) message.get("HTTP.REQUEST");
+        Object certObject = request.getAttribute("javax.servlet.request.X509Certificate");
+        
         AuthorizationPolicy policy = (AuthorizationPolicy) message.get(AuthorizationPolicy.class);
         String username = policy.getUserName().trim();
         String password = policy.getPassword().trim();
 
         //sanity check
-        if ((username == null) || (password == null) || username.equals("")
-                || password.equals("")) {
-            log.error("username or password is seen as null/empty values.");
-            return Response.status(Response.Status.UNAUTHORIZED).header("WWW-Authenticate", "Basic").
-                    type(MediaType.APPLICATION_JSON).entity(Utils.buildMessage("Username/Password cannot be null")).build();
+        if ((username == null) || username.equals("")) {
+            log.error("username is seen as null/empty values.");
+            return Response.status(Response.Status.UNAUTHORIZED)
+                           .header("WWW-Authenticate", "Basic").type(MediaType.APPLICATION_JSON)
+                           .entity(Utils.buildMessage("Username cannot be null")).build();
+        } else if (certObject == null && ((password == null) || password.equals(""))) {
+            log.error("password is seen as null/empty values.");
+            return Response.status(Response.Status.UNAUTHORIZED)
+                           .header("WWW-Authenticate", "Basic").type(MediaType.APPLICATION_JSON)
+                           .entity(Utils.buildMessage("password cannot be null")).build();
         }
+        
         try {
             RealmService realmService = ServiceHolder.getRealmService();
             RegistryService registryService = ServiceHolder.getRegistryService();
             String tenantDomain = MultitenantUtils.getTenantDomain(username);
             int tenantId = realmService.getTenantManager().getTenantId(tenantDomain);
-
-            UserRealm userRealm = AnonymousSessionUtil.getRealmByTenantDomain(registryService, realmService, tenantDomain);
-            if (userRealm == null) {
-                log .error("Invalid domain or unactivated tenant login");
-                // is this the correct HTTP code for this scenario ? (401)
-                return Response.status(Response.Status.UNAUTHORIZED).header("WWW-Authenticate", "Basic").
-                        type(MediaType.APPLICATION_JSON).entity(Utils.buildMessage("Tenant not found")).build();
+            
+            UserRealm userRealm = null;
+            if (certObject == null) {
+                userRealm = AnonymousSessionUtil.getRealmByTenantDomain(registryService, realmService, tenantDomain);
+                if (userRealm == null) {
+                    log .error("Invalid domain or unactivated tenant login");
+                    // is this the correct HTTP code for this scenario ? (401)
+                    return Response.status(Response.Status.UNAUTHORIZED).header("WWW-Authenticate", "Basic").
+                            type(MediaType.APPLICATION_JSON).entity(Utils.buildMessage("Tenant not found")).build();
+                }
             }
             username = MultitenantUtils.getTenantAwareUsername(username);
-            if (userRealm.getUserStoreManager().authenticate(username, password)) {  // if authenticated
+            if (certObject != null || userRealm.getUserStoreManager().authenticate(username, password)) {  // if authenticated
 
                 // setting the correct tenant info for downstream code..
                 PrivilegedCarbonContext carbonContext = PrivilegedCarbonContext.getThreadLocalCarbonContext();
diff --git a/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/mock/MockContext.java b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/mock/MockContext.java
index a20dd8f..8ce6f68 100644
--- a/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/mock/MockContext.java
+++ b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/mock/MockContext.java
@@ -368,10 +368,6 @@ public class MockContext {
         return serviceDefinitionMap.values().toArray(new ServiceDefinitionBean[0]);
     }
 
-    public ServiceDefinitionBean getServiceType(String serviceType) throws RestAPIException{
-        return serviceDefinitionMap.get(serviceType);
-    }
-
     public Partition[] getPartitions(String deploymentPolicyId, String partitionGroupId) throws RestAPIException{
         if(!deploymentPolicyMap.containsKey(deploymentPolicyId)){
             throw new RestAPIException("There is no deployment policy with id: " + deploymentPolicyId);
diff --git a/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/mock/StratosTestAdmin.java b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/mock/StratosTestAdmin.java
index 34793b2..5302dab 100644
--- a/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/mock/StratosTestAdmin.java
+++ b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/mock/StratosTestAdmin.java
@@ -245,15 +245,6 @@ public class StratosTestAdmin {
 
     }
 
-    @GET
-    @Path("/service/{serviceType}")
-    @Produces("application/json")
-    @Consumes("application/json")
-    @AuthorizationAction("/permission/protected/manage/monitor/tenants")
-    public ServiceDefinitionBean getService(@PathParam("serviceType") String serviceType)throws RestAPIException {
-
-        return MockContext.getInstance().getServiceType(serviceType);
-    }
 
     @POST
     @Path("/cartridge/definition/")
diff --git a/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/services/ServiceUtils.java b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/services/ServiceUtils.java
index f2cd555..7f468d7 100644
--- a/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/services/ServiceUtils.java
+++ b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/services/ServiceUtils.java
@@ -20,17 +20,18 @@ package org.apache.stratos.rest.endpoint.services;
 
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.context.ConfigurationContext;
+import org.apache.commons.lang.StringUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.stratos.autoscaler.deployment.policy.DeploymentPolicy;
+import org.apache.stratos.cloud.controller.stub.pojo.CartridgeConfig;
+import org.apache.stratos.cloud.controller.stub.pojo.CartridgeInfo;
+import org.apache.stratos.cloud.controller.stub.pojo.Property;
 import org.apache.stratos.autoscaler.stub.AutoScalerServiceInvalidPartitionExceptionException;
 import org.apache.stratos.autoscaler.stub.AutoScalerServiceInvalidPolicyExceptionException;
 import org.apache.stratos.cloud.controller.stub.CloudControllerServiceInvalidCartridgeDefinitionExceptionException;
 import org.apache.stratos.cloud.controller.stub.CloudControllerServiceInvalidCartridgeTypeExceptionException;
 import org.apache.stratos.cloud.controller.stub.CloudControllerServiceInvalidIaasProviderExceptionException;
-import org.apache.stratos.cloud.controller.stub.pojo.CartridgeConfig;
-import org.apache.stratos.cloud.controller.stub.pojo.CartridgeInfo;
-import org.apache.stratos.cloud.controller.stub.pojo.Property;
 import org.apache.stratos.manager.client.AutoscalerServiceClient;
 import org.apache.stratos.manager.client.CloudControllerServiceClient;
 import org.apache.stratos.manager.deploy.service.Service;
@@ -42,6 +43,7 @@ import org.apache.stratos.manager.manager.CartridgeSubscriptionManager;
 import org.apache.stratos.manager.repository.RepositoryNotification;
 import org.apache.stratos.manager.subscription.CartridgeSubscription;
 import org.apache.stratos.manager.subscription.DataCartridgeSubscription;
+import org.apache.stratos.manager.subscription.PersistenceContext;
 import org.apache.stratos.manager.subscription.SubscriptionData;
 import org.apache.stratos.manager.subscription.SubscriptionDomain;
 import org.apache.stratos.manager.topology.model.TopologyClusterInformationModel;
@@ -59,13 +61,11 @@ import org.apache.stratos.rest.endpoint.bean.autoscaler.partition.Partition;
 import org.apache.stratos.rest.endpoint.bean.autoscaler.partition.PartitionGroup;
 import org.apache.stratos.rest.endpoint.bean.autoscaler.policy.autoscale.AutoscalePolicy;
 import org.apache.stratos.rest.endpoint.bean.cartridge.definition.CartridgeDefinitionBean;
-import org.apache.stratos.rest.endpoint.bean.cartridge.definition.PersistenceBean;
 import org.apache.stratos.rest.endpoint.bean.cartridge.definition.ServiceDefinitionBean;
 import org.apache.stratos.rest.endpoint.bean.repositoryNotificationInfoBean.Payload;
 import org.apache.stratos.rest.endpoint.bean.subscription.domain.SubscriptionDomainBean;
 import org.apache.stratos.rest.endpoint.bean.util.converter.PojoConverter;
 import org.apache.stratos.rest.endpoint.exception.RestAPIException;
-import org.apache.stratos.cloud.controller.stub.pojo.*;
 
 import javax.ws.rs.core.Response;
 import javax.ws.rs.core.Response.Status;
@@ -79,47 +79,46 @@ public class ServiceUtils {
     public static final String SHOULD_DELETE_VOLUME = "volume.delete.on.unsubscription";
     public static final String VOLUME_SIZE = "volume.size.gb";
     public static final String DEVICE_NAME = "volume.device.name";
-    public static final String VOLUME_ID = "volume.id";
 
     private static Log log = LogFactory.getLog(ServiceUtils.class);
     private static CartridgeSubscriptionManager cartridgeSubsciptionManager = new CartridgeSubscriptionManager();
     private static ServiceDeploymentManager serviceDeploymentManager = new ServiceDeploymentManager();
 
-    static StratosAdminResponse deployCartridge(CartridgeDefinitionBean cartridgeDefinitionBean, ConfigurationContext ctxt,
-                                                String userName, String tenantDomain) throws RestAPIException {
+    static StratosAdminResponse deployCartridge (CartridgeDefinitionBean cartridgeDefinitionBean, ConfigurationContext ctxt,
+        String userName, String tenantDomain) throws RestAPIException {
 
-        log.info("Starting to deploy a Cartridge [type] " + cartridgeDefinitionBean.type);
+        log.info("Starting to deploy a Cartridge [type] "+cartridgeDefinitionBean.type);
 
         CloudControllerServiceClient cloudControllerServiceClient = getCloudControllerServiceClient();
-
+        
         if (cloudControllerServiceClient != null) {
 
             CartridgeConfig cartridgeConfig = PojoConverter.populateCartridgeConfigPojo(cartridgeDefinitionBean);
 
-            if (cartridgeConfig == null) {
+            if(cartridgeConfig == null) {
                 throw new RestAPIException("Populated CartridgeConfig instance is null, cartridge deployment aborted");
             }
 
-
-            // call CC
-            try {
-                cloudControllerServiceClient
-                        .deployCartridgeDefinition(cartridgeConfig);
-            } catch (RemoteException e) {
-                log.error(e.getMessage(), e);
-                throw new RestAPIException(e.getMessage(), e);
-            } catch (CloudControllerServiceInvalidCartridgeDefinitionExceptionException e) {
-                String message = e.getFaultMessage().getInvalidCartridgeDefinitionException().getMessage();
-                log.error(message, e);
-                throw new RestAPIException(message, e);
-            } catch (CloudControllerServiceInvalidIaasProviderExceptionException e) {
-                String message = e.getFaultMessage().getInvalidIaasProviderException().getMessage();
-                log.error(message, e);
-                throw new RestAPIException(message, e);
-            }
-
-            log.info("Successfully deployed Cartridge [type] " + cartridgeDefinitionBean.type);
-
+                
+			// call CC
+			try {
+				cloudControllerServiceClient
+						.deployCartridgeDefinition(cartridgeConfig);
+			} catch (RemoteException e) {
+				log.error(e.getMessage(), e);
+				throw new RestAPIException(e.getMessage(), e);
+			} catch (CloudControllerServiceInvalidCartridgeDefinitionExceptionException e) {
+				String message = e.getFaultMessage().getInvalidCartridgeDefinitionException().getMessage();
+				log.error(message, e);
+				throw new RestAPIException(message, e);
+			} catch (CloudControllerServiceInvalidIaasProviderExceptionException e) {
+				String message = e.getFaultMessage().getInvalidIaasProviderException().getMessage();
+				log.error(message, e);
+				throw new RestAPIException(message, e);
+			}
+                
+            log.info("Successfully deployed Cartridge [type] "+cartridgeDefinitionBean.type);
+                
         }
 
         StratosAdminResponse stratosAdminResponse = new StratosAdminResponse();
@@ -129,38 +128,38 @@ public class ServiceUtils {
 
     @SuppressWarnings("unused")
     private static DeploymentPolicy[] intersection(
-            DeploymentPolicy[] cartridgeDepPolicies,
-            DeploymentPolicy[] lbCartridgeDepPolicies) {
-
-        List<DeploymentPolicy> commonPolicies =
+        DeploymentPolicy[] cartridgeDepPolicies,
+        DeploymentPolicy[] lbCartridgeDepPolicies) {
+        
+        List<DeploymentPolicy> commonPolicies = 
                 new ArrayList<DeploymentPolicy>();
-        for (DeploymentPolicy policy1
+        for (DeploymentPolicy policy1 
                 : cartridgeDepPolicies) {
-            for (DeploymentPolicy policy2
+            for (DeploymentPolicy policy2 
                     : lbCartridgeDepPolicies) {
-                if (policy1.equals(policy2)) {
+                if(policy1.equals(policy2)) {
                     commonPolicies.add(policy1);
                 }
             }
-
+            
         }
         return commonPolicies.toArray(new DeploymentPolicy[0]);
     }
-
+    
     static StratosAdminResponse undeployCartridge(String cartridgeType) throws RestAPIException {
 
         CloudControllerServiceClient cloudControllerServiceClient = getCloudControllerServiceClient();
         if (cloudControllerServiceClient != null) {
-            try {
-                cloudControllerServiceClient.unDeployCartridgeDefinition(cartridgeType);
-            } catch (RemoteException e) {
-                log.error(e.getMessage(), e);
-                throw new RestAPIException(e.getMessage(), e);
-            } catch (CloudControllerServiceInvalidCartridgeTypeExceptionException e) {
-                String msg = e.getFaultMessage().getInvalidCartridgeTypeException().getMessage();
-                log.error(msg, e);
-                throw new RestAPIException(msg, e);
-            }
+                try {
+					cloudControllerServiceClient.unDeployCartridgeDefinition(cartridgeType);
+				} catch (RemoteException e) {
+					log.error(e.getMessage(), e);
+					throw new RestAPIException(e.getMessage(), e);
+				} catch (CloudControllerServiceInvalidCartridgeTypeExceptionException e) {
+					String msg = e.getFaultMessage().getInvalidCartridgeTypeException().getMessage();
+					log.error(msg, e);
+					throw new RestAPIException(msg, e);
+				}
 
         }
 
@@ -180,16 +179,16 @@ public class ServiceUtils {
             org.apache.stratos.cloud.controller.stub.deployment.partition.Partition partition =
                     PojoConverter.convertToCCPartitionPojo(partitionBean);
 
-            try {
-                autoscalerServiceClient.deployPartition(partition);
-            } catch (RemoteException e) {
-                log.error(e.getMessage(), e);
-                throw new RestAPIException(e.getMessage(), e);
-            } catch (AutoScalerServiceInvalidPartitionExceptionException e) {
-                String message = e.getFaultMessage().getInvalidPartitionException().getMessage();
-                log.error(message, e);
-                throw new RestAPIException(message, e);
-            }
+			try {
+				autoscalerServiceClient.deployPartition(partition);
+			} catch (RemoteException e) {
+				log.error(e.getMessage(), e);
+				throw new RestAPIException(e.getMessage(), e);
+			} catch (AutoScalerServiceInvalidPartitionExceptionException e) {
+				String message = e.getFaultMessage().getInvalidPartitionException().getMessage();
+				log.error(message, e);
+				throw new RestAPIException(message, e);
+			}
 
         }
 
@@ -208,18 +207,18 @@ public class ServiceUtils {
             org.apache.stratos.autoscaler.policy.model.AutoscalePolicy autoscalePolicy = PojoConverter.
                     convertToCCAutoscalerPojo(autoscalePolicyBean);
 
-            try {
-                autoscalerServiceClient
-                        .deployAutoscalingPolicy(autoscalePolicy);
-            } catch (RemoteException e) {
-                log.error(e.getMessage(), e);
-                throw new RestAPIException(e.getMessage(), e);
-            } catch (AutoScalerServiceInvalidPolicyExceptionException e) {
-                String message = e.getFaultMessage()
-                        .getInvalidPolicyException().getMessage();
-                log.error(message, e);
-                throw new RestAPIException(message, e);
-            }
+			try {
+				autoscalerServiceClient
+						.deployAutoscalingPolicy(autoscalePolicy);
+			} catch (RemoteException e) {
+				log.error(e.getMessage(), e);
+				throw new RestAPIException(e.getMessage(), e);
+			} catch (AutoScalerServiceInvalidPolicyExceptionException e) {
+				String message = e.getFaultMessage()
+						.getInvalidPolicyException().getMessage();
+				log.error(message, e);
+				throw new RestAPIException(message, e);
+			}
 
         }
 
@@ -230,7 +229,7 @@ public class ServiceUtils {
 
     public static StratosAdminResponse deployDeploymentPolicy(
             org.apache.stratos.rest.endpoint.bean.autoscaler.policy.deployment.DeploymentPolicy deploymentPolicyBean)
-            throws RestAPIException {
+                throws RestAPIException {
 
         //log.info("***** " + cartridgeDefinitionBean.toString() + " *****");
 
@@ -240,17 +239,17 @@ public class ServiceUtils {
             org.apache.stratos.autoscaler.deployment.policy.DeploymentPolicy deploymentPolicy =
                     PojoConverter.convetToCCDeploymentPolicyPojo(deploymentPolicyBean);
 
-            try {
-                autoscalerServiceClient
-                        .deployDeploymentPolicy(deploymentPolicy);
-            } catch (RemoteException e) {
-                log.error(e.getMessage(), e);
-                throw new RestAPIException(e.getMessage(), e);
-            } catch (AutoScalerServiceInvalidPolicyExceptionException e) {
-                String message = e.getFaultMessage().getInvalidPolicyException().getMessage();
-                log.error(message, e);
-                throw new RestAPIException(message, e);
-            }
+			try {
+				autoscalerServiceClient
+						.deployDeploymentPolicy(deploymentPolicy);
+			} catch (RemoteException e) {
+				log.error(e.getMessage(), e);
+				throw new RestAPIException(e.getMessage(), e);
+			} catch (AutoScalerServiceInvalidPolicyExceptionException e) {
+				String message = e.getFaultMessage().getInvalidPolicyException().getMessage();
+				log.error(message, e);
+				throw new RestAPIException(message, e);
+			}
 
         }
 
@@ -259,20 +258,20 @@ public class ServiceUtils {
         return stratosAdminResponse;
     }
 
-    private static CloudControllerServiceClient getCloudControllerServiceClient() throws RestAPIException {
+    private static CloudControllerServiceClient getCloudControllerServiceClient () throws RestAPIException {
 
         try {
             return CloudControllerServiceClient.getServiceClient();
 
         } catch (AxisFault axisFault) {
             String errorMsg = "Error while getting CloudControllerServiceClient instance to connect to the "
-                    + "Cloud Controller. Cause: " + axisFault.getMessage();
+            		+ "Cloud Controller. Cause: "+axisFault.getMessage();
             log.error(errorMsg, axisFault);
             throw new RestAPIException(errorMsg, axisFault);
         }
     }
 
-    public static Partition[] getAvailablePartitions() throws RestAPIException {
+    public static Partition[] getAvailablePartitions () throws RestAPIException {
 
         org.apache.stratos.cloud.controller.stub.deployment.partition.Partition[] partitions = null;
         AutoscalerServiceClient autoscalerServiceClient = getAutoscalerServiceClient();
@@ -290,19 +289,19 @@ public class ServiceUtils {
         return PojoConverter.populatePartitionPojos(partitions);
     }
 
-    public static Partition[] getPartitionsOfDeploymentPolicy(String deploymentPolicyId)
-            throws RestAPIException {
+    public static Partition[] getPartitionsOfDeploymentPolicy(String deploymentPolicyId) 
+                throws RestAPIException {
 
         org.apache.stratos.cloud.controller.stub.deployment.partition.Partition[] partitions = null;
         AutoscalerServiceClient autoscalerServiceClient = getAutoscalerServiceClient();
         if (autoscalerServiceClient != null) {
             try {
                 partitions =
-                        autoscalerServiceClient.getPartitionsOfDeploymentPolicy(deploymentPolicyId);
+                             autoscalerServiceClient.getPartitionsOfDeploymentPolicy(deploymentPolicyId);
 
             } catch (RemoteException e) {
                 String errorMsg = "Error while getting available partitions for deployment policy id " +
-                        deploymentPolicyId + ". Cause: " + e.getMessage();
+                		deploymentPolicyId+". Cause: "+e.getMessage();
                 log.error(errorMsg, e);
                 throw new RestAPIException(errorMsg, e);
             }
@@ -310,20 +309,20 @@ public class ServiceUtils {
 
         return PojoConverter.populatePartitionPojos(partitions);
     }
-
+    
     public static Partition[]
-    getPartitionsOfGroup(String deploymentPolicyId, String groupId) throws RestAPIException {
+        getPartitionsOfGroup(String deploymentPolicyId, String groupId) throws RestAPIException {
 
         org.apache.stratos.cloud.controller.stub.deployment.partition.Partition[] partitions = null;
         AutoscalerServiceClient autoscalerServiceClient = getAutoscalerServiceClient();
         if (autoscalerServiceClient != null) {
             try {
                 partitions =
-                        autoscalerServiceClient.getPartitionsOfGroup(deploymentPolicyId, groupId);
+                             autoscalerServiceClient.getPartitionsOfGroup(deploymentPolicyId, groupId);
 
             } catch (RemoteException e) {
                 String errorMsg = "Error while getting available partitions for deployment policy id " + deploymentPolicyId +
-                        ", group id " + groupId + ". Cause: " + e.getMessage();
+                        ", group id " + groupId+". Cause: "+e.getMessage();
                 log.error(errorMsg, e);
                 throw new RestAPIException(errorMsg, e);
             }
@@ -332,7 +331,7 @@ public class ServiceUtils {
         return PojoConverter.populatePartitionPojos(partitions);
     }
 
-    public static Partition getPartition(String partitionId) throws RestAPIException {
+    public static Partition getPartition (String partitionId) throws RestAPIException {
 
         org.apache.stratos.cloud.controller.stub.deployment.partition.Partition partition = null;
         AutoscalerServiceClient autoscalerServiceClient = getAutoscalerServiceClient();
@@ -341,7 +340,7 @@ public class ServiceUtils {
                 partition = autoscalerServiceClient.getPartition(partitionId);
 
             } catch (RemoteException e) {
-                String errorMsg = "Error while getting partition for id " + partitionId + ". Cause: " + e.getMessage();
+                String errorMsg = "Error while getting partition for id " + partitionId+". Cause: "+e.getMessage();
                 log.error(errorMsg, e);
                 throw new RestAPIException(errorMsg, e);
             }
@@ -350,20 +349,20 @@ public class ServiceUtils {
         return PojoConverter.populatePartitionPojo(partition);
     }
 
-    private static AutoscalerServiceClient getAutoscalerServiceClient() throws RestAPIException {
+    private static AutoscalerServiceClient getAutoscalerServiceClient () throws RestAPIException {
 
         try {
             return AutoscalerServiceClient.getServiceClient();
 
         } catch (AxisFault axisFault) {
             String errorMsg = "Error while getting AutoscalerServiceClient instance to connect to the "
-                    + "Autoscaler. Cause: " + axisFault.getMessage();
+            		+ "Autoscaler. Cause: "+axisFault.getMessage();
             log.error(errorMsg, axisFault);
             throw new RestAPIException(errorMsg, axisFault);
         }
     }
 
-    public static AutoscalePolicy[] getAutoScalePolicies() throws RestAPIException {
+    public static AutoscalePolicy[] getAutoScalePolicies () throws RestAPIException {
 
         org.apache.stratos.autoscaler.policy.model.AutoscalePolicy[] autoscalePolicies = null;
         AutoscalerServiceClient autoscalerServiceClient = getAutoscalerServiceClient();
@@ -380,7 +379,7 @@ public class ServiceUtils {
         return PojoConverter.populateAutoscalePojos(autoscalePolicies);
     }
 
-    public static AutoscalePolicy getAutoScalePolicy(String autoscalePolicyId) throws RestAPIException {
+    public static AutoscalePolicy getAutoScalePolicy (String autoscalePolicyId) throws RestAPIException {
 
         org.apache.stratos.autoscaler.policy.model.AutoscalePolicy autoscalePolicy = null;
         AutoscalerServiceClient autoscalerServiceClient = getAutoscalerServiceClient();
@@ -389,8 +388,8 @@ public class ServiceUtils {
                 autoscalePolicy = autoscalerServiceClient.getAutoScalePolicy(autoscalePolicyId);
 
             } catch (RemoteException e) {
-                String errorMsg = "Error while getting information for autoscaling policy with id " +
-                        autoscalePolicyId + ".  Cause: " + e.getMessage();
+                String errorMsg = "Error while getting information for autoscaling policy with id " + 
+                		autoscalePolicyId+".  Cause: "+e.getMessage();
                 log.error(errorMsg, e);
                 throw new RestAPIException(errorMsg, e);
             }
@@ -399,10 +398,10 @@ public class ServiceUtils {
         return PojoConverter.populateAutoscalePojo(autoscalePolicy);
     }
 
-    public static org.apache.stratos.rest.endpoint.bean.autoscaler.policy.deployment.DeploymentPolicy[]
-    getDeploymentPolicies() throws RestAPIException {
+    public static org.apache.stratos.rest.endpoint.bean.autoscaler.policy.deployment.DeploymentPolicy[] 
+            getDeploymentPolicies () throws RestAPIException {
 
-        DeploymentPolicy[] deploymentPolicies = null;
+        DeploymentPolicy [] deploymentPolicies = null;
         AutoscalerServiceClient autoscalerServiceClient = getAutoscalerServiceClient();
         if (autoscalerServiceClient != null) {
             try {
@@ -413,15 +412,16 @@ public class ServiceUtils {
                 throw new RestAPIException(errorMsg, e);
             }
         }
+        
 
 
         return PojoConverter.populateDeploymentPolicyPojos(deploymentPolicies);
     }
 
-    public static org.apache.stratos.rest.endpoint.bean.autoscaler.policy.deployment.DeploymentPolicy[]
-    getDeploymentPolicies(String cartridgeType) throws RestAPIException {
+    public static org.apache.stratos.rest.endpoint.bean.autoscaler.policy.deployment.DeploymentPolicy[] 
+            getDeploymentPolicies (String cartridgeType) throws RestAPIException {
 
-        DeploymentPolicy[] deploymentPolicies = null;
+        DeploymentPolicy [] deploymentPolicies = null;
         AutoscalerServiceClient autoscalerServiceClient = getAutoscalerServiceClient();
         if (autoscalerServiceClient != null) {
             try {
@@ -429,15 +429,14 @@ public class ServiceUtils {
 
             } catch (RemoteException e) {
                 String errorMsg = "Error while getting available deployment policies for cartridge type " +
-                        cartridgeType + ". Cause: " + e.getMessage();
-                ;
+                		cartridgeType+". Cause: "+e.getMessage();;
                 log.error(errorMsg, e);
                 throw new RestAPIException(errorMsg, e);
             }
         }
-
-        if (deploymentPolicies.length == 0) {
-            String errorMsg = "Cannot find any matching deployment policy for Cartridge [type] " + cartridgeType;
+        
+        if(deploymentPolicies.length == 0) {
+        	String errorMsg = "Cannot find any matching deployment policy for Cartridge [type] "+cartridgeType;
             log.error(errorMsg);
             throw new RestAPIException(errorMsg);
         }
@@ -445,7 +444,7 @@ public class ServiceUtils {
         return PojoConverter.populateDeploymentPolicyPojos(deploymentPolicies);
     }
 
-    public static org.apache.stratos.rest.endpoint.bean.autoscaler.policy.deployment.DeploymentPolicy
+    public static org.apache.stratos.rest.endpoint.bean.autoscaler.policy.deployment.DeploymentPolicy 
     getDeploymentPolicy(String deploymentPolicyId) throws RestAPIException {
 
         DeploymentPolicy deploymentPolicy = null;
@@ -455,15 +454,15 @@ public class ServiceUtils {
                 deploymentPolicy = autoscalerServiceClient.getDeploymentPolicy(deploymentPolicyId);
 
             } catch (RemoteException e) {
-                String errorMsg = "Error while getting deployment policy with id " +
-                        deploymentPolicyId + ". Cause: " + e.getMessage();
+                String errorMsg = "Error while getting deployment policy with id " + 
+                		deploymentPolicyId+". Cause: "+e.getMessage();
                 log.error(errorMsg, e);
                 throw new RestAPIException(errorMsg, e);
             }
         }
-
-        if (deploymentPolicy == null) {
-            String errorMsg = "Cannot find a matching deployment policy for [id] " + deploymentPolicyId;
+        
+        if(deploymentPolicy == null) {
+        	String errorMsg = "Cannot find a matching deployment policy for [id] "+deploymentPolicyId;
             log.error(errorMsg);
             throw new RestAPIException(errorMsg);
         }
@@ -471,18 +470,18 @@ public class ServiceUtils {
         return PojoConverter.populateDeploymentPolicyPojo(deploymentPolicy);
     }
 
-    public static PartitionGroup[] getPartitionGroups(String deploymentPolicyId)
-            throws RestAPIException {
+    public static PartitionGroup[] getPartitionGroups (String deploymentPolicyId)
+            throws RestAPIException{
 
-        org.apache.stratos.autoscaler.partition.PartitionGroup[] partitionGroups = null;
+        org.apache.stratos.autoscaler.partition.PartitionGroup [] partitionGroups = null;
         AutoscalerServiceClient autoscalerServiceClient = getAutoscalerServiceClient();
         if (autoscalerServiceClient != null) {
             try {
                 partitionGroups = autoscalerServiceClient.getPartitionGroups(deploymentPolicyId);
 
             } catch (RemoteException e) {
-                String errorMsg = "Error getting available partition groups for deployment policy id "
-                        + deploymentPolicyId + ". Cause: " + e.getMessage();
+                String errorMsg = "Error getting available partition groups for deployment policy id " 
+                		+ deploymentPolicyId+". Cause: "+e.getMessage();
                 log.error(errorMsg, e);
                 throw new RestAPIException(errorMsg, e);
             }
@@ -493,34 +492,34 @@ public class ServiceUtils {
 
     static Cartridge getAvailableCartridgeInfo(String cartridgeType, Boolean multiTenant, ConfigurationContext configurationContext) throws RestAPIException {
         List<Cartridge> cartridges = getAvailableCartridges(null, multiTenant, configurationContext);
-        for (Cartridge cartridge : cartridges) {
-            if (cartridge.getCartridgeType().equals(cartridgeType)) {
+        for(Cartridge cartridge : cartridges) {
+            if(cartridge.getCartridgeType().equals(cartridgeType)) {
                 return cartridge;
             }
         }
         String msg = "Unavailable cartridge type: " + cartridgeType;
         log.error(msg);
-        throw new RestAPIException(msg);
+        throw new RestAPIException(msg) ;
     }
 
-    static List<Cartridge> getAvailableLbCartridges(Boolean multiTenant,
-                                                    ConfigurationContext configurationContext) throws RestAPIException {
-        List<Cartridge> cartridges = getAvailableCartridges(null, multiTenant,
-                configurationContext);
-        List<Cartridge> lbCartridges = new ArrayList<Cartridge>();
-        for (Cartridge cartridge : cartridges) {
-            if (cartridge.isLoadBalancer()) {
-                lbCartridges.add(cartridge);
-            }
-        }
-
+	static List<Cartridge> getAvailableLbCartridges(Boolean multiTenant,
+			ConfigurationContext configurationContext) throws RestAPIException {
+		List<Cartridge> cartridges = getAvailableCartridges(null, multiTenant,
+				configurationContext);
+		List<Cartridge> lbCartridges = new ArrayList<Cartridge>();
+		for (Cartridge cartridge : cartridges) {
+			if (cartridge.isLoadBalancer()) {
+				lbCartridges.add(cartridge);
+			}
+		}
+		
 		/*if(lbCartridges == null || lbCartridges.isEmpty()) {
 			String msg = "Load balancer Cartridges are not available.";
 	        log.error(msg);
 	        throw new RestAPIException(msg) ;
 		}*/
-        return lbCartridges;
-    }
+		return lbCartridges;
+	}
 
     static List<Cartridge> getAvailableCartridges(String cartridgeSearchString, Boolean multiTenant, ConfigurationContext configurationContext) throws RestAPIException {
         List<Cartridge> cartridges = new ArrayList<Cartridge>();
@@ -581,12 +580,13 @@ public class ServiceUtils {
                     //cartridge.setStatus(CartridgeConstants.NOT_SUBSCRIBED);
                     cartridge.setCartridgeAlias("-");
                     cartridge.setPersistence(cartridgeInfo.getPersistence());
+                    cartridge.setServiceGroup(cartridgeInfo.getServiceGroup());
 
-                    if (cartridgeInfo.getProperties() != null) {
-                        for (Property property : cartridgeInfo.getProperties()) {
-                            if (property.getName().equals("load.balancer")) {
-                                cartridge.setLoadBalancer(true);
-                            }
+                    if(cartridgeInfo.getLbConfig() != null && cartridgeInfo.getProperties() != null) {
+                        for(Property property: cartridgeInfo.getProperties()) {
+                        if(property.getName().equals("load.balancer")) {
+                            cartridge.setLoadBalancer(true);
+                        }
                         }
                     }
                     //cartridge.setActiveInstances(0);
@@ -612,7 +612,7 @@ public class ServiceUtils {
                 }
             }
         } catch (Exception e) {
-            String msg = "Error while getting available cartridges. Cause: " + e.getMessage();
+            String msg = "Error while getting available cartridges. Cause: "+e.getMessage();
             log.error(msg, e);
             throw new RestAPIException(msg, e);
         }
@@ -627,17 +627,17 @@ public class ServiceUtils {
     }
 
     private static boolean isAlreadySubscribed(String cartridgeType,
-                                               int tenantId) {
-
-        Collection<CartridgeSubscription> subscriptionList = cartridgeSubsciptionManager.isCartridgeSubscribed(tenantId, cartridgeType);
-        if (subscriptionList == null || subscriptionList.isEmpty()) {
-            return false;
-        } else {
-            return true;
-        }
-    }
+			int tenantId) {
+		
+    	Collection<CartridgeSubscription> subscriptionList = cartridgeSubsciptionManager.isCartridgeSubscribed(tenantId, cartridgeType);
+    	if(subscriptionList == null || subscriptionList.isEmpty()){
+    		return false;	
+    	}else {
+    		return true;
+    	}		
+	}
 
-    public static List<ServiceDefinitionBean> getdeployedServiceInformation() throws RestAPIException {
+    public static List<ServiceDefinitionBean> getdeployedServiceInformation () throws RestAPIException {
 
         Collection<Service> services = null;
 
@@ -645,7 +645,7 @@ public class ServiceUtils {
             services = serviceDeploymentManager.getServices();
 
         } catch (ADCException e) {
-            String msg = "Unable to get deployed service information. Cause: " + e.getMessage();
+            String msg = "Unable to get deployed service information. Cause: "+e.getMessage();
             log.error(msg, e);
             throw new RestAPIException(msg, e);
         }
@@ -657,7 +657,7 @@ public class ServiceUtils {
         return null;
     }
 
-    public static ServiceDefinitionBean getDeployedServiceInformation(String type) throws RestAPIException {
+    public static ServiceDefinitionBean getDeployedServiceInformation (String type) throws RestAPIException {
 
         Service service = null;
 
@@ -665,7 +665,7 @@ public class ServiceUtils {
             service = serviceDeploymentManager.getService(type);
 
         } catch (ADCException e) {
-            String msg = "Unable to get deployed service information for [type]: " + type + ". Cause: " + e.getMessage();
+            String msg = "Unable to get deployed service information for [type]: " + type+". Cause: "+e.getMessage();
             log.error(msg, e);
             throw new RestAPIException(msg, e);
         }
@@ -677,7 +677,7 @@ public class ServiceUtils {
         return new ServiceDefinitionBean();
     }
 
-    public static List<Cartridge> getActiveDeployedServiceInformation(ConfigurationContext configurationContext) throws RestAPIException {
+    public static List<Cartridge> getActiveDeployedServiceInformation (ConfigurationContext configurationContext) throws RestAPIException {
 
         Collection<Service> services = null;
 
@@ -685,7 +685,7 @@ public class ServiceUtils {
             services = serviceDeploymentManager.getServices();
 
         } catch (ADCException e) {
-            String msg = "Unable to get deployed service information. Cause: " + e.getMessage();
+            String msg = "Unable to get deployed service information. Cause: "+e.getMessage();
             log.error(msg, e);
             throw new RestAPIException(msg, e);
         }
@@ -693,21 +693,21 @@ public class ServiceUtils {
         List<Cartridge> availableMultitenantCartridges = new ArrayList<Cartridge>();
         int tenantId = ApplicationManagementUtil.getTenantId(configurationContext);
         //getting the services for the tenantId
-        for (Service service : services) {
+        for(Service service : services) {
             String tenantRange = service.getTenantRange();
-            if (tenantRange.equals(Constants.TENANT_RANGE_ALL)) {
+            if(tenantRange.equals(Constants.TENANT_RANGE_ALL)) {
                 //check whether any active instances found for this service in the Topology
 
                 Cluster cluster = TopologyManager.getTopology().getService(service.getType()).
-                        getCluster(service.getClusterId());
+                                        getCluster(service.getClusterId());
                 boolean activeMemberFound = false;
-                for (Member member : cluster.getMembers()) {
-                    if (member.isActive()) {
+                for(Member member : cluster.getMembers()) {
+                    if(member.isActive()) {
                         activeMemberFound = true;
                         break;
                     }
                 }
-                if (activeMemberFound) {
+                if(activeMemberFound) {
                     availableMultitenantCartridges.add(getAvailableCartridgeInfo(null, true, configurationContext));
                 }
             } else {
@@ -724,7 +724,7 @@ public class ServiceUtils {
         return availableMultitenantCartridges;
     }
 
-    static List<Cartridge> getSubscriptions(String cartridgeSearchString, ConfigurationContext configurationContext) throws RestAPIException {
+	static List<Cartridge> getSubscriptions (String cartridgeSearchString, String serviceGroup, ConfigurationContext configurationContext) throws RestAPIException {
 
         List<Cartridge> cartridges = new ArrayList<Cartridge>();
 
@@ -741,33 +741,37 @@ public class ServiceUtils {
             if (subscriptions != null && !subscriptions.isEmpty()) {
 
                 for (CartridgeSubscription subscription : subscriptions) {
-
+                	
                     if (!cartridgeMatches(subscription.getCartridgeInfo(), subscription, searchPattern)) {
                         continue;
                     }
                     Cartridge cartridge = getCartridgeFromSubscription(subscription);
                     if (cartridge == null) {
-                        continue;
-                    }
+                		continue;
+                	}
                     Cluster cluster = TopologyClusterInformationModel.getInstance().getCluster(ApplicationManagementUtil.getTenantId(configurationContext)
-                            , cartridge.getCartridgeType(), cartridge.getCartridgeAlias());
+                            ,cartridge.getCartridgeType(), cartridge.getCartridgeAlias());
                     String cartridgeStatus = "Inactive";
                     int activeMemberCount = 0;
-                    if (cluster != null) {
-                        Collection<Member> members = cluster.getMembers();
-                        for (Member member : members) {
-                            if (member.isActive()) {
-                                cartridgeStatus = "Active";
-                                activeMemberCount++;
-                            }
-                        }
-                    }
+					if (cluster != null) {
+						Collection<Member> members = cluster.getMembers();
+						for (Member member : members) {
+							if (member.isActive()) {
+								cartridgeStatus = "Active";
+								activeMemberCount++;
+							}
+						}
+					}
                     cartridge.setActiveInstances(activeMemberCount);
-                    cartridge.setStatus(cartridgeStatus);
+					cartridge.setStatus(cartridgeStatus);
 
                     // Ignoring the LB cartridges since they are not shown to the user.
-                    if (cartridge.isLoadBalancer())
+                    if(cartridge.isLoadBalancer())
                         continue;
+                    if(StringUtils.isNotEmpty(serviceGroup) && cartridge.getServiceGroup() != null &&
+                    		!cartridge.getServiceGroup().equals(serviceGroup)){
+                        continue;
+                    }
                     cartridges.add(cartridge);
                 }
             } else {
@@ -776,7 +780,7 @@ public class ServiceUtils {
                 }
             }
         } catch (Exception e) {
-            String msg = "Error while getting subscribed cartridges. Cause: " + e.getMessage();
+            String msg = "Error while getting subscribed cartridges. Cause: "+e.getMessage();
             log.error(msg, e);
             throw new RestAPIException(msg, e);
         }
@@ -796,28 +800,28 @@ public class ServiceUtils {
         return cartridges;
     }
 
-
+    
     static Cartridge getSubscription(String cartridgeAlias, ConfigurationContext configurationContext) throws RestAPIException {
-
-        Cartridge cartridge = getCartridgeFromSubscription(cartridgeSubsciptionManager.getCartridgeSubscription(ApplicationManagementUtil.
-                getTenantId(configurationContext), cartridgeAlias));
-
-        if (cartridge == null) {
-            String message = "Unregistered [alias]: " + cartridgeAlias + "! Please enter a valid alias.";
-            log.error(message);
-            throw new RestAPIException(Response.Status.NOT_FOUND, message);
-        }
+    	
+    	Cartridge cartridge =  getCartridgeFromSubscription(cartridgeSubsciptionManager.getCartridgeSubscription(ApplicationManagementUtil.
+                    getTenantId(configurationContext), cartridgeAlias));
+    	
+    	if (cartridge == null) {
+    		String message = "Unregistered [alias]: "+cartridgeAlias+"! Please enter a valid alias.";
+    		log.error(message);
+			throw new RestAPIException(Response.Status.NOT_FOUND, message);
+    	}
         Cluster cluster = TopologyClusterInformationModel.getInstance().getCluster(ApplicationManagementUtil.getTenantId(configurationContext)
-                , cartridge.getCartridgeType(), cartridge.getCartridgeAlias());
+                ,cartridge.getCartridgeType(), cartridge.getCartridgeAlias());
         String cartridgeStatus = "Inactive";
         int activeMemberCount = 0;
 
         // cluster might not be created yet, so need to check
         if (cluster != null) {
             Collection<Member> members = cluster.getMembers();
-            if (members != null) {
+            if (members != null ) {
                 for (Member member : members) {
-                    if (member.isActive()) {
+                    if(member.isActive()) {
                         cartridgeStatus = "Active";
                         activeMemberCount++;
                     }
@@ -826,90 +830,92 @@ public class ServiceUtils {
         }
 
         cartridge.setActiveInstances(activeMemberCount);
-        cartridge.setStatus(cartridgeStatus);
-        return cartridge;
-
+		cartridge.setStatus(cartridgeStatus);
+		return cartridge;
+    	
     }
 
     static int getActiveInstances(String cartridgeType, String cartridgeAlias, ConfigurationContext configurationContext) throws RestAPIException {
-        int noOfActiveInstances = 0;
+    	int noOfActiveInstances = 0;
         Cluster cluster = TopologyClusterInformationModel.getInstance().getCluster(ApplicationManagementUtil.getTenantId(configurationContext)
-                , cartridgeType, cartridgeAlias);
-
-        if (cluster == null) {
-            String message = "No Cluster found for cartridge [type] " + cartridgeType + ", [alias] " + cartridgeAlias;
-            log.error(message);
-            throw new RestAPIException(message);
+                ,cartridgeType , cartridgeAlias);
+        
+        if(cluster == null) {
+        	String message = "No Cluster found for cartridge [type] "+cartridgeType+", [alias] "+cartridgeAlias;
+			log.error(message);
+			throw new RestAPIException(message);
         }
-
-        for (Member member : cluster.getMembers()) {
-            if (member.getStatus().toString().equals(MemberStatus.Activated)) {
-                noOfActiveInstances++;
+        
+        for(Member member : cluster.getMembers()) {
+            if(member.getStatus().toString().equals(MemberStatus.Activated)) {
+                noOfActiveInstances ++;
             }
         }
-        return noOfActiveInstances;
+		return noOfActiveInstances;
     }
+    
+	private static Cartridge getCartridgeFromSubscription(CartridgeSubscription subscription) throws RestAPIException {
 
-    private static Cartridge getCartridgeFromSubscription(CartridgeSubscription subscription) throws RestAPIException {
-
-        if (subscription == null) {
-            return null;
-        }
-        try {
-            Cartridge cartridge = new Cartridge();
-            cartridge.setCartridgeType(subscription.getCartridgeInfo()
-                    .getType());
-            cartridge.setMultiTenant(subscription.getCartridgeInfo()
-                    .getMultiTenant());
-            cartridge
-                    .setProvider(subscription.getCartridgeInfo().getProvider());
-            cartridge.setVersion(subscription.getCartridgeInfo().getVersion());
-            cartridge.setDescription(subscription.getCartridgeInfo()
-                    .getDescription());
-            cartridge.setDisplayName(subscription.getCartridgeInfo()
-                    .getDisplayName());
-            cartridge.setCartridgeAlias(subscription.getAlias());
-            cartridge.setHostName(subscription.getHostName());
-            cartridge.setMappedDomain(subscription.getMappedDomain());
-            if (subscription.getRepository() != null) {
-                cartridge.setRepoURL(subscription.getRepository().getUrl());
-            }
+		if (subscription == null) {
+			return null;
+		}
+		try {
+			Cartridge cartridge = new Cartridge();
+			cartridge.setCartridgeType(subscription.getCartridgeInfo()
+					.getType());
+			cartridge.setMultiTenant(subscription.getCartridgeInfo()
+					.getMultiTenant());
+			cartridge
+					.setProvider(subscription.getCartridgeInfo().getProvider());
+			cartridge.setVersion(subscription.getCartridgeInfo().getVersion());
+			cartridge.setDescription(subscription.getCartridgeInfo()
+					.getDescription());
+			cartridge.setDisplayName(subscription.getCartridgeInfo()
+					.getDisplayName());
+			cartridge.setCartridgeAlias(subscription.getAlias());
+			cartridge.setHostName(subscription.getHostName());
+			cartridge.setMappedDomain(subscription.getMappedDomain());
+			if (subscription.getRepository() != null) {
+				cartridge.setRepoURL(subscription.getRepository().getUrl());
+			}
 
-            if (subscription instanceof DataCartridgeSubscription) {
-                DataCartridgeSubscription dataCartridgeSubscription = (DataCartridgeSubscription) subscription;
-                cartridge.setDbHost(dataCartridgeSubscription.getDBHost());
-                cartridge.setDbUserName(dataCartridgeSubscription
-                        .getDBUsername());
-                cartridge
-                        .setPassword(dataCartridgeSubscription.getDBPassword());
-            }
+			if (subscription instanceof DataCartridgeSubscription) {
+				DataCartridgeSubscription dataCartridgeSubscription = (DataCartridgeSubscription) subscription;
+				cartridge.setDbHost(dataCartridgeSubscription.getDBHost());
+				cartridge.setDbUserName(dataCartridgeSubscription
+						.getDBUsername());
+				cartridge
+						.setPassword(dataCartridgeSubscription.getDBPassword());
+			}
 
-            if (subscription.getLbClusterId() != null
-                    && !subscription.getLbClusterId().isEmpty()) {
-                cartridge.setLbClusterId(subscription.getLbClusterId());
-            }
+			if (subscription.getLbClusterId() != null
+					&& !subscription.getLbClusterId().isEmpty()) {
+				cartridge.setLbClusterId(subscription.getLbClusterId());
+			}
 
-            cartridge.setStatus(subscription.getSubscriptionStatus());
-            cartridge.setPortMappings(subscription.getCartridgeInfo()
-                    .getPortMappings());
+			cartridge.setStatus(subscription.getSubscriptionStatus());
+			cartridge.setPortMappings(subscription.getCartridgeInfo()
+					.getPortMappings());
 
-            if (subscription.getCartridgeInfo().getProperties() != null) {
-                for (Property property : subscription.getCartridgeInfo().getProperties()) {
-                    if (property.getName().equals("load.balancer")) {
+            if(subscription.getCartridgeInfo().getLbConfig() != null && subscription.getCartridgeInfo().getProperties() != null) {
+                for(Property property: subscription.getCartridgeInfo().getProperties()) {
+                    if(property.getName().equals("load.balancer")) {
                         cartridge.setLoadBalancer(true);
                     }
                 }
             }
-
-            return cartridge;
-
-        } catch (Exception e) {
-            String msg = "Unable to extract the Cartridge from subscription. Cause: " + e.getMessage();
-            log.error(msg);
-            throw new RestAPIException(msg);
-        }
-
-    }
+            if(subscription.getCartridgeInfo().getServiceGroup() != null) {
+            	cartridge.setServiceGroup(subscription.getCartridgeInfo().getServiceGroup());
+            }
+			return cartridge;
+			
+		} catch (Exception e) {
+			String msg = "Unable to extract the Cartridge from subscription. Cause: "+e.getMessage();
+			log.error(msg);
+			throw new RestAPIException(msg);
+		}
+		
+	}
 
     static Pattern getSearchStringPattern(String searchString) {
         if (log.isDebugEnabled()) {
@@ -962,17 +968,31 @@ public class ServiceUtils {
         }
         return true;
     }
-
+    
     public static CartridgeSubscription getCartridgeSubscription(String alias, ConfigurationContext configurationContext) {
-        return cartridgeSubsciptionManager.getCartridgeSubscription(ApplicationManagementUtil.getTenantId(configurationContext), alias);
+    	return cartridgeSubsciptionManager.getCartridgeSubscription(ApplicationManagementUtil.getTenantId(configurationContext), alias);
     }
-  
-    static SubscriptionInfo subscribe(CartridgeInfoBean cartridgeInfoBean, ConfigurationContext configurationContext, String tenantUsername, String tenantDomain) 
-    		throws RestAPIException{
+
+    static SubscriptionInfo subscribeToCartridge (CartridgeInfoBean cartridgeInfoBean, ConfigurationContext configurationContext, String tenantUsername,
+                                                  String tenantDomain) throws RestAPIException {
+
+        try {
+            return subscribe(cartridgeInfoBean, configurationContext, tenantUsername, tenantDomain);
+
+        } catch (Exception e) {
+            throw new RestAPIException(e.getMessage(), e);
+        }
+    }
+
+    private static SubscriptionInfo subscribe (CartridgeInfoBean cartridgeInfoBean, ConfigurationContext configurationContext, String tenantUsername, String tenantDomain)
+                                       throws ADCException, PolicyException, UnregisteredCartridgeException,
+            InvalidCartridgeAliasException, DuplicateCartridgeAliasException, RepositoryRequiredException,
+            AlreadySubscribedException, RepositoryCredentialsRequiredException, InvalidRepositoryException,
+            RepositoryTransportException, RestAPIException {
 
         SubscriptionData subscriptionData = new SubscriptionData();
         subscriptionData.setCartridgeType(cartridgeInfoBean.getCartridgeType());
-        subscriptionData.setCartridgeAlias(cartridgeInfoBean.getAlias().trim());
+        subscriptionData.setCartridgeAlias(cartridgeInfoBean.getAlias().trim());        
         subscriptionData.setAutoscalingPolicyName(cartridgeInfoBean.getAutoscalePolicy());
         subscriptionData.setDeploymentPolicyName(cartridgeInfoBean.getDeploymentPolicy());
         subscriptionData.setTenantDomain(tenantDomain);
@@ -984,58 +1004,40 @@ public class ServiceUtils {
         subscriptionData.setRepositoryPassword(cartridgeInfoBean.getRepoPassword());
         subscriptionData.setCommitsEnabled(cartridgeInfoBean.isCommitsEnabled());
         subscriptionData.setServiceGroup(cartridgeInfoBean.getServiceGroup());
-
-        PersistenceBean persistenceBean = cartridgeInfoBean.getPersistence();
-        if(persistenceBean != null) {
-            subscriptionData.setPersistence(PojoConverter.getPersistence(persistenceBean));
-        }
-        if(cartridgeInfoBean.getProperty() != null){
-            subscriptionData.setProperties(PojoConverter.getProperties(cartridgeInfoBean.getProperty()));
-        }
-
-        /*
+        //subscriptionData.setServiceName(cartridgeInfoBean.getServiceName()); // For MT cartridges
+        
         if (cartridgeInfoBean.isPersistanceRequired()) {
-        if (cartridgeInfoBean.getPersistence() != null) {
             // Add persistence related properties to PersistenceContext
             PersistenceContext persistenceContext = new PersistenceContext();
             persistenceContext.setPersistanceRequiredProperty(IS_VOLUME_REQUIRED, String.valueOf(cartridgeInfoBean.isPersistanceRequired()));
             persistenceContext.setSizeProperty(VOLUME_SIZE, cartridgeInfoBean.getSize());
             persistenceContext.setDeleteOnTerminationProperty(SHOULD_DELETE_VOLUME, String.valueOf(cartridgeInfoBean.isRemoveOnTermination()));
-            if(cartridgeInfoBean.getVolumeId() != null) {
-                persistenceContext.setVolumeIdProperty(VOLUME_ID, String.valueOf(cartridgeInfoBean.getVolumeId()));
-            }
             subscriptionData.setPersistanceCtxt(persistenceContext);
         }
-        */
+
         //subscribe
-        SubscriptionInfo subscriptionInfo = null;
-        try{
-        	subscriptionInfo = cartridgeSubsciptionManager.subscribeToCartridgeWithProperties(subscriptionData);
-        }catch(Exception e){
-        	throw new RestAPIException(e.getMessage(), e);
-        }
-        
-        return subscriptionInfo;
+        return cartridgeSubsciptionManager.subscribeToCartridgeWithProperties(subscriptionData);
+
     }
 
-    public static org.apache.stratos.rest.endpoint.bean.topology.Cluster getCluster(String cartridgeType, String subscriptionAlias, ConfigurationContext configurationContext) throws RestAPIException {
+    public static org.apache.stratos.rest.endpoint.bean.topology.Cluster getCluster (String cartridgeType, String subscriptionAlias, ConfigurationContext configurationContext) throws RestAPIException {
 
         Cluster cluster = TopologyClusterInformationModel.getInstance().getCluster(ApplicationManagementUtil.getTenantId(configurationContext)
-                , cartridgeType, subscriptionAlias);
-        if (cluster == null) {
-            throw new RestAPIException("No matching cluster found for [cartridge type]: " + cartridgeType + " [alias] " + subscriptionAlias);
-        } else {
+                ,cartridgeType , subscriptionAlias);
+        if(cluster == null) {
+            throw new RestAPIException("No matching cluster found for [cartridge type]: "+cartridgeType+ " [alias] "+subscriptionAlias);
+        } else{
             return PojoConverter.populateClusterPojos(cluster);
         }
     }
 
-    public static org.apache.stratos.rest.endpoint.bean.topology.Cluster[] getClustersForTenant(ConfigurationContext configurationContext) {
+    public static org.apache.stratos.rest.endpoint.bean.topology.Cluster[] getClustersForTenant (ConfigurationContext configurationContext) {
 
         Set<Cluster> clusterSet = TopologyClusterInformationModel.getInstance().getClusters(ApplicationManagementUtil.
                 getTenantId(configurationContext), null);
         ArrayList<org.apache.stratos.rest.endpoint.bean.topology.Cluster> clusters =
                 new ArrayList<org.apache.stratos.rest.endpoint.bean.topology.Cluster>();
-        for (Cluster cluster : clusterSet) {
+        for(Cluster cluster : clusterSet) {
             clusters.add(PojoConverter.populateClusterPojos(cluster));
         }
         org.apache.stratos.rest.endpoint.bean.topology.Cluster[] arrCluster =
@@ -1045,22 +1047,38 @@ public class ServiceUtils {
 
     }
 
-    public static org.apache.stratos.rest.endpoint.bean.topology.Cluster[] getClustersForTenantAndCartridgeType(ConfigurationContext configurationContext,
-                                                                                                                String cartridgeType) {
+    public static org.apache.stratos.rest.endpoint.bean.topology.Cluster[] getClustersForTenantAndCartridgeType (ConfigurationContext configurationContext,
+                                                                  String cartridgeType) {
 
         Set<Cluster> clusterSet = TopologyClusterInformationModel.getInstance().getClusters(ApplicationManagementUtil.
                 getTenantId(configurationContext), cartridgeType);
         List<org.apache.stratos.rest.endpoint.bean.topology.Cluster> clusters =
                 new ArrayList<org.apache.stratos.rest.endpoint.bean.topology.Cluster>();
-        for (Cluster cluster : clusterSet) {
+        for(Cluster cluster : clusterSet) {
             clusters.add(PojoConverter.populateClusterPojos(cluster));
         }
-        org.apache.stratos.rest.endpoint.bean.topology.Cluster[] arrCluster =
+         org.apache.stratos.rest.endpoint.bean.topology.Cluster[] arrCluster =
                 new org.apache.stratos.rest.endpoint.bean.topology.Cluster[clusters.size()];
         arrCluster = clusters.toArray(arrCluster);
         return arrCluster;
 
     }
+    
+	public static org.apache.stratos.rest.endpoint.bean.topology.Cluster[] getClustersForCartridgeType(String cartridgeType) {
+
+		Set<Cluster> clusterSet = TopologyClusterInformationModel
+				.getInstance()
+				.getClusters(cartridgeType);
+		List<org.apache.stratos.rest.endpoint.bean.topology.Cluster> clusters = new ArrayList<org.apache.stratos.rest.endpoint.bean.topology.Cluster>();
+		for (Cluster cluster : clusterSet) {
+			clusters.add(PojoConverter.populateClusterPojos(cluster));
+		}
+		org.apache.stratos.rest.endpoint.bean.topology.Cluster[] arrCluster = new org.apache.stratos.rest.endpoint.bean.topology.Cluster[clusters
+				.size()];
+		arrCluster = clusters.toArray(arrCluster);
+		return arrCluster;
+
+	}
 
     // return the cluster id for the lb. This is a temp fix.
     /*private static String subscribeToLb(String cartridgeType, String loadBalancedCartridgeType, String lbAlias,
@@ -1083,7 +1101,7 @@ public class ServiceUtils {
             subscriptionData.setTenantId(ApplicationManagementUtil.getTenantId(configurationContext));
             subscriptionData.setTenantAdminUsername(userName);
             subscriptionData.setRepositoryType("git");
-            //subscriptionData.setPayloadProperties(props);
+            //subscriptionData.setProperties(props);
             subscriptionData.setPrivateRepository(false);
 
             cartridgeSubscription =
@@ -1093,7 +1111,7 @@ public class ServiceUtils {
             cartridgeSubscription.getPayloadData().add("LOAD_BALANCED_SERVICE_TYPE", loadBalancedCartridgeType);
 
             Properties lbProperties = new Properties();
-            lbProperties.setPayloadProperties(props);
+            lbProperties.setProperties(props);
             cartridgeSubsciptionManager.registerCartridgeSubscription(cartridgeSubscription, lbProperties);
             
             if(log.isDebugEnabled()) {
@@ -1114,8 +1132,8 @@ public class ServiceUtils {
             cartridgeSubsciptionManager.unsubscribeFromCartridge(tenantDomain, alias);
 
         } catch (ADCException e) {
-            String msg = "Failed to unsubscribe from [alias] " + alias + ". Cause: " + e.getMessage();
-            log.error(msg, e);
+        	String msg = "Failed to unsubscribe from [alias] "+alias+". Cause: "+ e.getMessage();
+        	log.error(msg, e);
             throw new RestAPIException(msg, e);
 
         } catch (NotSubscribedException e) {
@@ -1127,26 +1145,27 @@ public class ServiceUtils {
         stratosAdminResponse.setMessage("Successfully terminated the subscription with alias " + alias);
         return stratosAdminResponse;
     }
-
+    
     /**
-     * Super tenant will deploy multitenant service.
-     * <p/>
+     * 
+     * Super tenant will deploy multitenant service. 
+     * 
      * get domain , subdomain as well..
-     *
      * @param clusterDomain
      * @param clusterSubdomain
+     * 
      */
     static StratosAdminResponse deployService(String cartridgeType, String alias, String autoscalingPolicy, String deploymentPolicy,
                                               String tenantDomain, String tenantUsername, int tenantId, String clusterDomain, String clusterSubdomain, String tenantRange) throws RestAPIException {
-        log.info("Deploying service..");
-        try {
-            serviceDeploymentManager.deployService(cartridgeType, autoscalingPolicy, deploymentPolicy, tenantId, tenantRange, tenantDomain, tenantUsername);
+    	log.info("Deploying service..");
+    	try {
+    		serviceDeploymentManager.deployService(cartridgeType, autoscalingPolicy, deploymentPolicy, tenantId, tenantRange, tenantDomain, tenantUsername);
 
-        } catch (Exception e) {
+		} catch (Exception e) {
             String msg = String.format("Failed to deploy the Service [Cartridge type] %s [alias] %s . Cause: %s", cartridgeType, alias, e.getMessage());
             log.error(msg, e);
             throw new RestAPIException(msg, e);
-        }
+		}
 
         StratosAdminResponse stratosAdminResponse = new StratosAdminResponse();
         stratosAdminResponse.setMessage("Successfully deployed service cluster definition with type " + cartridgeType);
@@ -1159,7 +1178,7 @@ public class ServiceUtils {
             serviceDeploymentManager.undeployService(serviceType);
 
         } catch (Exception e) {
-            String msg = "Failed to undeploy service cluster definition of type " + serviceType + " Cause: " + e.getMessage();
+            String msg = "Failed to undeploy service cluster definition of type " + serviceType+" Cause: "+e.getMessage();
             log.error(msg, e);
             throw new RestAPIException(msg, e);
         }
@@ -1181,7 +1200,7 @@ public class ServiceUtils {
             throw new RestAPIException(msg, e);
         }
     }
-
+    
     static StratosAdminResponse synchronizeRepository(CartridgeSubscription cartridgeSubscription) throws RestAPIException {
         try {
             RepositoryNotification repoNotification = new RepositoryNotification();
@@ -1191,7 +1210,7 @@ public class ServiceUtils {
             log.error(msg, e);
             throw new RestAPIException(msg, e);
         }
-
+        
         StratosAdminResponse stratosAdminResponse = new StratosAdminResponse();
         stratosAdminResponse.setMessage("Successfully sent the repository synchronization request for " + cartridgeSubscription.getAlias());
         return stratosAdminResponse;
@@ -1213,8 +1232,7 @@ public class ServiceUtils {
             }
 
             for (org.apache.stratos.rest.endpoint.bean.subscription.domain.SubscriptionDomainBean subscriptionDomain : request.domains) {
-				
-            	cartridgeSubsciptionManager.addSubscriptionDomain(tenantId, subscriptionAlias, 
+                cartridgeSubsciptionManager.addSubscriptionDomain(tenantId, subscriptionAlias,
             			subscriptionDomain.domainName, subscriptionDomain.applicationContext);
 			}
         } catch (Exception e) {
@@ -1234,7 +1252,7 @@ public class ServiceUtils {
             SubscriptionDomainBean subscriptionDomain = PojoConverter.populateSubscriptionDomainPojo(cartridgeSubsciptionManager.getSubscriptionDomain(tenantId,
                     subscriptionAlias, domain));
 
-            if ( subscriptionDomain.domainName != null ) {
+            if (subscriptionDomain.domainName != null) {
                 return true;
             } else {
                 return false;
diff --git a/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/services/StratosAdmin.java b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/services/StratosAdmin.java
index 67878db..1013511 100644
--- a/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/services/StratosAdmin.java
+++ b/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/services/StratosAdmin.java
@@ -43,6 +43,7 @@ import org.apache.stratos.rest.endpoint.bean.autoscaler.policy.deployment.Deploy
 import org.apache.stratos.rest.endpoint.bean.cartridge.definition.CartridgeDefinitionBean;
 import org.apache.stratos.rest.endpoint.bean.cartridge.definition.ServiceDefinitionBean;
 import org.apache.stratos.rest.endpoint.bean.repositoryNotificationInfoBean.Payload;
+import org.apache.stratos.rest.endpoint.bean.repositoryNotificationInfoBean.Repository;
 import org.apache.stratos.rest.endpoint.bean.subscription.domain.SubscriptionDomainBean;
 import org.apache.stratos.rest.endpoint.bean.topology.Cluster;
 import org.apache.stratos.rest.endpoint.exception.RestAPIException;
@@ -74,7 +75,7 @@ import java.util.UUID;
 public class StratosAdmin extends AbstractAdmin {
     private static Log log = LogFactory.getLog(StratosAdmin.class);
     @Context
-    HttpServletRequest httpServletRequest;
+          HttpServletRequest httpServletRequest;
 
     @POST
     @Path("/init")
@@ -82,6 +83,7 @@ public class StratosAdmin extends AbstractAdmin {
     public StratosAdminResponse initialize ()
             throws RestAPIException {
 
+
         StratosAdminResponse stratosAdminResponse = new StratosAdminResponse();
         stratosAdminResponse.setMessage("Successfully logged in");
         return stratosAdminResponse;
@@ -312,7 +314,18 @@ public class StratosAdmin extends AbstractAdmin {
     @Consumes("application/json")
     @AuthorizationAction("/permission/protected/manage/monitor/tenants")
     public Cartridge[] getSubscribedCartridges() throws RestAPIException {
-        List<Cartridge> cartridgeList = ServiceUtils.getSubscriptions(null, getConfigContext());
+        List<Cartridge> cartridgeList = ServiceUtils.getSubscriptions(null, null, getConfigContext());
+        // Following is very important when working with axis2
+        return cartridgeList.isEmpty() ? new Cartridge[0] : cartridgeList.toArray(new Cartridge[cartridgeList.size()]);
+    }
+
+    @GET
+    @Path("/cartridge/list/subscribed/group/{serviceGroup}")
+    @Produces("application/json")
+    @Consumes("application/json")
+    @AuthorizationAction("/permission/protected/manage/monitor/tenants")
+    public Cartridge[] getSubscribedCartridgesForServiceGroup(@PathParam("serviceGroup") String serviceGroup) throws RestAPIException {
+        List<Cartridge> cartridgeList = ServiceUtils.getSubscriptions(null, serviceGroup, getConfigContext());
         // Following is very important when working with axis2
         return cartridgeList.isEmpty() ? new Cartridge[0] : cartridgeList.toArray(new Cartridge[cartridgeList.size()]);
     }
@@ -363,7 +376,7 @@ public class StratosAdmin extends AbstractAdmin {
     @AuthorizationAction("/permission/protected/manage/monitor/tenants")
     public SubscriptionInfo subscribe(CartridgeInfoBean cartridgeInfoBean) throws RestAPIException {
 
-        return ServiceUtils.subscribe(cartridgeInfoBean,
+        return ServiceUtils.subscribeToCartridge(cartridgeInfoBean,
                 getConfigContext(),
                 getUsername(),
                 getTenantDomain());
@@ -385,6 +398,15 @@ public class StratosAdmin extends AbstractAdmin {
     @Consumes("application/json")
     @AuthorizationAction("/permission/protected/manage/monitor/tenants")
     public Cluster[] getClusters(@PathParam("cartridgeType") String cartridgeType) throws RestAPIException {
+        return ServiceUtils.getClustersForCartridgeType(cartridgeType);
+    }
+    
+    @GET
+    @Path("/cluster/service/{cartridgeType}/")
+    @Produces("application/json")
+    @Consumes("application/json")
+    @AuthorizationAction("/permission/protected/manage/monitor/tenants")
+    public Cluster[] getServiceClusters(@PathParam("cartridgeType") String cartridgeType) throws RestAPIException {
 
         return ServiceUtils.getClustersForTenantAndCartridgeType(getConfigContext(), cartridgeType);
     }
@@ -408,7 +430,7 @@ public class StratosAdmin extends AbstractAdmin {
     public Cluster getCluster(@PathParam("clusterId") String clusterId) throws RestAPIException {
     	Cluster cluster = null;
     	if(log.isDebugEnabled()) {
-    		log.debug("Finding cluster for [id]: "+clusterId);
+            log.debug("Finding cluster for [id]: "+clusterId);
     	}
         Cluster[] clusters = ServiceUtils.getClustersForTenant(getConfigContext());
         if(log.isDebugEnabled()) {
@@ -431,7 +453,9 @@ public class StratosAdmin extends AbstractAdmin {
     @Consumes("application/json")
     @AuthorizationAction("/permission/protected/manage/monitor/tenants")
     public StratosAdminResponse unsubscribe(String alias) throws RestAPIException {
+
         return ServiceUtils.unsubscribe(alias, getTenantDomain());
+
     }
 
     @POST
@@ -1025,8 +1049,8 @@ public class StratosAdmin extends AbstractAdmin {
     @Consumes("application/json")
     @AuthorizationAction("/permission/protected/manage/monitor/tenants")
     public Response addSubscriptionDomains(@PathParam("cartridgeType") String cartridgeType,
-                                           @PathParam("subscriptionAlias") String subscriptionAlias,
-                                           SubscriptionDomainRequest request) throws RestAPIException {
+                                                       @PathParam("subscriptionAlias") String subscriptionAlias,
+                                                       SubscriptionDomainRequest request) throws RestAPIException {
 
         StratosAdminResponse stratosAdminResponse = ServiceUtils.addSubscriptionDomains(getConfigContext(), cartridgeType, subscriptionAlias, request);
         return Response.ok().entity(stratosAdminResponse).build();
@@ -1037,7 +1061,7 @@ public class StratosAdmin extends AbstractAdmin {
     @Consumes("application/json")
     @AuthorizationAction("/permission/protected/manage/monitor/tenants")
     public Response getSubscriptionDomains(@PathParam("cartridgeType") String cartridgeType,
-                                           @PathParam("subscriptionAlias") String subscriptionAlias) throws RestAPIException {
+                                                           @PathParam("subscriptionAlias") String subscriptionAlias) throws RestAPIException {
         SubscriptionDomainBean[] subscriptionDomainBean = ServiceUtils.getSubscriptionDomains(getConfigContext(), cartridgeType, subscriptionAlias).toArray(new SubscriptionDomainBean[0]);
 
         if(subscriptionDomainBean.length == 0){
@@ -1052,7 +1076,7 @@ public class StratosAdmin extends AbstractAdmin {
     @Consumes("application/json")
     @AuthorizationAction("/permission/protected/manage/monitor/tenants")
     public Response getSubscriptionDomain(@PathParam("cartridgeType") String cartridgeType,
-                                          @PathParam("subscriptionAlias") String subscriptionAlias, @PathParam("domainName") String domainName) throws RestAPIException {
+                                                        @PathParam("subscriptionAlias") String subscriptionAlias, @PathParam("domainName") String domainName) throws RestAPIException {
         SubscriptionDomainBean subscriptionDomainBean = ServiceUtils.getSubscriptionDomain(getConfigContext(), cartridgeType, subscriptionAlias, domainName);
         if(subscriptionDomainBean.domainName == null){
             return Response.status(Response.Status.NOT_FOUND).build();
@@ -1077,18 +1101,18 @@ public class StratosAdmin extends AbstractAdmin {
     @AuthorizationAction("/permission/protected/manage/monitor/tenants")
     public Response getLoadBalancerCluster(@PathParam("cartridgeType") String cartridgeType,
                                            @PathParam("subscriptionAlias") String subscriptionAlias) throws RestAPIException {
-        if(log.isDebugEnabled()) {
+        if (log.isDebugEnabled()) {
             log.debug(String.format("GET /cartridge/%s/subscription/%s/load-balancer-cluster", cartridgeType, subscriptionAlias));
         }
         Cartridge subscription = ServiceUtils.getSubscription(subscriptionAlias, getConfigContext());
         String lbClusterId = subscription.getLbClusterId();
-        if(log.isDebugEnabled()) {
+        if (log.isDebugEnabled()) {
             log.debug(String.format("Load balancer cluster-id found: %s", lbClusterId));
         }
-        if(StringUtils.isNotBlank(lbClusterId)) {
+        if (StringUtils.isNotBlank(lbClusterId)) {
             Cluster lbCluster = getCluster(lbClusterId);
-            if(lbCluster != null) {
-                if(log.isDebugEnabled()) {
+            if (lbCluster != null) {
+                if (log.isDebugEnabled()) {
                     log.debug(String.format("Load balancer cluster found: %s", lbCluster.toString()));
                 }
                 Response.ok().entity(lbCluster).build();
diff --git a/components/org.apache.stratos.rest.endpoint/src/main/webapp/stratos-test/WEB-INF/cxf-servlet.xml b/components/org.apache.stratos.rest.endpoint/src/main/webapp/stratos-test/WEB-INF/cxf-servlet.xml
index 2eae5ed..f8b8750 100644
--- a/components/org.apache.stratos.rest.endpoint/src/main/webapp/stratos-test/WEB-INF/cxf-servlet.xml
+++ b/components/org.apache.stratos.rest.endpoint/src/main/webapp/stratos-test/WEB-INF/cxf-servlet.xml
@@ -21,10 +21,8 @@
 <beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:jaxrs="http://cxf.apache.org/jaxrs"
-       xmlns:util="http://www.springframework.org/schema/util"
        xsi:schemaLocation="
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
-         http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
          http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd">
 
     <jaxrs:server id="stratosAdmin" address="/">
@@ -33,45 +31,16 @@
         </jaxrs:serviceBeans>
 
         <jaxrs:providers>
-            <ref bean="throwableExceptionHandler"/>
-            <ref bean="genericExceptionHandler"/>
-            <ref bean="badRequestExceptionHandler"/>
-            <ref bean="jsonProvider"/>
+			<ref bean="throwableExceptionHandler"/>
+            <bean class="org.apache.cxf.jaxrs.provider.json.JSONProvider">
+                <property name="dropRootElement" value="true"/>
+                <property name="supportUnwrapped" value="true"/>
+            </bean>>
             <ref bean="exceptionHandler"/>
         </jaxrs:providers>
     </jaxrs:server>
 
     <bean id="stratosRestEndpointTestBean" class="org.apache.stratos.rest.endpoint.mock.StratosTestAdmin"/>
     <bean id="exceptionHandler" class="org.apache.stratos.rest.endpoint.handlers.CustomExceptionMapper"/>
-    <bean id="badRequestExceptionHandler" class="org.apache.stratos.rest.endpoint.handlers.BadRequestExceptionMapper"/>
-    <bean id="genericExceptionHandler" class="org.apache.stratos.rest.endpoint.handlers.GenericExceptionMapper"/>
     <bean id="throwableExceptionHandler" class="org.apache.stratos.rest.endpoint.handlers.CustomThrowableExceptionMapper"/>
-    <bean id="jsonProvider" class="org.apache.cxf.jaxrs.provider.json.JSONProvider">
-        <property name="schemaHandler" ref="schemaHolder"/>
-        <property name="supportUnwrapped" value="true"/>
-        <property name="serializeAsArray" value="true"/>
-        <property name="arrayKeys">
-            <list>
-                <value>partitions</value>
-                <value>property</value>
-                <value>hostNames</value>
-                <value>memberMap</value>
-                <value>portMap</value>
-                <value>partitionGroup</value>
-                <value>partition</value>
-                <value>member</value>
-                <value>hostNames</value>
-                <value>portMappings</value>
-                <value>volumes</value>
-            </list>
-        </property>
-    </bean>
-
-    <bean id="schemaHolder" class="org.apache.cxf.jaxrs.utils.schemas.SchemaHandler">
-        <property name="schemas" ref="theSchemas"/>
-    </bean>
-
-    <util:list id="theSchemas">
-        <value>classpath:/WEB-INF/schemas/schema.xsd</value>
-    </util:list>
 </beans>
diff --git a/components/org.apache.stratos.rest.endpoint/src/main/webapp/stratos/WEB-INF/cxf-servlet.xml b/components/org.apache.stratos.rest.endpoint/src/main/webapp/stratos/WEB-INF/cxf-servlet.xml
index ac758b7..cd10030 100644
--- a/components/org.apache.stratos.rest.endpoint/src/main/webapp/stratos/WEB-INF/cxf-servlet.xml
+++ b/components/org.apache.stratos.rest.endpoint/src/main/webapp/stratos/WEB-INF/cxf-servlet.xml
@@ -21,10 +21,8 @@
 <beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:jaxrs="http://cxf.apache.org/jaxrs"
-       xmlns:util="http://www.springframework.org/schema/util"
        xsi:schemaLocation="
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
-         http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
          http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd">
 
     <jaxrs:server id="stratosAdmin" address="/">
@@ -34,8 +32,7 @@
 
         <jaxrs:providers>
             <ref bean="throwableExceptionHandler"/>
-            <ref bean="genericExceptionHandler"/>
-            <ref bean="badRequestExceptionHandler"/>
+			<ref bean="genericExceptionHandler"/>
             <ref bean="jsonProvider"/>
             <ref bean="exceptionHandler"/>
             <ref bean="basicAuthenticationFilter"/>
@@ -51,7 +48,6 @@
         <property name="securedObject" ref="stratosRestEndpointBean"/>
     </bean>
     <bean id="exceptionHandler" class="org.apache.stratos.rest.endpoint.handlers.CustomExceptionMapper"/>
-    <bean id="badRequestExceptionHandler" class="org.apache.stratos.rest.endpoint.handlers.BadRequestExceptionMapper"/>
     <bean id="genericExceptionHandler" class="org.apache.stratos.rest.endpoint.handlers.GenericExceptionMapper"/>
     <bean id="throwableExceptionHandler" class="org.apache.stratos.rest.endpoint.handlers.CustomThrowableExceptionMapper"/>
     <!--The below config enables OAuth based authentication/authorization for REST API-->
@@ -61,7 +57,6 @@
         <property name="oauthValidationEndpoint" value="https://localhost:9443/services/"/>
     </bean>
     <bean id="jsonProvider" class="org.apache.cxf.jaxrs.provider.json.JSONProvider">
-        <property name="schemaHandler" ref="schemaHolder"/>
         <property name="supportUnwrapped" value="true"/>
         <property name="serializeAsArray" value="true"/>
         <property name="arrayKeys">
@@ -77,17 +72,8 @@
                 <value>hostNames</value>
                 <value>portMappings</value>
                 <value>volumes</value>
-                <value>domains</value>
             </list>
         </property>
     </bean>
 
-    <bean id="schemaHolder" class="org.apache.cxf.jaxrs.utils.schemas.SchemaHandler">
-        <property name="schemas" ref="theSchemas"/>
-    </bean>
-
-    <util:list id="theSchemas">
-        <value>classpath:/WEB-INF/schemas/schema.xsd</value>
-    </util:list>
-
 </beans>
diff --git a/components/org.apache.stratos.sso.redirector.ui/pom.xml b/components/org.apache.stratos.sso.redirector.ui/pom.xml
index 2a58584..51c2242 100644
--- a/components/org.apache.stratos.sso.redirector.ui/pom.xml
+++ b/components/org.apache.stratos.sso.redirector.ui/pom.xml
@@ -21,7 +21,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.status.monitor.agent/pom.xml b/components/org.apache.stratos.status.monitor.agent/pom.xml
index 6fedb3d..9e1a93a 100644
--- a/components/org.apache.stratos.status.monitor.agent/pom.xml
+++ b/components/org.apache.stratos.status.monitor.agent/pom.xml
@@ -20,7 +20,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.status.monitor.core/pom.xml b/components/org.apache.stratos.status.monitor.core/pom.xml
index 02e9c03..3f4cdd2 100644
--- a/components/org.apache.stratos.status.monitor.core/pom.xml
+++ b/components/org.apache.stratos.status.monitor.core/pom.xml
@@ -20,7 +20,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.status.monitor.ui/pom.xml b/components/org.apache.stratos.status.monitor.ui/pom.xml
index 30bcdbd..558449c 100644
--- a/components/org.apache.stratos.status.monitor.ui/pom.xml
+++ b/components/org.apache.stratos.status.monitor.ui/pom.xml
@@ -21,7 +21,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.status.monitor/pom.xml b/components/org.apache.stratos.status.monitor/pom.xml
index 5cd2791..a28aa2d 100644
--- a/components/org.apache.stratos.status.monitor/pom.xml
+++ b/components/org.apache.stratos.status.monitor/pom.xml
@@ -20,7 +20,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.tenant.activity.ui/pom.xml b/components/org.apache.stratos.tenant.activity.ui/pom.xml
index e6cb0b1..f0814c9 100644
--- a/components/org.apache.stratos.tenant.activity.ui/pom.xml
+++ b/components/org.apache.stratos.tenant.activity.ui/pom.xml
@@ -21,7 +21,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.tenant.activity/pom.xml b/components/org.apache.stratos.tenant.activity/pom.xml
index 65b49d7..d12d161 100644
--- a/components/org.apache.stratos.tenant.activity/pom.xml
+++ b/components/org.apache.stratos.tenant.activity/pom.xml
@@ -20,7 +20,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.tenant.dispatcher/pom.xml b/components/org.apache.stratos.tenant.dispatcher/pom.xml
index 13ce898..76220da 100644
--- a/components/org.apache.stratos.tenant.dispatcher/pom.xml
+++ b/components/org.apache.stratos.tenant.dispatcher/pom.xml
@@ -20,7 +20,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.tenant.mgt.core/pom.xml b/components/org.apache.stratos.tenant.mgt.core/pom.xml
index fd33bdc..38f114e 100644
--- a/components/org.apache.stratos.tenant.mgt.core/pom.xml
+++ b/components/org.apache.stratos.tenant.mgt.core/pom.xml
@@ -20,7 +20,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.tenant.mgt.email.sender/pom.xml b/components/org.apache.stratos.tenant.mgt.email.sender/pom.xml
index 09b9803..d7a3d0c 100644
--- a/components/org.apache.stratos.tenant.mgt.email.sender/pom.xml
+++ b/components/org.apache.stratos.tenant.mgt.email.sender/pom.xml
@@ -20,7 +20,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.tenant.mgt.ui/pom.xml b/components/org.apache.stratos.tenant.mgt.ui/pom.xml
index 838857d..66a963e 100644
--- a/components/org.apache.stratos.tenant.mgt.ui/pom.xml
+++ b/components/org.apache.stratos.tenant.mgt.ui/pom.xml
@@ -21,7 +21,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.tenant.mgt/pom.xml b/components/org.apache.stratos.tenant.mgt/pom.xml
index 9e501ca..2c847f9 100644
--- a/components/org.apache.stratos.tenant.mgt/pom.xml
+++ b/components/org.apache.stratos.tenant.mgt/pom.xml
@@ -20,7 +20,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/components/org.apache.stratos.theme.mgt.ui/pom.xml b/components/org.apache.stratos.theme.mgt.ui/pom.xml
index c907ac0..aa5584b 100644
--- a/components/org.apache.stratos.theme.mgt.ui/pom.xml
+++ b/components/org.apache.stratos.theme.mgt.ui/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
 	    <relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/components/org.apache.stratos.theme.mgt/pom.xml b/components/org.apache.stratos.theme.mgt/pom.xml
index ec3b0b3..1423919 100644
--- a/components/org.apache.stratos.theme.mgt/pom.xml
+++ b/components/org.apache.stratos.theme.mgt/pom.xml
@@ -21,7 +21,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
 	<relativePath>../pom.xml</relativePath>
     </parent>
 
@@ -101,5 +101,6 @@
             <artifactId>org.apache.stratos.common</artifactId>
 	    <version>${project.version}</version>
         </dependency>
+        
     </dependencies>
 </project>
diff --git a/components/org.apache.stratos.validate.domain.ui/pom.xml b/components/org.apache.stratos.validate.domain.ui/pom.xml
index 8c06e81..07a1e44 100644
--- a/components/org.apache.stratos.validate.domain.ui/pom.xml
+++ b/components/org.apache.stratos.validate.domain.ui/pom.xml
@@ -21,7 +21,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/components/org.apache.stratos.validate.domain/pom.xml b/components/org.apache.stratos.validate.domain/pom.xml
index c78bc87..c86d118 100644
--- a/components/org.apache.stratos.validate.domain/pom.xml
+++ b/components/org.apache.stratos.validate.domain/pom.xml
@@ -20,7 +20,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-components-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
 	<relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/components/pom.xml b/components/pom.xml
index 5be4292..4e1953b 100644
--- a/components/pom.xml
+++ b/components/pom.xml
@@ -23,7 +23,7 @@
 	<parent>
             <groupId>org.apache.stratos</groupId>
             <artifactId>stratos-parent</artifactId>
-            <version>4.0.0-SNAPSHOT</version>
+            <version>4.0.0</version>
             <relativePath>../pom.xml</relativePath>
         </parent>
 
@@ -102,6 +102,8 @@
         <module>org.apache.stratos.rest.endpoint</module>
         <!-- Stratos manager styles bundle -->
         <module>org.apache.stratos.manager.styles</module>
+        
+        <module>org.apache.stratos.metadataservice</module>
 	
     </modules>
 	    
diff --git a/dependencies/jclouds/apis/ec2/1.7.1-stratos/pom.xml b/dependencies/jclouds/apis/ec2/1.7.1-stratos/pom.xml
index c409bd0..c4de90c 100644
--- a/dependencies/jclouds/apis/ec2/1.7.1-stratos/pom.xml
+++ b/dependencies/jclouds/apis/ec2/1.7.1-stratos/pom.xml
@@ -136,5 +136,9 @@
       </build>
     </profile>
   </profiles>
+
+  <scm>
+    <tag>4.0.0-rc4</tag>
+  </scm>
 </project>
 
diff --git a/dependencies/jclouds/apis/openstack-nova/1.7.1-stratos/pom.xml b/dependencies/jclouds/apis/openstack-nova/1.7.1-stratos/pom.xml
index 885dc4b..a3a04e7 100644
--- a/dependencies/jclouds/apis/openstack-nova/1.7.1-stratos/pom.xml
+++ b/dependencies/jclouds/apis/openstack-nova/1.7.1-stratos/pom.xml
@@ -138,4 +138,8 @@
       </build>
     </profile>
   </profiles>
+
+  <scm>
+    <tag>4.0.0-rc4</tag>
+  </scm>
 </project>
diff --git a/dependencies/jclouds/apis/vcloud/1.7.1-stratos/pom.xml b/dependencies/jclouds/apis/vcloud/1.7.1-stratos/pom.xml
index 5d60f87..43a0adc 100755
--- a/dependencies/jclouds/apis/vcloud/1.7.1-stratos/pom.xml
+++ b/dependencies/jclouds/apis/vcloud/1.7.1-stratos/pom.xml
@@ -124,4 +124,8 @@
       </build>
     </profile>
   </profiles>
+
+  <scm>
+    <tag>4.0.0-rc4</tag>
+  </scm>
 </project>
diff --git a/dependencies/jclouds/provider/aws-ec2/1.7.1-stratos/pom.xml b/dependencies/jclouds/provider/aws-ec2/1.7.1-stratos/pom.xml
index be4b21c..09096be 100644
--- a/dependencies/jclouds/provider/aws-ec2/1.7.1-stratos/pom.xml
+++ b/dependencies/jclouds/provider/aws-ec2/1.7.1-stratos/pom.xml
@@ -61,12 +61,12 @@
     <dependency>
       <groupId>org.apache.stratos</groupId>
       <artifactId>ec2</artifactId>
-      <version>${project.version}</version>
+      <version>4.0.0-SNAPSHOT</version>
     </dependency>
     <dependency>
       <groupId>org.apache.stratos</groupId>
       <artifactId>ec2</artifactId>
-      <version>${project.version}</version>
+      <version>4.0.0-SNAPSHOT</version>
       <type>test-jar</type>
       <scope>test</scope>
     </dependency>
@@ -148,5 +148,9 @@
       </build>
     </profile>
   </profiles>
+
+  <scm>
+    <tag>4.0.0-rc4</tag>
+  </scm>
 </project>
 
diff --git a/dependencies/jclouds/provider/aws-ec2/1.7.1-stratos/src/main/java/org/jclouds/aws/ec2/compute/AWSEC2TemplateOptions.java b/dependencies/jclouds/provider/aws-ec2/1.7.1-stratos/src/main/java/org/jclouds/aws/ec2/compute/AWSEC2TemplateOptions.java
index 56ad2df..0fd958c 100644
--- a/dependencies/jclouds/provider/aws-ec2/1.7.1-stratos/src/main/java/org/jclouds/aws/ec2/compute/AWSEC2TemplateOptions.java
+++ b/dependencies/jclouds/provider/aws-ec2/1.7.1-stratos/src/main/java/org/jclouds/aws/ec2/compute/AWSEC2TemplateOptions.java
@@ -197,7 +197,7 @@ public class AWSEC2TemplateOptions extends EC2TemplateOptions implements Cloneab
    /**
     * @see org.jclouds.aws.ec2.options.AWSRunInstancesOptions#withIAMInstanceProfileArn(String)
     */
-   @SinceApiVersion("2012-06-01")
+   @SinceApiVersion("2014-02-01")
    public AWSEC2TemplateOptions iamInstanceProfileArn(String arn) {
       this.iamInstanceProfileArn = checkNotNull(emptyToNull(arn), "arn must be defined");
       return this;
@@ -206,7 +206,7 @@ public class AWSEC2TemplateOptions extends EC2TemplateOptions implements Cloneab
    /**
     * @see org.jclouds.aws.ec2.options.AWSRunInstancesOptions#withIAMInstanceProfileName(String)
     */
-   @SinceApiVersion("2012-06-01")
+   @SinceApiVersion("2014-02-01")
    public AWSEC2TemplateOptions iamInstanceProfileName(String name) {
       this.iamInstanceProfileName = checkNotNull(emptyToNull(name), "name must be defined");
       return this;
@@ -453,7 +453,7 @@ public class AWSEC2TemplateOptions extends EC2TemplateOptions implements Cloneab
       /**
        * @see AWSEC2TemplateOptions#iamInstanceProfileArn
        */
-      @SinceApiVersion("2012-06-01")
+      @SinceApiVersion("2014-02-01")
       public static AWSEC2TemplateOptions iamInstanceProfileArn(String arn) {
          AWSEC2TemplateOptions options = new AWSEC2TemplateOptions();
          return options.iamInstanceProfileArn(arn);
@@ -462,7 +462,7 @@ public class AWSEC2TemplateOptions extends EC2TemplateOptions implements Cloneab
       /**
        * @see AWSEC2TemplateOptions#iamInstanceProfileName
        */
-      @SinceApiVersion("2012-06-01")
+      @SinceApiVersion("2014-02-01")
       public static AWSEC2TemplateOptions iamInstanceProfileName(String name) {
          AWSEC2TemplateOptions options = new AWSEC2TemplateOptions();
          return options.iamInstanceProfileName(name);
@@ -807,7 +807,7 @@ public class AWSEC2TemplateOptions extends EC2TemplateOptions implements Cloneab
     * 
     * @see org.jclouds.aws.ec2.options.AWSRunInstancesOptions#withIAMInstanceProfileArn(String)
     */
-   @SinceApiVersion("2012-06-01")
+   @SinceApiVersion("2014-02-01")
    public String getIAMInstanceProfileArn() {
       return iamInstanceProfileArn;
    }
@@ -817,7 +817,7 @@ public class AWSEC2TemplateOptions extends EC2TemplateOptions implements Cloneab
     * 
     * @see org.jclouds.aws.ec2.options.AWSRunInstancesOptions#withIAMInstanceProfileName(String)
     */
-   @SinceApiVersion("2012-06-01")
+   @SinceApiVersion("2014-02-01")
    public String getIAMInstanceProfileName() {
       return iamInstanceProfileName;
    }
diff --git a/dependencies/jclouds/provider/aws-ec2/1.7.1-stratos/src/main/java/org/jclouds/aws/ec2/domain/AWSRunningInstance.java b/dependencies/jclouds/provider/aws-ec2/1.7.1-stratos/src/main/java/org/jclouds/aws/ec2/domain/AWSRunningInstance.java
index 3da4bcd..d59aad4 100644
--- a/dependencies/jclouds/provider/aws-ec2/1.7.1-stratos/src/main/java/org/jclouds/aws/ec2/domain/AWSRunningInstance.java
+++ b/dependencies/jclouds/provider/aws-ec2/1.7.1-stratos/src/main/java/org/jclouds/aws/ec2/domain/AWSRunningInstance.java
@@ -284,7 +284,7 @@ public class AWSRunningInstance extends RunningInstance {
    /**
     * The IAM Instance Profile (IIP) associated with the instance.
     */
-   @SinceApiVersion("2012-06-01")
+   @SinceApiVersion("2014-02-01")
    public Optional<IAMInstanceProfile> getIAMInstanceProfile() {
       return iamInstanceProfile;
    }
diff --git a/dependencies/jclouds/provider/aws-ec2/1.7.1-stratos/src/main/java/org/jclouds/aws/ec2/domain/LaunchSpecification.java b/dependencies/jclouds/provider/aws-ec2/1.7.1-stratos/src/main/java/org/jclouds/aws/ec2/domain/LaunchSpecification.java
index a9192f9..8fbd033 100644
--- a/dependencies/jclouds/provider/aws-ec2/1.7.1-stratos/src/main/java/org/jclouds/aws/ec2/domain/LaunchSpecification.java
+++ b/dependencies/jclouds/provider/aws-ec2/1.7.1-stratos/src/main/java/org/jclouds/aws/ec2/domain/LaunchSpecification.java
@@ -386,7 +386,7 @@ public class LaunchSpecification {
    /**
     * The IAM Instance Profile (IIP) associated with the instance.
     */
-   @SinceApiVersion("2012-06-01")
+   @SinceApiVersion("2014-02-01")
    public Optional<IAMInstanceProfileRequest> getIAMInstanceProfile() {
       return iamInstanceProfile;
    }
@@ -510,7 +510,7 @@ public class LaunchSpecification {
             + ", iamInstanceProfile=" + iamInstanceProfile.orNull() + "]";
    }
 
-   @SinceApiVersion("2012-06-01")
+   @SinceApiVersion("2014-02-01")
    public static class IAMInstanceProfileRequest {
 
       public static IAMInstanceProfileRequest forArn(String arn) {
diff --git a/dependencies/jclouds/provider/aws-ec2/1.7.1-stratos/src/main/java/org/jclouds/aws/ec2/options/AWSRunInstancesOptions.java b/dependencies/jclouds/provider/aws-ec2/1.7.1-stratos/src/main/java/org/jclouds/aws/ec2/options/AWSRunInstancesOptions.java
index 78b3648..ce4c014 100644
--- a/dependencies/jclouds/provider/aws-ec2/1.7.1-stratos/src/main/java/org/jclouds/aws/ec2/options/AWSRunInstancesOptions.java
+++ b/dependencies/jclouds/provider/aws-ec2/1.7.1-stratos/src/main/java/org/jclouds/aws/ec2/options/AWSRunInstancesOptions.java
@@ -121,7 +121,7 @@ public class AWSRunInstancesOptions extends RunInstancesOptions {
     * 
     * @see org.jclouds.aws.ec2.domain.AWSRunningInstance#getIAMInstanceProfile()
     */
-   @SinceApiVersion("2012-06-01")
+   @SinceApiVersion("2014-02-01")
    public AWSRunInstancesOptions withIAMInstanceProfileArn(String arn) {
       formParameters.put("IamInstanceProfile.Arn", checkNotNull(arn, "arn"));
       return this;
@@ -132,7 +132,7 @@ public class AWSRunInstancesOptions extends RunInstancesOptions {
     * 
     * @see org.jclouds.aws.ec2.domain.AWSRunningInstance#getIAMInstanceProfile()
     */
-   @SinceApiVersion("2012-06-01")
+   @SinceApiVersion("2014-02-01")
    public AWSRunInstancesOptions withIAMInstanceProfileName(String name) {
       formParameters.put("IamInstanceProfile.Name", checkNotNull(name, "name"));
       return this;
diff --git a/dependencies/org.wso2.carbon.ui/pom.xml b/dependencies/org.wso2.carbon.ui/pom.xml
index 2dc0600..ab5a6ee 100644
--- a/dependencies/org.wso2.carbon.ui/pom.xml
+++ b/dependencies/org.wso2.carbon.ui/pom.xml
@@ -20,7 +20,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-dependents</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/dependencies/pom.xml b/dependencies/pom.xml
index e5118ac..2501c3f 100644
--- a/dependencies/pom.xml
+++ b/dependencies/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
@@ -36,7 +36,6 @@
         <module>jclouds/apis/vcloud/1.7.1-stratos</module>
         <module>jclouds/apis/ec2/1.7.1-stratos</module>
         <module>jclouds/apis/openstack-nova/1.7.1-stratos</module>
-        <module>jclouds/apis/docker/1.7.1-stratos</module>
         <module>jclouds/provider/aws-ec2/1.7.1-stratos</module>
         <module>org.wso2.carbon.ui</module>
     </modules>
diff --git a/extensions/cep/artifacts/executionplans/AverageHeathRequest.xml b/extensions/cep/artifacts/executionplans/AverageHeathRequest.xml
index 598f62a..7a6ec84 100644
--- a/extensions/cep/artifacts/executionplans/AverageHeathRequest.xml
+++ b/extensions/cep/artifacts/executionplans/AverageHeathRequest.xml
@@ -28,34 +28,13 @@
     <property name="siddhi.persistence.snapshot.time.interval.minutes">0</property>
   </siddhiConfiguration>
   <importedStreams>
-    <stream as="health_avg_processsor" name="cartridge_agent_health_stats" version="1.0.0"/>
+    <stream as="healthStats1" name="cartridge_agent_health_stats" version="1.0.0"/>
   </importedStreams>
-  <queryExpressions><![CDATA[
- 	from health_avg_processsor [health_description == 'ports_not_open'] 
-		select cluster_id, network_partition_id, member_id, partition_id insert into fault_message;
-	from health_avg_processsor
-  		select cluster_id, network_partition_id, member_id, partition_id, health_description, value, 
-		stratos:concat(cluster_id, '-' , network_partition_id) as health_grad_cluster_network 
-  		insert into health_avg_concatinator;
-  	define partition health_avg_cluster_partition by   health_avg_concatinator.health_grad_cluster_network;
-  	define partition member_health_avg_cluster_partition by  health_avg_processsor.member_id;
-  	from health_avg_concatinator [health_description == 'load_average'] 
-		#window.timeBatch(1 min) select cluster_id, network_partition_id, avg(value) as average_load_average   
-		insert into average_load_average_stats 
-		partition by health_avg_cluster_partition;
-  	from health_avg_processsor [health_description == 'load_average'] 
-		#window.timeBatch(1 min) select member_id, cluster_id, network_partition_id, avg(value) as member_average_load_average 
-		insert into member_average_load_average_stats 
-		partition by member_health_avg_cluster_partition;
-  	from health_avg_processsor [health_description == 'memory_consumption'] 
-		#window.timeBatch(1 min) select member_id, cluster_id, network_partition_id, avg(value) as member_average_memory_consumption 
-		insert into member_average_memory_consumption_stats 
-		partition by member_health_avg_cluster_partition;
-  	from health_avg_concatinator [health_description == 'memory_consumption'] 
-		#window.timeBatch(1 min) select cluster_id, network_partition_id, avg(value) as average_memory_consumption 
-		insert into average_memory_consumption_stats 
-		partition by health_avg_cluster_partition;
-  ]]></queryExpressions>
+  <queryExpressions><![CDATA[from healthStats1 [health_description == 'ports_not_open'] select cluster_id, network_partition_id, member_id, partition_id insert into fault_message;
+  from healthStats1 [health_description == 'load_average'] #window.timeBatch(1 min) select cluster_id, network_partition_id, avg(value) as average_load_average group by cluster_id, network_partition_id insert into average_load_average_stats;
+  from healthStats1 [health_description == 'load_average'] #window.timeBatch(1 min) select member_id, cluster_id, network_partition_id, avg(value) as member_average_load_average group by member_id insert into member_average_load_average_stats;
+  from healthStats1 [health_description == 'memory_consumption'] #window.timeBatch(1 min) select member_id, cluster_id, network_partition_id, avg(value) as member_average_memory_consumption group by member_id insert into member_average_memory_consumption_stats;
+  from healthStats1 [health_description == 'memory_consumption'] #window.timeBatch(1 min) select cluster_id, network_partition_id, avg(value) as average_memory_consumption group by cluster_id, network_partition_id insert into average_memory_consumption_stats;]]></queryExpressions>
   <exportedStreams>
     <stream name="average_load_average_stats" passthroughFlow="disable"
       valueOf="average_load_average_stats" version="1.0.0"/>
diff --git a/extensions/cep/artifacts/executionplans/AverageInFlightRequestsFinder.xml b/extensions/cep/artifacts/executionplans/AverageInFlightRequestsFinder.xml
index 6826dab..675e8b7 100644
--- a/extensions/cep/artifacts/executionplans/AverageInFlightRequestsFinder.xml
+++ b/extensions/cep/artifacts/executionplans/AverageInFlightRequestsFinder.xml
@@ -28,18 +28,11 @@
     <property name="siddhi.persistence.snapshot.time.interval.minutes">0</property>
   </siddhiConfiguration>
   <importedStreams>
-    <stream as="avg_rif_stat" name="in_flight_requests" version="1.0.0"/>
+    <stream as="lbStats1" name="in_flight_requests" version="1.0.0"/>
   </importedStreams>
   <queryExpressions><![CDATA[ 
-	from avg_rif_stat
-		select cluster_id, network_partition_id, in_flight_request_count, 
-		stratos:concat(cluster_id, '-' , network_partition_id) as avg_rif_cluster_network
-		insert into avg_rif_concat;
-	define partition avg_rif_cluster_partition by  avg_rif_concat.avg_rif_cluster_network;
-	from avg_rif_concat#window.timeBatch(1 min)
-		select cluster_id,network_partition_id, avg(in_flight_request_count) as count 
-		insert into average_in_flight_requests 
-		partition by avg_rif_cluster_partition;]]></queryExpressions>
+from lbStats1#window.timeBatch(1 min)
+select cluster_id,network_partition_id, avg(in_flight_request_count) as count group by cluster_id,network_partition_id  insert into average_in_flight_requests;]]></queryExpressions>
   <exportedStreams>
     <stream name="average_in_flight_requests"
       valueOf="average_in_flight_requests" version="1.0.0"/>
diff --git a/extensions/cep/artifacts/executionplans/GradientOfHealthRequest.xml b/extensions/cep/artifacts/executionplans/GradientOfHealthRequest.xml
index 9ae0042..7b69214 100644
--- a/extensions/cep/artifacts/executionplans/GradientOfHealthRequest.xml
+++ b/extensions/cep/artifacts/executionplans/GradientOfHealthRequest.xml
@@ -28,34 +28,14 @@
     <property name="siddhi.persistence.snapshot.time.interval.minutes">0</property>
   </siddhiConfiguration>
   <importedStreams>
-    <stream as="health_grad_processsor" name="cartridge_agent_health_stats" version="1.0.0"/>
+    <stream as="healthStats2" name="cartridge_agent_health_stats" version="1.0.0"/>
   </importedStreams>
   <queryExpressions><![CDATA[
-  	from health_grad_processsor 
-  		#window.stratos:faultHandling(1min, member_id) select cluster_id, network_partition_id, member_id, partition_id 
-		group by cluster_id, network_partition_id 
-  		insert into fault_message;
-  	from health_grad_processsor
-  		select cluster_id, network_partition_id, member_id, partition_id, health_description, value, 
-		stratos:concat(cluster_id, '-' , network_partition_id) as health_grad_cluster_network 
-  		insert into health_grad_concatinator;
-  	define partition health_grad_cluster_partition by  health_grad_concatinator.health_grad_cluster_network;
- 	define partition member_health_grad_cluster_partition by health_grad_processsor.member_id;
-  	from health_grad_concatinator [health_description == 'load_average'] 
-		#window.stratos:gradient(1 min, value) select cluster_id, network_partition_id, value as gradient_load_average 
-		insert into gradient_load_average_stats 
-		partition by health_grad_cluster_partition;
-  	from health_grad_processsor [health_description == 'load_average'] 
-		#window.stratos:gradient(1 min, value) select member_id, cluster_id, network_partition_id, value as member_gradient_load_average 
-		insert into member_gradient_load_average_stats 
-		partition by member_health_grad_cluster_partition;
-  	from health_grad_processsor [health_description == 'memory_consumption'] 
-		#window.stratos:gradient(1 min, value) select member_id, cluster_id, network_partition_id, value as member_gradient_memory_consumption 
-		insert into member_gradient_memory_consumption_stats  partition by member_health_grad_cluster_partition;
-  	from health_grad_concatinator [health_description == 'memory_consumption'] 
-		#window.stratos:gradient(1 min, value) select cluster_id, network_partition_id, value as gradient_memory_consumption 
-		insert into gradient_memory_consumption_stats 
-		partition by health_grad_cluster_partition;]]></queryExpressions>
+  from healthStats2 #window.stratos:faultHandling(1min, member_id) select cluster_id, network_partition_id, member_id, partition_id group by cluster_id, network_partition_id insert into fault_message;
+  from healthStats2 [health_description == 'load_average'] #window.stratos:gradient(1 min, value) select cluster_id, network_partition_id, value as gradient_load_average group by cluster_id, network_partition_id insert into gradient_load_average_stats;
+  from healthStats2 [health_description == 'load_average'] #window.stratos:gradient(1 min, value) select member_id, cluster_id, network_partition_id, value as member_gradient_load_average group by member_id insert into member_gradient_load_average_stats;
+  from healthStats2 [health_description == 'memory_consumption'] #window.stratos:gradient(1 min, value) select member_id, cluster_id, network_partition_id, value as member_gradient_memory_consumption group by member_id insert into member_gradient_memory_consumption_stats;
+  from healthStats2 [health_description == 'memory_consumption'] #window.stratos:gradient(1 min, value) select cluster_id, network_partition_id, value as gradient_memory_consumption group by cluster_id, network_partition_id insert into gradient_memory_consumption_stats;]]></queryExpressions>
   <exportedStreams>
     <stream name="gradient_load_average_stats"
       valueOf="gradient_load_average_stats" version="1.0.0"/>
diff --git a/extensions/cep/artifacts/executionplans/GradientOfRequestsInFlightFinder.xml b/extensions/cep/artifacts/executionplans/GradientOfRequestsInFlightFinder.xml
index e63911e..b76219a 100644
--- a/extensions/cep/artifacts/executionplans/GradientOfRequestsInFlightFinder.xml
+++ b/extensions/cep/artifacts/executionplans/GradientOfRequestsInFlightFinder.xml
@@ -28,20 +28,11 @@
     <property name="siddhi.persistence.snapshot.time.interval.minutes">0</property>
   </siddhiConfiguration>
   <importedStreams>
-    <stream as="gradient_rif_processor" name="in_flight_requests" version="1.0.0"/>
+    <stream as="lbStats2" name="in_flight_requests" version="1.0.0"/>
   </importedStreams>
-  <queryExpressions><![CDATA[
-	from gradient_rif_processor 
-                select cluster_id, network_partition_id, in_flight_request_count, 
-                stratos:concat(cluster_id, '-' , network_partition_id) as request_grad_cluster_network 
-                insert into gradient_rif_concatinator;
-        define partition request_grad_cluster_partition  by gradient_rif_concatinator.request_grad_cluster_network;
-        from gradient_rif_concatinator
-                #window.stratos:gradient(1 min, in_flight_request_count)
-                select cluster_id,network_partition_id,in_flight_request_count as count  
-                insert into gradient_in_flight_requests 
-                partition by request_grad_cluster_partition;
-]]></queryExpressions>
+  <queryExpressions><![CDATA[ 
+from lbStats2#window.stratos:gradient(1 min, in_flight_request_count)
+select cluster_id,network_partition_id,in_flight_request_count as count group by cluster_id,network_partition_id insert into gradient_in_flight_requests;]]></queryExpressions>
   <exportedStreams>
     <stream name="gradient_in_flight_requests" valueOf="gradient_in_flight_requests" version="1.0.0"/>
   </exportedStreams>
diff --git a/extensions/cep/artifacts/executionplans/SecondDerivativeOfHealthRequest.xml b/extensions/cep/artifacts/executionplans/SecondDerivativeOfHealthRequest.xml
index 101a70a..f2bbbe1 100644
--- a/extensions/cep/artifacts/executionplans/SecondDerivativeOfHealthRequest.xml
+++ b/extensions/cep/artifacts/executionplans/SecondDerivativeOfHealthRequest.xml
@@ -28,33 +28,13 @@
     <property name="siddhi.persistence.snapshot.time.interval.minutes">0</property>
   </siddhiConfiguration>
   <importedStreams>
-    <stream as="health_second_der_request" name="cartridge_agent_health_stats" version="1.0.0"/>
+    <stream as="healthStats3" name="cartridge_agent_health_stats" version="1.0.0"/>
   </importedStreams>
   <queryExpressions><![CDATA[ 
-	 from health_second_der_request
-		select member_id, cluster_id, network_partition_id, health_description, value, 
-		stratos:concat(cluster_id, '-' ,network_partition_id) as health_second_der_cluster_network
-		insert into health_second_der_concat;
-	define partition health_second_der_cluster_partition  by health_second_der_concat.health_second_der_cluster_network;
-	from health_second_der_concat [health_description == 'memory_consumption'] 
-		#window.stratos:secondDerivative(1 min, value) select cluster_id, network_partition_id, value as second_derivative_memory_consumption 
-		insert into second_derivative_memory_consumption_stats 
-		partition by health_second_der_cluster_partition;
-	from health_second_der_concat [health_description == 'load_average'] 
-		#window.stratos:secondDerivative(1 min, value) select cluster_id, network_partition_id, value as second_derivative_load_average 
-		insert into second_derivative_load_average_stats 
-		partition by health_second_der_cluster_partition;
-	define partition health_second_der_member_partition by health_second_der_request.member_id;
-	from health_second_der_request [health_description == 'memory_consumption'] 
-		#window.stratos:secondDerivative(1 min, value) 
-		select member_id, cluster_id, network_partition_id, value as member_second_derivative_memory_consumption 
-		insert into member_second_derivative_memory_consumption_stats 
-		partition by health_second_der_member_partition;
-	from health_second_der_request [health_description == 'load_average'] 
-		#window.stratos:secondDerivative(1 min, value)
-		select member_id, cluster_id, network_partition_id, value as member_second_derivative_load_average
-		 insert into member_second_derivative_load_average_stats 
-		partition by health_second_der_member_partition;]]></queryExpressions>
+    from healthStats3 [health_description == 'memory_consumption'] #window.stratos:secondDerivative(1 min, value) select cluster_id, network_partition_id, value as second_derivative_memory_consumption group by cluster_id,network_partition_id insert into second_derivative_memory_consumption_stats;
+    from healthStats3 [health_description == 'memory_consumption'] #window.stratos:secondDerivative(1 min, value) select member_id, cluster_id, network_partition_id, value as member_second_derivative_memory_consumption group by member_id insert into member_second_derivative_memory_consumption_stats;
+  from healthStats3 [health_description == 'load_average'] #window.stratos:secondDerivative(1 min, value) select member_id, cluster_id, network_partition_id, value as member_second_derivative_load_average group by member_id insert into member_second_derivative_load_average_stats;
+  from healthStats3 [health_description == 'load_average'] #window.stratos:secondDerivative(1 min, value) select cluster_id, network_partition_id, value as second_derivative_load_average group by cluster_id,network_partition_id insert into second_derivative_load_average_stats;]]></queryExpressions>
   <exportedStreams>
     <stream name="second_derivative_memory_consumption_stats"
       valueOf="second_derivative_memory_consumption_stats" version="1.0.0"/>
diff --git a/extensions/cep/artifacts/executionplans/SecondDerivativeOfRequestsInFlightFinder.xml b/extensions/cep/artifacts/executionplans/SecondDerivativeOfRequestsInFlightFinder.xml
index 18e2eaf..53a88e0 100644
--- a/extensions/cep/artifacts/executionplans/SecondDerivativeOfRequestsInFlightFinder.xml
+++ b/extensions/cep/artifacts/executionplans/SecondDerivativeOfRequestsInFlightFinder.xml
@@ -28,19 +28,11 @@
     <property name="siddhi.persistence.snapshot.time.interval.minutes">0</property>
   </siddhiConfiguration>
   <importedStreams>
-    <stream as="second_der_rif" name="in_flight_requests" version="1.0.0"/>
+    <stream as="lbStats3" name="in_flight_requests" version="1.0.0"/>
   </importedStreams>
   <queryExpressions><![CDATA[ 
-	from second_der_rif
-		select cluster_id, network_partition_id, in_flight_request_count, 
-		stratos:concat(cluster_id, '-' ,network_partition_id) as rif_second_der_cluster_network
-		insert into rif_second_der_concat;
-	define partition rif_second_der_cluster_partition by rif_second_der_concat.rif_second_der_cluster_network;
-	from rif_second_der_concat#window.stratos:secondDerivative(1 min, in_flight_request_count)
-		select cluster_id,network_partition_id,in_flight_request_count as count 
-		insert into second_derivative_in_flight_requests 
-		partition by rif_second_der_cluster_partition;
-  ]]></queryExpressions>
+from lbStats3#window.stratos:secondDerivative(1 min, in_flight_request_count)
+select cluster_id,network_partition_id,in_flight_request_count as count group by cluster_id,network_partition_id insert into second_derivative_in_flight_requests;]]></queryExpressions>
   <exportedStreams>
     <stream name="second_derivative_in_flight_requests"
       valueOf="second_derivative_in_flight_requests" version="1.0.0"/>
diff --git a/extensions/cep/stratos-cep-extension/pom.xml b/extensions/cep/stratos-cep-extension/pom.xml
index 4062ead..510325f 100644
--- a/extensions/cep/stratos-cep-extension/pom.xml
+++ b/extensions/cep/stratos-cep-extension/pom.xml
@@ -23,7 +23,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-extensions</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
 	<relativePath>../../pom.xml</relativePath>
     </parent>
     
diff --git a/extensions/load-balancer/haproxy-extension/INSTALL.txt b/extensions/load-balancer/haproxy-extension/INSTALL.txt
index fad3434..c6ff692 100644
--- a/extensions/load-balancer/haproxy-extension/INSTALL.txt
+++ b/extensions/load-balancer/haproxy-extension/INSTALL.txt
@@ -1,5 +1,5 @@
 ================================================================================
-           Installing Apache Stratos HAProxy Extension 4.0.0-SNAPSHOT
+           Installing Apache Stratos HAProxy Extension 4.0.0
 ================================================================================
 
 
@@ -8,7 +8,7 @@ below steps to proceed with the installation:
 
 1. Download and extract HAProxy binary distribution to a desired location: <haproxy-home>.
 
-2. Extract apache-stratos-haproxy-extension-4.0.0-SNAPSHOT-bin.zip to a desired location: <haproxy-extension-home>.
+2. Extract apache-stratos-haproxy-extension-4.0.0.zip to a desired location: <haproxy-extension-home>.
 
 3. Open <haproxy-extension-home>/bin/haproxy-extension.sh file in a text editor and update following system properties:
 
diff --git a/extensions/load-balancer/haproxy-extension/README.txt b/extensions/load-balancer/haproxy-extension/README.txt
index 192f262..5b4dc04 100644
--- a/extensions/load-balancer/haproxy-extension/README.txt
+++ b/extensions/load-balancer/haproxy-extension/README.txt
@@ -1,9 +1,9 @@
 ================================================================================
-                 Apache Stratos HAProxy Extension 4.0.0-SNAPSHOT
+                 Apache Stratos HAProxy Extension 4.0.0
 ================================================================================
 
 
-Apache Stratos HAProxy extension is a load balancer extension for HAProxy.
+Apache Stratos (incubating) HAProxy extension is a load balancer extension for HAProxy.
 It is an executable program which could manage the life-cycle of a HAProxy instance
 according to topology updates received from Stratos Cloud Controller via the message broker.
 
diff --git a/extensions/load-balancer/haproxy-extension/pom.xml b/extensions/load-balancer/haproxy-extension/pom.xml
index 65d0265..1adfa07 100644
--- a/extensions/load-balancer/haproxy-extension/pom.xml
+++ b/extensions/load-balancer/haproxy-extension/pom.xml
@@ -24,7 +24,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-load-balancer-extensions</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <artifactId>apache-stratos-haproxy-extension</artifactId>
diff --git a/extensions/load-balancer/haproxy-extension/src/main/assembly/bin.xml b/extensions/load-balancer/haproxy-extension/src/main/assembly/bin.xml
index 8a68891..3b2e8b7 100644
--- a/extensions/load-balancer/haproxy-extension/src/main/assembly/bin.xml
+++ b/extensions/load-balancer/haproxy-extension/src/main/assembly/bin.xml
@@ -71,12 +71,13 @@
             <outputDirectory>/</outputDirectory>
             <fileMode>0600</fileMode>
             <includes>
+                <include>DISCLAIMER</include>
                 <include>README*</include>
                 <include>LICENSE*</include>
                 <include>INSTALL*</include>
             </includes>
         </fileSet>
-        <fileSet>
+	<fileSet>
             <directory>${project.basedir}/src/main/license</directory>
             <outputDirectory>/</outputDirectory>
             <fileMode>0600</fileMode>
@@ -90,7 +91,7 @@
     <dependencySets>
         <dependencySet>
             <outputDirectory>/lib</outputDirectory>
-            <excludes>
+	    <excludes>
                 <exclude>*:icu4j*</exclude>
                 <exclude>*:jaxen*</exclude>
                 <exclude>*:jboss-transaction-api*</exclude>
diff --git a/extensions/load-balancer/haproxy-extension/src/main/java/org/apache/stratos/haproxy/extension/HAProxyConfigWriter.java b/extensions/load-balancer/haproxy-extension/src/main/java/org/apache/stratos/haproxy/extension/HAProxyConfigWriter.java
index 66ea32a..b767fe0 100644
--- a/extensions/load-balancer/haproxy-extension/src/main/java/org/apache/stratos/haproxy/extension/HAProxyConfigWriter.java
+++ b/extensions/load-balancer/haproxy-extension/src/main/java/org/apache/stratos/haproxy/extension/HAProxyConfigWriter.java
@@ -57,38 +57,74 @@ public class HAProxyConfigWriter {
         globalParameters.append("stats socket ");
         globalParameters.append(statsSocketFilePath);
 
-        // Prepare frontend-backend collection
-        StringBuilder frontendBackendCollection = new StringBuilder();
+        // Prepare frontend http collection
+        StringBuilder frontEndHttp = new StringBuilder();
+        // Prepare frontend https collection
+        StringBuilder frontEndHttps = new StringBuilder();
+        // Prepare backend http collection
+        StringBuilder backEndHttp = new StringBuilder();
+        // Prepare backend https collection
+        StringBuilder backEndHttps = new StringBuilder();
+
+        String frontEndHttpId = "http_frontend";
+        String frontEndHttpsId = "https_frontend";
+        boolean frontEndHttpAdded = false;
+        boolean frontEndHttpsAdded = false;
+
         for (Service service : topology.getServices()) {
             for (Cluster cluster : service.getClusters()) {
 
                 if(cluster.getServiceName().equals("haproxy"))
                     continue;
 
-
                 if ((service.getPorts() == null) || (service.getPorts().size() == 0)) {
                     throw new RuntimeException(String.format("No ports found in service: %s", service.getServiceName()));
                 }
 
                 for (Port port : service.getPorts()) {
-                    String frontendId = cluster.getClusterId() + "-host-" + HAProxyContext.getInstance().getHAProxyPrivateIp() + "-proxy-" + port.getProxy();
-                    String backendId = frontendId + "-members";
-
-                    // Frontend block
-                    frontendBackendCollection.append("frontend ").append(frontendId).append(NEW_LINE);
-                    frontendBackendCollection.append("\tbind ").append(HAProxyContext.getInstance().getHAProxyPrivateIp()).append(":").append(port.getProxy()).append(NEW_LINE);
-                    frontendBackendCollection.append("\tmode ").append(port.getProtocol()).append(NEW_LINE);
-                    frontendBackendCollection.append("\tdefault_backend ").append(backendId).append(NEW_LINE);
-                    frontendBackendCollection.append(NEW_LINE);
-
-                    // Backend block
-                    frontendBackendCollection.append("backend ").append(backendId).append(NEW_LINE);
-                    frontendBackendCollection.append("\tmode ").append(port.getProtocol()).append(NEW_LINE);
-                    for (Member member : cluster.getMembers()) {
-                        frontendBackendCollection.append("\tserver ").append(member.getMemberId()).append(" ")
-                                .append(member.getMemberIp()).append(":").append(port.getValue()).append(NEW_LINE);
+                    if (port.getProtocol().equals("http")){
+                        if (!frontEndHttpAdded) {
+                            frontEndHttp.append("frontend ").append(frontEndHttpId).append(NEW_LINE);
+                            frontEndHttp.append("\tbind ").append(HAProxyContext.getInstance().getHAProxyPrivateIp()).append(":").append(port.getProxy()).append(NEW_LINE);
+                            frontEndHttp.append("\tmode ").append(port.getProtocol()).append(NEW_LINE);
+                            frontEndHttpAdded = true;
+                        }
+
+                        for(String hostname : cluster.getHostNames()) {
+                            frontEndHttp.append("\tacl ").append("is_").append(hostname).append(" hdr_beg(host) -i ").append(hostname).append(NEW_LINE);
+                            frontEndHttp.append("\tuse_backend ").append(hostname).append("-http-members if is_").append(hostname).append(NEW_LINE);
+
+                            // Backend block
+                            backEndHttp.append("backend ").append(hostname).append("-http-members").append(NEW_LINE);
+                            backEndHttp.append("\tmode ").append("http").append(NEW_LINE);
+                            for (Member member : cluster.getMembers()) {
+                                backEndHttp.append("\tserver ").append(member.getMemberId()).append(" ")
+                                        .append(member.getMemberIp()).append(":").append(port.getValue()).append(NEW_LINE);
+                            }
+                            backEndHttp.append(NEW_LINE);
+                        }
+                    } else if (port.getProtocol().equals("https")){
+                        if (!frontEndHttpsAdded) {
+                            frontEndHttp.append("frontend ").append(frontEndHttpsId).append(NEW_LINE);
+                            frontEndHttp.append("\tbind ").append(HAProxyContext.getInstance().getHAProxyPrivateIp()).append(":").append(port.getProxy()).append(NEW_LINE);
+                            frontEndHttp.append("\tmode ").append("http").append(NEW_LINE);
+                            frontEndHttpsAdded = true;
+                        }
+
+                        for(String hostname : cluster.getHostNames()) {
+                            frontEndHttps.append("\tacl ").append("is_").append(hostname).append(" hdr_beg(host) -i ").append(hostname).append(NEW_LINE);
+                            frontEndHttps.append("\tuse_backend ").append(hostname).append("-https-members if is_").append(hostname).append(NEW_LINE);
+
+                            // Backend block
+                            backEndHttps.append("backend ").append(hostname).append("-http-members").append(NEW_LINE);
+                            backEndHttps.append("\tmode ").append("https").append(NEW_LINE);
+                            for (Member member : cluster.getMembers()) {
+                                backEndHttps.append("\tserver ").append(member.getMemberId()).append(" ")
+                                        .append(member.getMemberIp()).append(":").append(port.getValue()).append(NEW_LINE);
+                            }
+                            backEndHttps.append(NEW_LINE);
+                        }
                     }
-                    frontendBackendCollection.append(NEW_LINE);
                 }
             }
         }
@@ -104,7 +140,10 @@ public class HAProxyConfigWriter {
         // Insert strings into the template
         VelocityContext context = new VelocityContext();
         context.put("global_parameters", globalParameters.toString());
-        context.put("frontend_backend_collection", frontendBackendCollection.toString());
+        context.put("frontend_http_collection", frontEndHttp.toString());
+        context.put("frontend_https_collection", frontEndHttps.toString());
+        context.put("backend_http_collection", backEndHttp.toString());
+        context.put("backend_https_collection", backEndHttps.toString());
 
         // Create a new string from the template
         StringWriter stringWriter = new StringWriter();
diff --git a/extensions/load-balancer/haproxy-extension/src/main/java/org/apache/stratos/haproxy/extension/HAProxyStatisticsReader.java b/extensions/load-balancer/haproxy-extension/src/main/java/org/apache/stratos/haproxy/extension/HAProxyStatisticsReader.java
index 676f522..f564e7c 100644
--- a/extensions/load-balancer/haproxy-extension/src/main/java/org/apache/stratos/haproxy/extension/HAProxyStatisticsReader.java
+++ b/extensions/load-balancer/haproxy-extension/src/main/java/org/apache/stratos/haproxy/extension/HAProxyStatisticsReader.java
@@ -60,28 +60,27 @@ public class HAProxyStatisticsReader implements LoadBalancerStatisticsReader {
                     }
 
                     for (Port port : service.getPorts()) {
-                        frontendId = cluster.getClusterId() + "-host-" + HAProxyContext.getInstance().getHAProxyPrivateIp() + "-proxy-" + port.getProxy();
-                        //frontendId = cluster.getClusterId() + "-proxy-" + port.getProxy();
-                        backendId = frontendId + "-members";
-                        
-                        for (Member member : cluster.getMembers()) {
-                            // echo "get weight <backend>/<server>" | socat stdio <stats-socket>
-                            command = String.format("%s/get-weight.sh %s %s %s", scriptsPath, backendId, member.getMemberId(), statsSocketFilePath);
-                            try {
-                                output = CommandUtils.executeCommand(command);
-                                if ((output != null) && (output.length() > 0)) {
-                                    array = output.split(" ");
-                                    if ((array != null) && (array.length > 0)) {
-                                        weight = Integer.parseInt(array[0]);
-                                        if (log.isDebugEnabled()) {
-                                            log.debug(String.format("Member weight found: [cluster] %s [member] %s [weight] %d", member.getClusterId(), member.getMemberId(), weight));
+                        for(String hostname : cluster.getHostNames()) {
+                            backendId = hostname+"-http-members";
+                            for (Member member : cluster.getMembers()) {
+                                // echo "get weight <backend>/<server>" | socat stdio <stats-socket>
+                                command = String.format("%s/get-weight.sh %s %s %s", scriptsPath, backendId, member.getMemberId(), statsSocketFilePath);
+                                try {
+                                    output = CommandUtils.executeCommand(command);
+                                    if ((output != null) && (output.length() > 0)) {
+                                        array = output.split(" ");
+                                        if ((array != null) && (array.length > 0)) {
+                                            weight = Integer.parseInt(array[0]);
+                                            if (log.isDebugEnabled()) {
+                                                log.debug(String.format("Member weight found: [cluster] %s [member] %s [weight] %d", member.getClusterId(), member.getMemberId(), weight));
+                                            }
+                                            totalWeight += weight;
                                         }
-                                        totalWeight += weight;
                                     }
-                                }
-                            } catch (IOException e) {
-                                if (log.isErrorEnabled()) {
-                                    log.error(e);
+                                } catch (IOException e) {
+                                    if (log.isErrorEnabled()) {
+                                        log.error(e);
+                                    }
                                 }
                             }
                         }
diff --git a/extensions/load-balancer/haproxy-extension/src/main/license/LICENSE b/extensions/load-balancer/haproxy-extension/src/main/license/LICENSE
index 7f4642f..d9da95e 100644
--- a/extensions/load-balancer/haproxy-extension/src/main/license/LICENSE
+++ b/extensions/load-balancer/haproxy-extension/src/main/license/LICENSE
@@ -291,10 +291,10 @@ neethi-2.0.4.wso2v4.jar
 not-yet-commons-ssl-0.3.9.jar
 opencsv-1.8.wso2v1.jar
 org.apache.log4j-1.2.13.v200706111418.jar
-org.apache.stratos.common-4.0.0-SNAPSHOT.jar
-org.apache.stratos.load.balancer.common-4.0.0-incubating.jar
-org.apache.stratos.load.balancer.extension.api-4.0.0-incubating.jar
-org.apache.stratos.messaging-4.0.0-incubating.jar
+org.apache.stratos.common-4.0.0.jar
+org.apache.stratos.load.balancer.common-4.0.0.jar
+org.apache.stratos.load.balancer.extension.api-4.0.0.jar
+org.apache.stratos.messaging-4.0.0.jar
 poi-3.9.jar
 poi-ooxml-3.9.0.wso2v1.jar
 poi-ooxml-3.9.jar
@@ -457,7 +457,6 @@ slf4j-log4j12-1.7.5.jar
 
 The MIT License (MIT)
 
-Copyright (c) 2004-2013 QOS.ch
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
diff --git a/extensions/load-balancer/haproxy-extension/src/main/templates/haproxy.cfg.template b/extensions/load-balancer/haproxy-extension/src/main/templates/haproxy.cfg.template
index c58ce87..0c62939 100644
--- a/extensions/load-balancer/haproxy-extension/src/main/templates/haproxy.cfg.template
+++ b/extensions/load-balancer/haproxy-extension/src/main/templates/haproxy.cfg.template
@@ -9,4 +9,11 @@ defaults
     timeout client 50000ms
     timeout server 50000ms
 
-$frontend_backend_collection
\ No newline at end of file
+$frontend_http_collection
+
+$frontend_https_collection
+
+$backend_http_collection
+
+$backend_https_collection
+
diff --git a/extensions/load-balancer/pom.xml b/extensions/load-balancer/pom.xml
index e6357b0..9a42bea 100644
--- a/extensions/load-balancer/pom.xml
+++ b/extensions/load-balancer/pom.xml
@@ -23,7 +23,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-extensions</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/extensions/pom.xml b/extensions/pom.xml
index e30e226..a90d356 100644
--- a/extensions/pom.xml
+++ b/extensions/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/features/autoscaler/org.apache.stratos.autoscaler.feature/pom.xml b/features/autoscaler/org.apache.stratos.autoscaler.feature/pom.xml
index ccd771c..4ca80ca 100644
--- a/features/autoscaler/org.apache.stratos.autoscaler.feature/pom.xml
+++ b/features/autoscaler/org.apache.stratos.autoscaler.feature/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>autoscaler-feature</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/features/autoscaler/pom.xml b/features/autoscaler/pom.xml
index e4a8869..a166f3b 100644
--- a/features/autoscaler/pom.xml
+++ b/features/autoscaler/pom.xml
@@ -21,7 +21,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-features-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/features/cloud-controller/org.apache.stratos.cloud.controller.feature/pom.xml b/features/cloud-controller/org.apache.stratos.cloud.controller.feature/pom.xml
index f5de61a..40d9775 100644
--- a/features/cloud-controller/org.apache.stratos.cloud.controller.feature/pom.xml
+++ b/features/cloud-controller/org.apache.stratos.cloud.controller.feature/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>cloud-controller-feature</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
@@ -88,16 +88,7 @@
            <artifactId>openstack-nova</artifactId>
            <version>1.7.1-stratos</version>
          </dependency>
-         <dependency>
-            <groupId>org.apache.stratos</groupId>
-            <artifactId>docker</artifactId>
-            <version>1.7.1-stratos</version>
-         </dependency>
-        <dependency>
-            <groupId>org.apache.commons</groupId>
-            <artifactId>commons-compress</artifactId>
-            <version>1.5</version>
-        </dependency>
+         
          <dependency>
            <groupId>org.apache.jclouds.api</groupId>
            <artifactId>openstack-keystone</artifactId>
@@ -241,8 +232,6 @@
                                 <bundleDef>org.apache.stratos:ec2:1.7.1-stratos</bundleDef>
                                 <bundleDef>org.apache.stratos:openstack-nova:1.7.1-stratos</bundleDef>
                                 <bundleDef>org.apache.stratos:vcloud:1.7.1-stratos</bundleDef>
-                                <bundleDef>org.apache.stratos:docker:1.7.1-stratos</bundleDef>
-                                <bundleDef>org.apache.commons:commons-compress:1.5</bundleDef>
                                 <bundleDef>com.jamesmurty.utils.wso2:java-xmlbuilder:0.4.wso2v1</bundleDef>
                                 <bundleDef>org.apache.jclouds.common:openstack-common:${jclouds.version}</bundleDef>
                                 <bundleDef>org.apache.jclouds.api:openstack-keystone:${jclouds.version}</bundleDef>
diff --git a/features/cloud-controller/org.apache.stratos.cloud.controller.feature/src/main/resources/conf/cloud-controller.xml b/features/cloud-controller/org.apache.stratos.cloud.controller.feature/src/main/resources/conf/cloud-controller.xml
index 07202f6..24ff621 100644
--- a/features/cloud-controller/org.apache.stratos.cloud.controller.feature/src/main/resources/conf/cloud-controller.xml
+++ b/features/cloud-controller/org.apache.stratos.cloud.controller.feature/src/main/resources/conf/cloud-controller.xml
@@ -62,7 +62,7 @@
             		<property name="instanceType" value="m1.large"/>
             		<property name="keyPair" value="nirmal-key"/>
 		</iaasProvider-->
-		<!-- iaasProvider type="openstack" name="openstack specific details">
+		<iaasProvider type="openstack" name="openstack specific details">
             		<className>org.apache.stratos.cloud.controller.iaases.OpenstackNovaIaas</className>
 			<provider>openstack-nova</provider>
 			<identity svns:secretAlias="cloud.controller.openstack.identity">demo:demo</identity>
@@ -72,12 +72,6 @@
 			<property name="jclouds.api-version" value="2.0/" />
 			<property name="X" value="x" />
 			<property name="Y" value="y" />
-		</iaasProvider -->
-        <iaasProvider type="docker" name="Docker">
-            <className>org.apache.stratos.cloud.controller.iaases.DockerIaas</className>
-            <provider>docker</provider>
-            <identity svns:secretAlias="cloud.controller.docker.identity">identity</identity>
-            <credential svns:secretAlias="cloud.controller.docker.credential">credential</credential>
-        </iaasProvider>
+		</iaasProvider>
 	</iaasProviders>
 </cloudController>
diff --git a/features/cloud-controller/pom.xml b/features/cloud-controller/pom.xml
index 372d100..5d6e286 100644
--- a/features/cloud-controller/pom.xml
+++ b/features/cloud-controller/pom.xml
@@ -23,7 +23,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-features-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/features/load-balancer/org.apache.stratos.load.balancer.common.feature/pom.xml b/features/load-balancer/org.apache.stratos.load.balancer.common.feature/pom.xml
index 431d71a..82905d7 100644
--- a/features/load-balancer/org.apache.stratos.load.balancer.common.feature/pom.xml
+++ b/features/load-balancer/org.apache.stratos.load.balancer.common.feature/pom.xml
@@ -24,7 +24,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>loadbalancer-features</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/features/load-balancer/org.apache.stratos.load.balancer.feature/pom.xml b/features/load-balancer/org.apache.stratos.load.balancer.feature/pom.xml
index b041e99..4712142 100644
--- a/features/load-balancer/org.apache.stratos.load.balancer.feature/pom.xml
+++ b/features/load-balancer/org.apache.stratos.load.balancer.feature/pom.xml
@@ -24,7 +24,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>loadbalancer-features</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/features/load-balancer/pom.xml b/features/load-balancer/pom.xml
index e6a4071..2185459 100644
--- a/features/load-balancer/pom.xml
+++ b/features/load-balancer/pom.xml
@@ -21,7 +21,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-features-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/features/manager/cartridge-mgt/org.apache.stratos.cartridge.mgt.ui.feature/pom.xml b/features/manager/cartridge-mgt/org.apache.stratos.cartridge.mgt.ui.feature/pom.xml
index e17db91..a5e2f12 100644
--- a/features/manager/cartridge-mgt/org.apache.stratos.cartridge.mgt.ui.feature/pom.xml
+++ b/features/manager/cartridge-mgt/org.apache.stratos.cartridge.mgt.ui.feature/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>cartridge-mgt-feature</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/features/manager/cartridge-mgt/pom.xml b/features/manager/cartridge-mgt/pom.xml
index 8341740..7f3c77d 100644
--- a/features/manager/cartridge-mgt/pom.xml
+++ b/features/manager/cartridge-mgt/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-features-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
         <relativePath>../../pom.xml</relativePath>
     </parent>
 
diff --git a/features/manager/common/org.apache.stratos.common.feature/pom.xml b/features/manager/common/org.apache.stratos.common.feature/pom.xml
index 3292237..50abe31 100644
--- a/features/manager/common/org.apache.stratos.common.feature/pom.xml
+++ b/features/manager/common/org.apache.stratos.common.feature/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>common-feature</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/features/manager/common/org.apache.stratos.common.server.feature/pom.xml b/features/manager/common/org.apache.stratos.common.server.feature/pom.xml
index b839abe..ac855d0 100644
--- a/features/manager/common/org.apache.stratos.common.server.feature/pom.xml
+++ b/features/manager/common/org.apache.stratos.common.server.feature/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>common-feature</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/features/manager/common/org.apache.stratos.common.ui.feature/pom.xml b/features/manager/common/org.apache.stratos.common.ui.feature/pom.xml
index 9bbd4b8..70ccd0c 100644
--- a/features/manager/common/org.apache.stratos.common.ui.feature/pom.xml
+++ b/features/manager/common/org.apache.stratos.common.ui.feature/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>common-feature</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/features/manager/common/pom.xml b/features/manager/common/pom.xml
index 11b18df..f329143 100644
--- a/features/manager/common/pom.xml
+++ b/features/manager/common/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-manager-features</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/features/manager/deployment/pom.xml b/features/manager/deployment/pom.xml
index fd60639..4898576 100644
--- a/features/manager/deployment/pom.xml
+++ b/features/manager/deployment/pom.xml
@@ -21,7 +21,7 @@
    <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-manager-features</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/features/manager/gapp/org.apache.stratos.gapp.feature/pom.xml b/features/manager/gapp/org.apache.stratos.gapp.feature/pom.xml
index 82b4523..9f69ad4 100644
--- a/features/manager/gapp/org.apache.stratos.gapp.feature/pom.xml
+++ b/features/manager/gapp/org.apache.stratos.gapp.feature/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>gapp-feature</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/features/manager/gapp/org.apache.stratos.gapp.server.feature/pom.xml b/features/manager/gapp/org.apache.stratos.gapp.server.feature/pom.xml
index 4a3f3c1..1929f1f 100644
--- a/features/manager/gapp/org.apache.stratos.gapp.server.feature/pom.xml
+++ b/features/manager/gapp/org.apache.stratos.gapp.server.feature/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>gapp-feature</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
 	<relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/features/manager/gapp/org.apache.stratos.gapp.ui.feature/pom.xml b/features/manager/gapp/org.apache.stratos.gapp.ui.feature/pom.xml
index 48fcec3..494701c 100644
--- a/features/manager/gapp/org.apache.stratos.gapp.ui.feature/pom.xml
+++ b/features/manager/gapp/org.apache.stratos.gapp.ui.feature/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>gapp-feature</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
 	<relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/features/manager/gapp/pom.xml b/features/manager/gapp/pom.xml
index fe2ff32..c1c5613 100644
--- a/features/manager/gapp/pom.xml
+++ b/features/manager/gapp/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-features-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
         <relativePath>../../pom.xml</relativePath>
     </parent>
 
diff --git a/features/manager/logging-mgt/org.apache.stratos.logging.mgt.feature/pom.xml b/features/manager/logging-mgt/org.apache.stratos.logging.mgt.feature/pom.xml
index 6a809ff..041ec74 100644
--- a/features/manager/logging-mgt/org.apache.stratos.logging.mgt.feature/pom.xml
+++ b/features/manager/logging-mgt/org.apache.stratos.logging.mgt.feature/pom.xml
@@ -22,7 +22,7 @@
    <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>logging-mgt-feature</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/features/manager/logging-mgt/pom.xml b/features/manager/logging-mgt/pom.xml
index c5f7774..67bc981 100644
--- a/features/manager/logging-mgt/pom.xml
+++ b/features/manager/logging-mgt/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-manager-features</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
     <modelVersion>4.0.0</modelVersion>
     <artifactId>logging-mgt-feature</artifactId>
diff --git a/features/manager/metadataservice/org.apache.stratos.metadataservice.feature/pom.xml b/features/manager/metadataservice/org.apache.stratos.metadataservice.feature/pom.xml
new file mode 100644
index 0000000..b711037
--- /dev/null
+++ b/features/manager/metadataservice/org.apache.stratos.metadataservice.feature/pom.xml
@@ -0,0 +1,308 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Licensed to the Apache Software Foundation (ASF) under one
+    or more contributor license agreements.  See the NOTICE file
+    distributed with this work for additional information
+    regarding copyright ownership.  The ASF licenses this file
+    to you under the Apache License, Version 2.0 (the
+    "License"); you may not use this file except in compliance
+    with the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing,
+    software distributed under the License is distributed on an
+    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+    KIND, either express or implied.  See the License for the
+    specific language governing permissions and limitations
+    under the License.
+-->
+
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+
+    <parent>
+        <groupId>org.apache.stratos</groupId>
+        <artifactId>stratos-manager-features</artifactId>
+        <version>4.0.0</version>
+        <relativePath>../../pom.xml</relativePath>
+    </parent>
+
+    <modelVersion>4.0.0</modelVersion>
+    <artifactId>org.apache.stratos.metadataservice.feature</artifactId>
+    <packaging>pom</packaging>
+    <name>Apache Stratos - Meta Data Service feature</name>
+    <description>This feature packs the Meta Data Service of stratos</description>
+
+    <dependencies>
+        <!--CXF runtime environment-->
+        <dependency>
+            <groupId>org.apache.cxf</groupId>
+            <artifactId>cxf-bundle</artifactId>
+            <version>2.7.6</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.cxf.xjcplugins</groupId>
+            <artifactId>cxf-xjc-dv</artifactId>
+            <version>2.6.2</version>
+        </dependency>
+        <dependency>
+          <groupId>commons-lang</groupId>
+          <artifactId>commons-lang</artifactId>
+          <version>2.6</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.cxf.xjc-utils</groupId>
+            <artifactId>cxf-xjc-runtime</artifactId>
+            <version>2.6.2</version>
+        </dependency>
+        <dependency>
+          <groupId>org.apache.velocity</groupId>
+          <artifactId>velocity</artifactId>
+          <version>1.7</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.cxf.xjcplugins</groupId>
+            <artifactId>cxf-xjc-ts</artifactId>
+            <version>2.6.2</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.cxf.xjcplugins</groupId>
+            <artifactId>cxf-xjc-boolean</artifactId>
+            <version>2.6.2</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.cxf.xjcplugins</groupId>
+            <artifactId>cxf-xjc-bug671</artifactId>
+            <version>2.6.2</version>
+        </dependency>
+        <dependency>
+            <groupId>net.sf.ehcache</groupId>
+            <artifactId>ehcache-core</artifactId>
+            <version>2.5.1</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.httpcomponents</groupId>
+            <artifactId>httpasyncclient</artifactId>
+            <version>4.0-beta3</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.httpcomponents</groupId>
+            <artifactId>httpclient</artifactId>
+            <version>4.2.5</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.httpcomponents</groupId>
+            <artifactId>httpcore</artifactId>
+            <version>4.2.4</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.httpcomponents</groupId>
+            <artifactId>httpcore-nio</artifactId>
+            <version>4.2.4</version>
+        </dependency>
+        <dependency>
+            <groupId>javax.ws.rs</groupId>
+            <artifactId>javax.ws.rs-api</artifactId>
+            <version>2.0-m10</version>
+        </dependency>
+        <dependency>
+            <groupId>com.sun.xml.bind</groupId>
+            <artifactId>jaxb-impl</artifactId>
+            <version>2.1.13</version>
+        </dependency>
+        <dependency>
+            <groupId>com.sun.xml.bind</groupId>
+            <artifactId>jaxb-xjc</artifactId>
+            <version>2.1.13</version>
+        </dependency>
+        <dependency>
+            <groupId>org.codehaus.woodstox</groupId>
+            <artifactId>woodstox-core-asl</artifactId>
+            <version>4.2.0</version>
+        </dependency>
+        <dependency>
+            <groupId>org.codehaus.woodstox</groupId>
+            <artifactId>stax2-api</artifactId>
+            <version>3.1.1</version>
+        </dependency>
+        <dependency>
+            <groupId>org.codehaus.jettison</groupId>
+            <artifactId>jettison</artifactId>
+            <version>1.3.4</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.neethi</groupId>
+            <artifactId>neethi</artifactId>
+            <version>3.0.2</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.ws.security</groupId>
+            <artifactId>wss4j</artifactId>
+            <version>1.6.11</version>
+        </dependency>
+        <dependency>
+            <groupId>xml-resolver</groupId>
+            <artifactId>xml-resolver</artifactId>
+            <version>1.2</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.ws.xmlschema</groupId>
+            <artifactId>xmlschema-core</artifactId>
+            <version>2.0.3</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.santuario</groupId>
+            <artifactId>xmlsec</artifactId>
+            <version>1.5.5</version>
+        </dependency>
+        <dependency>
+            <groupId>wsdl4j</groupId>
+            <artifactId>wsdl4j</artifactId>
+            <version>1.6.3</version>
+        </dependency>
+        <dependency>
+            <groupId>commons-logging</groupId>
+            <artifactId>commons-logging</artifactId>
+            <version>1.1.1</version>
+        </dependency>
+        <dependency>
+          <groupId>commons-collections</groupId>
+          <artifactId>commons-collections</artifactId>
+          <version>3.2.1</version>
+        </dependency>
+        <dependency>
+          <groupId>aopalliance</groupId>
+          <artifactId>aopalliance</artifactId>
+          <version>1.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-aop</artifactId>
+            <version>3.0.7.RELEASE</version>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-asm</artifactId>
+            <version>3.0.7.RELEASE</version>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-beans</artifactId>
+            <version>3.0.7.RELEASE</version>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-context</artifactId>
+            <version>3.0.7.RELEASE</version>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-core</artifactId>
+            <version>3.0.7.RELEASE</version>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-expression</artifactId>
+            <version>3.0.7.RELEASE</version>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-web</artifactId>
+            <version>3.0.7.RELEASE</version>
+        </dependency>
+        <dependency>
+            <groupId>org.wso2.carbon.webapp.ext</groupId>
+            <artifactId>carbon-cxf</artifactId>
+            <version>1.0.0</version>
+        </dependency>
+        <!--dependency>
+            <groupId>org.apache.stratos</groupId>
+            <artifactId>org.apache.stratos.autoscaler.service.stub</artifactId>
+            <version>${project.version}</version>
+        </dependency-->
+    </dependencies>
+
+    <build>
+        <resources>
+            <resource>
+                <directory>${project.build.directory}/runtime/</directory>
+            </resource>
+            <resource>
+                <directory>${project.build.directory}/web-app/</directory>
+            </resource>
+	    <resource>
+                <directory>src/main/resources</directory>
+            </resource>
+        </resources>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-dependency-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>copy-dependencies</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>copy-dependencies</goal>
+                        </goals>
+                        <configuration>
+                            <outputDirectory>${project.build.directory}/runtime/cxf</outputDirectory>
+			    <excludeTransitive>true</excludeTransitive>
+                        </configuration>
+                    </execution>
+                    <execution>
+                        <id>pack-REST-webapp</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>copy</goal>
+                        </goals>
+                        <configuration>
+                            <artifactItems>
+                                <artifactItem>
+                                    <groupId>org.apache.stratos</groupId>
+                                    <artifactId>org.apache.stratos.metadataservice</artifactId>
+                                    <version>${project.version}</version>
+                                    <type>war</type>
+                                    <overWrite>true</overWrite>
+                                    <outputDirectory>${project.build.directory}/web-app/web-app</outputDirectory>
+                                    <destFileName>stratosmetadata.war</destFileName>
+                                </artifactItem>
+                            </artifactItems>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+            <plugin>
+                <groupId>org.wso2.maven</groupId>
+                <artifactId>carbon-p2-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>p2-feature-generation</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>p2-feature-gen</goal>
+                        </goals>
+                        <configuration>
+                            <id>org.apache.stratos.metadataservice</id>
+                            <propertiesFile>../../etc/feature.properties</propertiesFile>
+                            <adviceFile>
+                                <properties>
+                                    <propertyDef>org.wso2.carbon.p2.category.type:server</propertyDef>
+                                    <propertyDef>org.eclipse.equinox.p2.type.group:false</propertyDef>
+                                </properties>
+                            </adviceFile>
+			    <bundles>
+				<bundleDef>org.apache.stratos:org.apache.stratos.autoscaler.service.stub:${project.version}</bundleDef>
+			    </bundles>
+                            <importFeatures>
+                                <importFeatureDef>org.wso2.carbon.core:${wso2carbon.version}</importFeatureDef>
+                            </importFeatures>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+
+        </plugins>
+    </build>
+</project>
diff --git a/features/manager/metadataservice/org.apache.stratos.metadataservice.feature/src/main/resources/p2.inf b/features/manager/metadataservice/org.apache.stratos.metadataservice.feature/src/main/resources/p2.inf
new file mode 100644
index 0000000..91fef8c
--- /dev/null
+++ b/features/manager/metadataservice/org.apache.stratos.metadataservice.feature/src/main/resources/p2.inf
@@ -0,0 +1,23 @@
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#  http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+
+instructions.configure = \
+org.eclipse.equinox.p2.touchpoint.natives.copy(source:${installFolder}/../features/org.apache.stratos.rest.endpoint_${feature.version}/cxf,target:${installFolder}/../../../lib/runtimes/cxf,overwrite:true);\
+org.eclipse.equinox.p2.touchpoint.natives.copy(source:${installFolder}/../features/org.apache.stratos.rest.endpoint_${feature.version}/web-app/stratos.war,target:${installFolder}/../../deployment/server/webapps/stratos.war,overwrite:true);\
+org.eclipse.equinox.p2.touchpoint.natives.copy(source:${installFolder}/../features/org.apache.stratos.rest.endpoint_${feature.version}/tomcat/webapp-classloading.xml,target:${installFolder}/../../conf/tomcat/webapp-classloading.xml,overwrite:true);\
+org.eclipse.equinox.p2.touchpoint.natives.copy(source:${installFolder}/../features/org.apache.stratos.rest.endpoint_${feature.version}/tomcat/webapp-classloading-environments.xml,target:${installFolder}/../../conf/tomcat/webapp-classloading-environments.xml,overwrite:true);\
+org.eclipse.equinox.p2.touchpoint.natives.copy(source:${installFolder}/../features/org.apache.stratos.rest.endpoint_${feature.version}/tomcat/context.xml,target:${installFolder}/../../conf/tomcat/context.xml,overwrite:true);\
diff --git a/features/manager/metadataservice/org.apache.stratos.metadataservice.feature/src/main/resources/tomcat/context.xml b/features/manager/metadataservice/org.apache.stratos.metadataservice.feature/src/main/resources/tomcat/context.xml
new file mode 100644
index 0000000..a85c9af
--- /dev/null
+++ b/features/manager/metadataservice/org.apache.stratos.metadataservice.feature/src/main/resources/tomcat/context.xml
@@ -0,0 +1,36 @@
+<?xml version='1.0' encoding='utf-8'?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements.  See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to You under the Apache License, Version 2.0
+  (the "License"); you may not use this file except in compliance with
+  the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<!-- The contents of this file will be loaded for each web application -->
+<Context crossContext="true">
+
+    <!-- Default set of monitored resources -->
+
+    <Loader className="org.wso2.carbon.webapp.mgt.loader.CarbonWebappLoader" loaderClass="org.wso2.carbon.webapp.mgt.loader.CarbonWebappClassLoader"/>
+
+    <!-- Uncomment this to disable session persistence across Tomcat restarts -->
+    <!--
+    <Manager pathname="" />
+    -->
+
+    <!-- Uncomment this to enable Comet connection tacking (provides events
+         on session expiration as well as webapp lifecycle) -->
+    <!--
+    <Valve className="org.apache.catalina.valves.CometConnectionManagerValve" />
+    -->
+
+</Context>
diff --git a/features/manager/metadataservice/org.apache.stratos.metadataservice.feature/src/main/resources/tomcat/webapp-classloading-environments.xml b/features/manager/metadataservice/org.apache.stratos.metadataservice.feature/src/main/resources/tomcat/webapp-classloading-environments.xml
new file mode 100644
index 0000000..7e7dd0a
--- /dev/null
+++ b/features/manager/metadataservice/org.apache.stratos.metadataservice.feature/src/main/resources/tomcat/webapp-classloading-environments.xml
@@ -0,0 +1,68 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<!--
+  ~ Copyright 2005-2013 WSO2, Inc. (http://wso2.com)
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<!--
+    This file defines the different classloading environments. This is container level config file. Individual webapps are not allowed to override these elements.
+    
+    ${carbon.home} represents the carbon.home system property.
+    Other system properties can be specified in a similar manner.
+-->
+<Classloading xmlns="http://wso2.org/projects/as/classloading-environments">
+
+    <!--
+     We define three different environments.
+
+     1) Delegated environment - This is a virtual environment where all the resources belongs to these environments are loaded from the parent. This way you can control whats being loaded from the parent classloader. Only the packages and resources specified in the delegated environments are loaded from the parent. All the others are loaded from the local webapp's classpath. If a webapps has speficied two or more delegated environments, they all get merged at runtime.
+     -->
+    <DelegatedEnvironments>
+
+        <DelegatedEnvironment>
+            <Name>Tomcat</Name>
+            <DelegatedPackages>javax.annotation.*,javax.ejb,javax.el,javax.persistence,javax.servlet.*,javax.xml,javax.xml.ws,org.apache.catalina.*,org.apache.coyote.*,org.apache.el.*,com.sun.el.*,org.apache.jasper.*,org.apache.naming.*,org.apache.tomcat.*,org.wso2.carbon.tomcat.jndi.*</DelegatedPackages>
+        </DelegatedEnvironment>
+
+        <DelegatedEnvironment>
+            <Name>Carbon</Name>
+            <DelegatedPackages>*,!org.springframework.*</DelegatedPackages>
+        </DelegatedEnvironment>
+
+    </DelegatedEnvironments>
+
+
+    <!--
+         2) Shared  environment - These environments are loaded once and shared between multiple webapps. Certain runtimes can be shared by multiple webapps. So no need to load them per webapp.
+     -->
+
+    <!--SharedEnvironments>
+        <SharedEnvironment>
+            <name>Spring</name>
+            <Classpath></Classpath>
+        </SharedEnvironment>
+    </SharedEnvironments-->
+
+    <!--
+     3) Exclusive environment - These environments are loaded per webapp. Exclusive environments define a set of resources(jars) which should be loaded per webapp. e.g. CXF runtime.
+     -->
+    <ExclusiveEnvironments>
+        <ExclusiveEnvironment>
+            <Name>CXF</Name>
+            <Classpath>${carbon.home}/lib/runtimes/cxf/*.jar;${carbon.home}/lib/runtimes/cxf/</Classpath>
+        </ExclusiveEnvironment>
+    </ExclusiveEnvironments>
+
+</Classloading>
diff --git a/features/manager/metadataservice/org.apache.stratos.metadataservice.feature/src/main/resources/tomcat/webapp-classloading.xml b/features/manager/metadataservice/org.apache.stratos.metadataservice.feature/src/main/resources/tomcat/webapp-classloading.xml
new file mode 100644
index 0000000..f42616f
--- /dev/null
+++ b/features/manager/metadataservice/org.apache.stratos.metadataservice.feature/src/main/resources/tomcat/webapp-classloading.xml
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<!--
+  ~ Copyright 2005-2013 WSO2, Inc. (http://wso2.com)
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<!--
+    This file defines class loading policy of the whole container. But this behaviour can be overridden by individual webapps by putting this file into the META-INF/ directory.   
+-->
+<Classloading xmlns="http://wso2.org/projects/as/classloading">
+
+    <!-- Parent-first or child-first. Default behaviour is child-first.-->
+    <ParentFirst>false</ParentFirst>
+
+    <!-- 
+	Default environments that contains provides to all the webapps. This can be overridden by individual webapps by specifing required environments 
+	Tomcat environment is the default and every webapps gets it even if they didn't specify it.
+	e.g. If a webapps requires CXF, they will get both Tomcat and CXF.
+     -->
+    <Environments>Carbon</Environments>
+</Classloading>
diff --git a/features/manager/metadataservice/pom.xml b/features/manager/metadataservice/pom.xml
new file mode 100644
index 0000000..073d33f
--- /dev/null
+++ b/features/manager/metadataservice/pom.xml
@@ -0,0 +1,139 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- 
+  #  Licensed to the Apache Software Foundation (ASF) under one
+  #  or more contributor license agreements.  See the NOTICE file
+  #  distributed with this work for additional information
+  #  regarding copyright ownership.  The ASF licenses this file
+  #  to you under the Apache License, Version 2.0 (the
+  #  "License"); you may not use this file except in compliance
+  #  with the License.  You may obtain a copy of the License at
+  #  
+  #  http://www.apache.org/licenses/LICENSE-2.0
+  #  
+  #  Unless required by applicable law or agreed to in writing,
+  #  software distributed under the License is distributed on an
+  n#  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  #  KIND, either express or implied.  See the License for the
+  #  specific language governing permissions and limitations
+  #  under the License.
+  --> 
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+
+    <parent>
+        <groupId>org.apache.stratos</groupId>
+        <artifactId>stratos-manager-features</artifactId>
+        <version>4.0.0</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+    <artifactId>metadataservice</artifactId>
+    <packaging>pom</packaging>
+    <name>Apache Stratos - metadataservice Module</name>
+    <url>http://apache.org</url>
+
+    <modules>
+        <module>org.apache.stratos.metadataservice.feature</module>
+    </modules>
+
+    <dependencyManagement>
+        <dependencies>
+
+            <dependency>
+                <groupId>org.wso2.carbon</groupId>
+                <artifactId>org.wso2.carbon.logging.service</artifactId>
+                <version>${wso2carbon.version.logging.mgt}</version>
+            </dependency>
+              <dependency>
+                <groupId>org.wso2.carbon</groupId>
+                <artifactId>org.wso2.carbon.logging.summarizer</artifactId>
+                <version>${wso2carbon.version.logging.mgt}</version>
+            </dependency>
+            <dependency>
+                <groupId>org.wso2.carbon</groupId>
+                <artifactId>org.wso2.carbon.logging.admin.ui</artifactId>
+                <version>${wso2carbon.version.logging.mgt}</version>
+            </dependency>
+		<dependency>
+                <groupId>org.wso2.carbon</groupId>
+                <artifactId>org.wso2.carbon.logging.view.ui</artifactId>
+                <version>${wso2carbon.version.logging.mgt}</version>
+            </dependency>
+	    <dependency>
+                <groupId>org.springframework.ws.wso2</groupId>
+                <artifactId>spring.framework</artifactId>
+		<version>${orbit.version.spring}</version>
+            </dependency>
+           <dependency>
+                <groupId>com.google.guava.wso2</groupId>
+                <artifactId>guava</artifactId>
+                <version>${guava.version}</version>
+            </dependency>
+          <!--Cassandra -->
+
+            <dependency>
+                <groupId>org.apache.cassandra.wso2</groupId>
+                <artifactId>apache-cassandra</artifactId>
+                <version>${cassandra.version}</version>
+            </dependency>
+
+            <!--Hector-->
+            <dependency>
+                <groupId>org.hectorclient</groupId>
+                <artifactId>hector-core</artifactId>
+                <version>${hector-core.version}</version>
+            </dependency>
+            <dependency>
+                <groupId>libthrift.wso2</groupId>
+                <artifactId>libthrift</artifactId>
+                <version>${libthrift.version}</version>
+            </dependency>
+            <dependency>
+                <groupId>org.perf4j.wso2</groupId>
+                <artifactId>perf4j</artifactId>
+                <version>${perf4j.version}</version>
+            </dependency>
+            <dependency>
+                <groupId>org.cliffc.high_scale_lib.wso2</groupId>
+                <artifactId>high-scale-lib</artifactId>
+                <version>${highscale.version}</version>
+            </dependency>
+            <dependency>
+                <groupId>org.slf4j</groupId>
+                <artifactId>slf4j-api</artifactId>
+                <version>${slf4j.version}</version>
+            </dependency>
+            <dependency>
+                <groupId>org.slf4j</groupId>
+                <artifactId>slf4j-log4j12</artifactId>
+                <version>${slf4j.version}</version>
+            </dependency>
+            <dependency>
+                <groupId>antlr.wso2</groupId>
+                <artifactId>antlr</artifactId>
+                <version>${antlr.version}</version>
+            </dependency>
+            <dependency>
+                <groupId>org.antlr.wso2</groupId>
+                <artifactId>antlr-runtime</artifactId>
+                <version>${antlr.version}</version>
+            </dependency>
+            <dependency>
+                <groupId>org.wso2.carbon</groupId>
+                <artifactId>org.wso2.carbon.databridge.datapublisher.feature</artifactId>
+                <version>${wso2carbon.version.logging.mgt}</version>
+                   <type>zip</type>
+           </dependency>
+        </dependencies>
+    </dependencyManagement>
+   <properties>
+         <wso2carbon.version.logging.mgt>${wso2carbon.version}</wso2carbon.version.logging.mgt>
+        <antlr.version>3.2.0.wso2v1</antlr.version>
+         <hector-core.version>1.1-0</hector-core.version>
+        <libthrift.version>0.7.wso2v1</libthrift.version>
+        <perf4j.version>0.9.12.wso2v1</perf4j.version>
+        <highscale.version>1.1.2.wso2v1</highscale.version>
+        <slf4j.version>1.6.1</slf4j.version>
+        <guava.version>${google.guava.wso2.version}</guava.version>
+	<orbit.version.spring>3.1.0.wso2v1</orbit.version.spring>
+   </properties>
+</project>
+
diff --git a/features/manager/pom.xml b/features/manager/pom.xml
index 4445e34..dd9853b 100644
--- a/features/manager/pom.xml
+++ b/features/manager/pom.xml
@@ -23,7 +23,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-features-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
@@ -48,6 +48,7 @@
         <module>logging-mgt</module>
         <module>rest-endpoint/org.apache.stratos.rest.endpoint.feature</module>
         <module>styles/org.apache.stratos.manager.styles.feature</module>
+        <module>metadataservice/org.apache.stratos.metadataservice.feature</module>
     </modules>
 
     <properties>
diff --git a/features/manager/rest-endpoint/org.apache.stratos.rest.endpoint.feature/pom.xml b/features/manager/rest-endpoint/org.apache.stratos.rest.endpoint.feature/pom.xml
index 1f9be03..96736c6 100644
--- a/features/manager/rest-endpoint/org.apache.stratos.rest.endpoint.feature/pom.xml
+++ b/features/manager/rest-endpoint/org.apache.stratos.rest.endpoint.feature/pom.xml
@@ -23,7 +23,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-manager-features</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
         <relativePath>../../pom.xml</relativePath>
     </parent>
 
diff --git a/features/manager/status-monitor/org.apache.stratos.status.monitor.agent.feature/pom.xml b/features/manager/status-monitor/org.apache.stratos.status.monitor.agent.feature/pom.xml
index 0e22057..b3bb632 100644
--- a/features/manager/status-monitor/org.apache.stratos.status.monitor.agent.feature/pom.xml
+++ b/features/manager/status-monitor/org.apache.stratos.status.monitor.agent.feature/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
    	<artifactId>status-monitor-feature</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
 	<relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/features/manager/status-monitor/org.apache.stratos.status.monitor.feature/pom.xml b/features/manager/status-monitor/org.apache.stratos.status.monitor.feature/pom.xml
index 0fa6ffc..52d82fb 100644
--- a/features/manager/status-monitor/org.apache.stratos.status.monitor.feature/pom.xml
+++ b/features/manager/status-monitor/org.apache.stratos.status.monitor.feature/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
     	<artifactId>status-monitor-feature</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
 	<relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/features/manager/status-monitor/org.apache.stratos.status.monitor.server.feature/pom.xml b/features/manager/status-monitor/org.apache.stratos.status.monitor.server.feature/pom.xml
index 8c449c0..dd3951f 100644
--- a/features/manager/status-monitor/org.apache.stratos.status.monitor.server.feature/pom.xml
+++ b/features/manager/status-monitor/org.apache.stratos.status.monitor.server.feature/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
    	<artifactId>status-monitor-feature</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
 	<relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/features/manager/status-monitor/org.apache.stratos.status.monitor.ui.feature/pom.xml b/features/manager/status-monitor/org.apache.stratos.status.monitor.ui.feature/pom.xml
index 8be0803..ce21dd1 100644
--- a/features/manager/status-monitor/org.apache.stratos.status.monitor.ui.feature/pom.xml
+++ b/features/manager/status-monitor/org.apache.stratos.status.monitor.ui.feature/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
    	<artifactId>status-monitor-feature</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
 	<relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/features/manager/status-monitor/pom.xml b/features/manager/status-monitor/pom.xml
index 1b28d8f..aa78135 100644
--- a/features/manager/status-monitor/pom.xml
+++ b/features/manager/status-monitor/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-features-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
         <relativePath>../../pom.xml</relativePath>
     </parent>
 
diff --git a/features/manager/stratos-mgt/org.apache.stratos.manager.feature/pom.xml b/features/manager/stratos-mgt/org.apache.stratos.manager.feature/pom.xml
index 8600a5a..2bbe9f1 100644
--- a/features/manager/stratos-mgt/org.apache.stratos.manager.feature/pom.xml
+++ b/features/manager/stratos-mgt/org.apache.stratos.manager.feature/pom.xml
@@ -23,7 +23,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-mgt-parent-feature</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/features/manager/stratos-mgt/org.apache.stratos.manager.server.feature/pom.xml b/features/manager/stratos-mgt/org.apache.stratos.manager.server.feature/pom.xml
index 51e4c36..3a44158 100644
--- a/features/manager/stratos-mgt/org.apache.stratos.manager.server.feature/pom.xml
+++ b/features/manager/stratos-mgt/org.apache.stratos.manager.server.feature/pom.xml
@@ -23,7 +23,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-mgt-parent-feature</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/features/manager/stratos-mgt/pom.xml b/features/manager/stratos-mgt/pom.xml
index 42ee208..66466a1 100644
--- a/features/manager/stratos-mgt/pom.xml
+++ b/features/manager/stratos-mgt/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-manager-features</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/features/manager/styles/org.apache.stratos.manager.styles.feature/pom.xml b/features/manager/styles/org.apache.stratos.manager.styles.feature/pom.xml
index baf32a2..eca7fdf 100644
--- a/features/manager/styles/org.apache.stratos.manager.styles.feature/pom.xml
+++ b/features/manager/styles/org.apache.stratos.manager.styles.feature/pom.xml
@@ -22,7 +22,7 @@
    <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-manager-features</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
 	<relativePath>../../pom.xml</relativePath>
     </parent>
 
diff --git a/features/manager/tenant-activity/org.apache.stratos.tenant.activity.server.feature/pom.xml b/features/manager/tenant-activity/org.apache.stratos.tenant.activity.server.feature/pom.xml
index a0353f0..ef91335 100644
--- a/features/manager/tenant-activity/org.apache.stratos.tenant.activity.server.feature/pom.xml
+++ b/features/manager/tenant-activity/org.apache.stratos.tenant.activity.server.feature/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>tenant-activity-feature</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/features/manager/tenant-activity/org.apache.stratos.tenant.activity.ui.feature/pom.xml b/features/manager/tenant-activity/org.apache.stratos.tenant.activity.ui.feature/pom.xml
index aacef85..f750871 100644
--- a/features/manager/tenant-activity/org.apache.stratos.tenant.activity.ui.feature/pom.xml
+++ b/features/manager/tenant-activity/org.apache.stratos.tenant.activity.ui.feature/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>tenant-activity-feature</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/features/manager/tenant-activity/pom.xml b/features/manager/tenant-activity/pom.xml
index 7e8661b..cb98a6d 100644
--- a/features/manager/tenant-activity/pom.xml
+++ b/features/manager/tenant-activity/pom.xml
@@ -21,7 +21,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-manager-features</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
     <modelVersion>4.0.0</modelVersion>
     <artifactId>tenant-activity-feature</artifactId>
diff --git a/features/manager/tenant-mgt/org.apache.stratos.tenant.mgt.core.feature/pom.xml b/features/manager/tenant-mgt/org.apache.stratos.tenant.mgt.core.feature/pom.xml
index 57ea989..0934d58 100644
--- a/features/manager/tenant-mgt/org.apache.stratos.tenant.mgt.core.feature/pom.xml
+++ b/features/manager/tenant-mgt/org.apache.stratos.tenant.mgt.core.feature/pom.xml
@@ -22,7 +22,7 @@
    <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>tenant-mgt-feature</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/features/manager/tenant-mgt/org.apache.stratos.tenant.mgt.server.feature/pom.xml b/features/manager/tenant-mgt/org.apache.stratos.tenant.mgt.server.feature/pom.xml
index 11ab62c..ff0ca2a 100644
--- a/features/manager/tenant-mgt/org.apache.stratos.tenant.mgt.server.feature/pom.xml
+++ b/features/manager/tenant-mgt/org.apache.stratos.tenant.mgt.server.feature/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>tenant-mgt-feature</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/features/manager/tenant-mgt/pom.xml b/features/manager/tenant-mgt/pom.xml
index 2757540..b5f1145 100644
--- a/features/manager/tenant-mgt/pom.xml
+++ b/features/manager/tenant-mgt/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-manager-features</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/features/messaging/org.apache.stratos.messaging.feature/pom.xml b/features/messaging/org.apache.stratos.messaging.feature/pom.xml
index bd64f01..b5281d1 100644
--- a/features/messaging/org.apache.stratos.messaging.feature/pom.xml
+++ b/features/messaging/org.apache.stratos.messaging.feature/pom.xml
@@ -24,7 +24,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>messaging-features</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/features/messaging/pom.xml b/features/messaging/pom.xml
index 3e15c22..9a7dbce 100644
--- a/features/messaging/pom.xml
+++ b/features/messaging/pom.xml
@@ -21,7 +21,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-features-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/features/pom.xml b/features/pom.xml
index 9f74e4e..8e5ed6b 100644
--- a/features/pom.xml
+++ b/features/pom.xml
@@ -23,7 +23,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/pom.xml b/pom.xml
index 856a615..39060fd 100644
--- a/pom.xml
+++ b/pom.xml
@@ -30,10 +30,10 @@
     <groupId>org.apache.stratos</groupId>
     <artifactId>stratos-parent</artifactId>
     <packaging>pom</packaging>
-    <version>4.0.0-SNAPSHOT</version>
+    <version>4.0.0</version>
     <name>Apache Stratos</name>
     <description>Apache Stratos is an open source polyglot Platform as a Service (PaaS) framework</description>
-    <url>http://stratos.incubator.apache.org</url>
+    <url>http://stratos.apache.org</url>
     <inceptionYear>2012</inceptionYear>
 
     <licenses>
@@ -57,24 +57,24 @@
     <mailingLists>
         <mailingList>
             <name>Developer List</name>
-            <subscribe>dev-subscribe@stratos.incubator.apache.org</subscribe>
-            <unsubscribe>dev-unsubscribe@stratos.incubator.apache.org</unsubscribe>
-            <post>dev@stratos.incubator.apache.org</post>
-            <archive>http://mail-archives.apache.org/mod_mbox/incubator-stratos-dev/</archive>
+            <subscribe>dev-subscribe@stratos.apache.org</subscribe>
+            <unsubscribe>dev-unsubscribe@stratos.apache.org</unsubscribe>
+            <post>dev@stratos.apache.org</post>
+            <archive>http://mail-archives.apache.org/mod_mbox/stratos-dev/</archive>
         </mailingList>
         <mailingList>
             <name>Commits List</name>
-            <subscribe>commits-subscribe@stratos.incubator.apache.org</subscribe>
-            <unsubscribe>commits-unsubscribe@stratos.incubator.apache.org</unsubscribe>
-            <archive>http://mail-archives.apache.org/mod_mbox/incubator-stratos-commits/</archive>
+            <subscribe>commits-subscribe@stratos.apache.org</subscribe>
+            <unsubscribe>commits-unsubscribe@stratos.apache.org</unsubscribe>
+            <archive>http://mail-archives.apache.org/mod_mbox/stratos-commits/</archive>
         </mailingList>
     </mailingLists>
 
     <scm>
-        <connection>scm:git:https://git-wip-us.apache.org/repos/asf/incubator-stratos.git</connection>
-        <developerConnection>scm:git:https://git-wip-us.apache.org/repos/asf/incubator-stratos.git</developerConnection>
-        <url>https://git-wip-us.apache.org/repos/asf?p=incubator-stratos.git</url>
-        <tag>HEAD</tag>
+        <connection>scm:git:https://git-wip-us.apache.org/repos/asf/stratos.git</connection>
+        <developerConnection>scm:git:https://git-wip-us.apache.org/repos/asf/stratos.git</developerConnection>
+        <url>https://git-wip-us.apache.org/repos/asf?p=stratos.git</url>
+        <tag>4.0.0-rc4</tag>
     </scm>
 
     <modules>
@@ -434,8 +434,6 @@
                         </goals>
                         <configuration>
                             <resourceBundles>
-                                <resourceBundle>org.apache:apache-incubator-disclaimer-resource-bundle:1.1
-                                </resourceBundle>
                                 <resourceBundle>org.apache:apache-jar-resource-bundle:1.4</resourceBundle>
                             </resourceBundles>
                         </configuration>
@@ -455,6 +453,8 @@
                         <configuration>
                             <excludes>
                                 <exclude>${project.build.directory}/**/*</exclude>
+                                <exclude>**/.gitignore</exclude>
+                                <exclude>**/.git/**/*</exclude>
                             </excludes>
                         </configuration>
                     </execution>
@@ -498,6 +498,13 @@
                             <goals>
                                 <goal>jar-no-fork</goal>
                             </goals>
+                            <configuration>
+                                <excludes>
+                                    <exclude>${project.build.directory}/**/*</exclude>
+                                    <exclude>**/.gitignore</exclude>
+                                    <exclude>**/.git/**/*</exclude>
+                                </excludes>
+                            </configuration>
                         </execution>
                     </executions>
                 </plugin>
diff --git a/products/cartridge-agent/modules/distribution/INSTALL.txt b/products/cartridge-agent/modules/distribution/INSTALL.txt
new file mode 100644
index 0000000..7653cc0
--- /dev/null
+++ b/products/cartridge-agent/modules/distribution/INSTALL.txt
@@ -0,0 +1,29 @@
+================================================================================
+                   Apache Stratos Cartridge Agent Installation
+================================================================================
+
+
+1. Extract the zip file and go to the extracted directory.
+
+2. Update the following configuration parameters in bin/stratos.sh file.
+
+properties="-Dmb.ip=MB-IP
+            -Dmb.port=MB-PORT
+            -Dlisten.address=localhost
+            -Dthrift.receiver.ip=CEP-IP
+            -Dthrift.receiver.port=CEP-PORT
+            -Dparam.file.path=${script_path}/../payload/launch-params
+            -Djavax.net.ssl.trustStore=CERT-TRUSTSTORE
+            -Djavax.net.ssl.trustStorePassword=TRUSTSTORE-PASSWORD
+            -Denable.data.publisher=ENABLE-DATA-PUBLISHER
+            -Dmonitoring.server.ip=MONITORING-SERVER-IP
+       	    -Dmonitoring.server.port=MONITORING-SERVER-PORT
+       	    -Dmonitoring.server.secure.port=MONITORING-SERVER-SECURE-PORT
+       	    -Dmonitoring.server.admin.username=MONITORING-SERVER-ADMIN-USERNAME
+       	    -Dmonitoring.server.admin.password=MONITORING-SERVER-ADMIN-PASSWORD"
+
+3. Run bin/stratos.sh file.
+
+
+Please refer following link for more information:
+https://cwiki.apache.org/confluence/display/STRATOS/4.0.0+Installation+Guide
\ No newline at end of file
diff --git a/products/cartridge-agent/modules/distribution/README.txt b/products/cartridge-agent/modules/distribution/README.txt
new file mode 100644
index 0000000..55993b4
--- /dev/null
+++ b/products/cartridge-agent/modules/distribution/README.txt
@@ -0,0 +1,20 @@
+================================================================================
+                        Apache Stratos Cartridge Agent
+================================================================================
+
+Welcome to the Apache Stratos Cartridge Agent
+
+Cartridge Agent is a component that resides within a cartridge instance and handles the communication between the
+cartridge and Stratos. Cartridge Agent communicates with Message Broker to publish its state and manage the cartridge
+lifecycle. Furthermore, it talks to Complex Event Processor (CEP) to send health statistics of the cartridge. Cartridge
+Agent is generic and can be used in any  cartridge. A Cartridge Agent comprises of the following components as
+illustrated in the following diagram: Instance Notifier Event Receiver, Health Statistics Publisher, Artifact Deployment
+Synchronizer and Instance Status Event Publisher.
+
+
+Please refer below link for more information:
+https://cwiki.apache.org/confluence/display/STRATOS/4.0.0+Cartridge+Agent
+
+
+Thank you for using Apache Stratos!
+The Stratos Team
\ No newline at end of file
diff --git a/products/cartridge-agent/modules/distribution/pom.xml b/products/cartridge-agent/modules/distribution/pom.xml
index 9c01d6c..ebeb646 100644
--- a/products/cartridge-agent/modules/distribution/pom.xml
+++ b/products/cartridge-agent/modules/distribution/pom.xml
@@ -23,7 +23,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>cartidge-agent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
         <relativePath>../../pom.xml</relativePath>
     </parent>
 
diff --git a/products/cartridge-agent/modules/distribution/src/main/assembly/bin.xml b/products/cartridge-agent/modules/distribution/src/main/assembly/bin.xml
index a85e726..20bbf10 100644
--- a/products/cartridge-agent/modules/distribution/src/main/assembly/bin.xml
+++ b/products/cartridge-agent/modules/distribution/src/main/assembly/bin.xml
@@ -51,7 +51,16 @@
                 <include>instance-started.sh</include>
                 <include>start-servers.sh</include>
                 <include>clean.sh</include>
-                <include>mount_volumes.sh</include>
+                <include>mount-volumes.sh</include>
+		<include>member-activated.sh</include>
+                <include>member-started.sh</include>
+                <include>member-terminated.sh</include>
+                <include>member-suspended.sh</include>
+                <include>complete-topology.sh</include>
+                <include>complete-tenant.sh</include>
+                <include>subscription-domain-added.sh</include>
+                <include>subscription-domain-removed.sh</include>
+                <include>artifacts-copy.sh</include>
             </includes>
         </fileSet>
         <fileSet>
@@ -75,6 +84,7 @@
             <outputDirectory>/</outputDirectory>
             <fileMode>0600</fileMode>
             <includes>
+                <include>INSTALL*</include>
                 <include>README*</include>
                 <include>LICENSE*</include>
                 <include>NOTICE*</include>
@@ -100,6 +110,7 @@
 		<exclude>*:jboss-transaction-api*</exclude>
 		<exclude>*:wrapper*</exclude>
 		<exclude>*:xom*</exclude>
+		<exclude>slf4j.wso2:slf4j</exclude>
 	    </excludes>
             <outputDirectory>/lib</outputDirectory>
             <useProjectArtifact>true</useProjectArtifact>
diff --git a/products/cartridge-agent/modules/distribution/src/main/bin/stratos.sh b/products/cartridge-agent/modules/distribution/src/main/bin/stratos.sh
index 317da88..0c24f39 100644
--- a/products/cartridge-agent/modules/distribution/src/main/bin/stratos.sh
+++ b/products/cartridge-agent/modules/distribution/src/main/bin/stratos.sh
@@ -31,21 +31,43 @@ properties="-Dmb.ip=MB-IP
             -Dthrift.receiver.port=CEP-PORT
             -Djndi.properties.template.file.path=${script_path}/../conf/templates/jndi.properties.template
             -Djndi.properties.dir=${script_path}/../conf
-            -Dlog4j.properties.file.path=${script_path}/../conf/log4j.properties
+            -Dlog4j.configuration=file://${script_path}/../conf/log4j.properties
             -Dparam.file.path=${script_path}/../payload/launch-params
             -Dextensions.dir=${script_path}/../extensions
             -Dcep.stats.publisher.enabled=true
+            -Dlb.private.ip=
+            -Dlb.public.ip=
             -Djavax.net.ssl.trustStore=CERT-TRUSTSTORE
             -Djavax.net.ssl.trustStorePassword=TRUSTSTORE-PASSWORD
 	    -Denable.artifact.update=true
-	    -Dartifact.update.interval=10
-	    -Denable.data.publisher=ENABLE-DATA-PUBLISHER
+            -Dauto.commit=false
+            -Dauto.checkout=true
+            -Dartifact.update.interval=15
+            -Denable.data.publisher=ENABLE-DATA-PUBLISHER
             -Dmonitoring.server.ip=MONITORING-SERVER-IP
 	    -Dmonitoring.server.port=MONITORING-SERVER-PORT
 	    -Dmonitoring.server.secure.port=MONITORING-SERVER-SECURE-PORT
 	    -Dmonitoring.server.admin.username=MONITORING-SERVER-ADMIN-USERNAME
 	    -Dmonitoring.server.admin.password=MONITORING-SERVER-ADMIN-PASSWORD
-	    -DAPP_PATH=APP-PATH"
+	    -Dlog.file.paths=LOG_FILE_PATHS
+	    -DAPP_PATH=APP_PATH
+            -Dsuper.tenant.repository.path=/repository/deployment/server/
+            -Dtenant.repository.path=/repository/tenants/
+	    -Dextension.instance.started=instance-started.sh
+            -Dextension.start.servers=start-servers.sh
+            -Dextension.instance.activated=instance-activated.sh
+            -Dextension.artifacts.updated=artifacts-updated.sh
+            -Dextension.clean=clean.sh
+            -Dextension.mount.volumes=mount_volumes.sh
+            -Dextension.member.started=member-started.sh
+            -Dextension.member.activated=member-activated.sh
+            -Dextension.member.suspended=member-suspended.sh
+            -Dextension.member.terminated=member-terminated.sh
+            -Dextension.complete.topology=complete-topology.sh
+            -Dextension.complete.tenant=complete-tenant.sh
+            -Dextension.subscription.domain.added=subscription-domain-added.sh
+            -Dextension.subscription.domain.removed=subscription-domain-removed.sh
+            -Dextension.artifacts.copy=artifacts-copy.sh"
 
 # Uncomment below line to enable remote debugging
 #debug="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005"
diff --git a/products/cartridge-agent/modules/distribution/src/main/conf/log4j.properties b/products/cartridge-agent/modules/distribution/src/main/conf/log4j.properties
index 890a4db..178aa9f 100644
--- a/products/cartridge-agent/modules/distribution/src/main/conf/log4j.properties
+++ b/products/cartridge-agent/modules/distribution/src/main/conf/log4j.properties
@@ -35,5 +35,7 @@ log4j.appender.CONSOLE_APPENDER.layout=org.apache.log4j.PatternLayout
 log4j.appender.CONSOLE_APPENDER.layout.ConversionPattern=[%d{ISO8601}] %5p - [%c{1}] %m%n
 
 log4j.logger.org.apache.stratos.cartridge.agent=INFO
+log4j.logger.org.apache.stratos.cartridge.agent.statistics.publisher=ERROR
 log4j.logger.org.apache.stratos.messaging=INFO
-log4j.logger.org.wso2.andes.client=ERROR
\ No newline at end of file
+log4j.logger.org.wso2.andes.client=ERROR
+log4j.logger.org.apache.activemq.jndi.ActiveMQInitialContextFactory=ERROR
\ No newline at end of file
diff --git a/products/cartridge-agent/modules/distribution/src/main/conf/templates/jndi.properties.template b/products/cartridge-agent/modules/distribution/src/main/conf/templates/jndi.properties.template
index 45b8d7a..b5fed16 100644
--- a/products/cartridge-agent/modules/distribution/src/main/conf/templates/jndi.properties.template
+++ b/products/cartridge-agent/modules/distribution/src/main/conf/templates/jndi.properties.template
@@ -21,5 +21,5 @@
 # file for updating other configurations.
 #
 connectionfactoryName=TopicConnectionFactory
-connectionfactory.topicConnectionfactory=tcp://$mb_ip:$mb_port
+java.naming.provider.url=tcp://$mb_ip:$mb_port
 java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory
diff --git a/products/cartridge-agent/modules/distribution/src/main/extensions/artifacts-copy.sh b/products/cartridge-agent/modules/distribution/src/main/extensions/artifacts-copy.sh
new file mode 100644
index 0000000..5cad830
--- /dev/null
+++ b/products/cartridge-agent/modules/distribution/src/main/extensions/artifacts-copy.sh
@@ -0,0 +1,29 @@
+#!/bin/bash
+# --------------------------------------------------------------
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+# --------------------------------------------------------------
+# This extension script will be executed once the update artifacts
+# event is received and they are copied to the given path.
+# --------------------------------------------------------------
+#
+
+log=/var/log/apache-stratos/cartridge-agent-extensions.log
+cp -rf $1* $2
+echo "Artifacts Copied" | tee -a $log
diff --git a/products/cartridge-agent/modules/distribution/src/main/extensions/artifacts-updated.sh b/products/cartridge-agent/modules/distribution/src/main/extensions/artifacts-updated.sh
index 7f112b1..15d5591 100644
--- a/products/cartridge-agent/modules/distribution/src/main/extensions/artifacts-updated.sh
+++ b/products/cartridge-agent/modules/distribution/src/main/extensions/artifacts-updated.sh
@@ -25,4 +25,4 @@
 #
 
 log=/var/log/apache-stratos/cartridge-agent-extensions.log
-echo "Artifacts updated" | tee -a $log
\ No newline at end of file
+echo `date`": Artifacts Updated Event" | tee -a $log
diff --git a/products/cartridge-agent/modules/distribution/src/main/extensions/clean.sh b/products/cartridge-agent/modules/distribution/src/main/extensions/clean.sh
index 3b87d36..c62ad35 100644
--- a/products/cartridge-agent/modules/distribution/src/main/extensions/clean.sh
+++ b/products/cartridge-agent/modules/distribution/src/main/extensions/clean.sh
@@ -25,4 +25,4 @@
 #
 
 log=/var/log/apache-stratos/cartridge-agent-extensions.log
-echo "Cleaning the cartridge" | tee -a $log
\ No newline at end of file
+echo `date`": Cleaning the cartridge" | tee -a $log
diff --git a/products/cartridge-agent/modules/distribution/src/main/extensions/complete-tenant.sh b/products/cartridge-agent/modules/distribution/src/main/extensions/complete-tenant.sh
new file mode 100644
index 0000000..2586474
--- /dev/null
+++ b/products/cartridge-agent/modules/distribution/src/main/extensions/complete-tenant.sh
@@ -0,0 +1,30 @@
+#!/bin/bash
+# --------------------------------------------------------------
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+# --------------------------------------------------------------
+# This extension script will be executed when complete tenant
+# event is received.
+# --------------------------------------------------------------
+#
+
+log=/var/log/apache-stratos/cartridge-agent-extensions.log
+echo `date`": Complete Tenant Event: " | tee -a $log
+echo "Member List: ${STRATOS_MEMBER_LIST_JSON}" | tee -a $log
+echo "Tenant List: ${STRATOS_TENANT_LIST_JSON}" | tee -a $log
diff --git a/products/cartridge-agent/modules/distribution/src/main/extensions/complete-topology.sh b/products/cartridge-agent/modules/distribution/src/main/extensions/complete-topology.sh
new file mode 100644
index 0000000..ea2e941
--- /dev/null
+++ b/products/cartridge-agent/modules/distribution/src/main/extensions/complete-topology.sh
@@ -0,0 +1,34 @@
+#!/bin/bash
+# --------------------------------------------------------------
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+# --------------------------------------------------------------
+# This extension script will be executed when complete topology 
+# event is received.
+# --------------------------------------------------------------
+#
+
+log=/var/log/apache-stratos/cartridge-agent-extensions.log
+echo `date`": Complete Topology Event: " | tee -a $log
+echo "LB IP: ${STRATOS_LB_IP}" | tee -a $log
+echo "LB PUBLIC IP: $STRATOS_LB_PUBLIC_IP}" | tee -a $log
+echo "STRATOS_PARAM_FILE_PATH: ${STRATOS_PARAM_FILE_PATH}"
+echo "Member List: ${STRATOS_MEMBER_LIST_JSON}" | tee -a $log
+echo "Complete Topology: ${STRATOS_TOPOLOGY_JSON}" | tee -a $log
+echo "Members in LB: ${STRATOS_MEMBERS_IN_LB_JSON}" | tee -a $log
diff --git a/products/cartridge-agent/modules/distribution/src/main/extensions/instance-activated.sh b/products/cartridge-agent/modules/distribution/src/main/extensions/instance-activated.sh
index c892ca7..f5d60e8 100644
--- a/products/cartridge-agent/modules/distribution/src/main/extensions/instance-activated.sh
+++ b/products/cartridge-agent/modules/distribution/src/main/extensions/instance-activated.sh
@@ -25,4 +25,4 @@
 #
 
 log=/var/log/apache-stratos/cartridge-agent-extensions.log
-echo "Instance activated" | tee -a $log
\ No newline at end of file
+echo `date`": Instance activated" | tee -a $log
diff --git a/products/cartridge-agent/modules/distribution/src/main/extensions/instance-started.sh b/products/cartridge-agent/modules/distribution/src/main/extensions/instance-started.sh
index b6c9105..7b5aa6a 100644
--- a/products/cartridge-agent/modules/distribution/src/main/extensions/instance-started.sh
+++ b/products/cartridge-agent/modules/distribution/src/main/extensions/instance-started.sh
@@ -24,4 +24,4 @@
 #
 
 log=/var/log/apache-stratos/cartridge-agent-extensions.log
-echo "Instance started" | tee -a $log
\ No newline at end of file
+echo `date`": Instance Started Event: " | tee -a $log
diff --git a/products/cartridge-agent/modules/distribution/src/main/extensions/member-activated.sh b/products/cartridge-agent/modules/distribution/src/main/extensions/member-activated.sh
new file mode 100644
index 0000000..3bf0b10
--- /dev/null
+++ b/products/cartridge-agent/modules/distribution/src/main/extensions/member-activated.sh
@@ -0,0 +1,43 @@
+#!/bin/bash
+# --------------------------------------------------------------
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+# --------------------------------------------------------------
+# This extension script will be executed when member activated
+# event is received.
+# --------------------------------------------------------------
+#
+
+log=/var/log/apache-stratos/cartridge-agent-extensions.log
+OUTPUT=`date`": Member Activated Event: "
+OUTPUT="$OUTPUT MEMBER_ID: ${STRATOS_MEMBER_ID}, "
+OUTPUT="$OUTPUT MEMBER_IP: ${STRATOS_MEMBER_IP}, "
+OUTPUT="$OUTPUT CLUSTER_ID: ${STRATOS_CLUSTER_ID}, "
+OUTPUT="$OUTPUT LB_CLUSTER_ID: ${STRATOS_LB_CLUSTER_ID}, "
+OUTPUT="$OUTPUT NETWORK_PARTITION_ID: ${STRATOS_NETWORK_PARTITION_ID}, "
+OUTPUT="$OUTPUT SERVICE_NAME: ${STRATOS_SERVICE_NAME}, "
+OUTPUT="$OUTPUT PORTS: ${STRATOS_PORTS},"
+OUTPUT="$OUTPUT STRATOS_LB_IP: ${STRATOS_LB_IP},"
+OUTPUT="$OUTPUT STRATOS_LB_PUBLIC_IP: ${STRATOS_LB_PUBLIC_IP},"
+OUTPUT="$OUTPUT APP_PATH: ${APP_PATH},"
+OUTPUT="$OUTPUT STRATOS_PARAM_FILE_PATH: ${STRATOS_PARAM_FILE_PATH}"
+echo $OUTPUT | tee -a $log
+echo "Member List: ${STRATOS_MEMBER_LIST_JSON}" | tee -a $log
+echo "Topology: ${STRATOS_TOPOLOGY_JSON}" | tee -a $log
+echo "---------------" | tee -a $log
diff --git a/products/cartridge-agent/modules/distribution/src/main/extensions/member-started.sh b/products/cartridge-agent/modules/distribution/src/main/extensions/member-started.sh
new file mode 100644
index 0000000..29f45c3
--- /dev/null
+++ b/products/cartridge-agent/modules/distribution/src/main/extensions/member-started.sh
@@ -0,0 +1,43 @@
+#!/bin/bash
+# --------------------------------------------------------------
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+# --------------------------------------------------------------
+# This extension script will be executed when member suspended
+# event is received.
+# --------------------------------------------------------------
+#
+
+log=/var/log/apache-stratos/cartridge-agent-extensions.log
+OUTPUT=`date`": Member Started Event: "
+OUTPUT="$OUTPUT MEMBER_ID: ${STRATOS_MEMBER_ID}, "
+OUTPUT="$OUTPUT MEMBER_IP: ${STRATOS_MEMBER_IP}, "
+OUTPUT="$OUTPUT CLUSTER_ID: ${STRATOS_CLUSTER_ID}, "
+OUTPUT="$OUTPUT LB_CLUSTER_ID: ${STRATOS_LB_CLUSTER_ID}, "
+OUTPUT="$OUTPUT NETWORK_PARTITION_ID: ${STRATOS_NETWORK_PARTITION_ID}, "
+OUTPUT="$OUTPUT SERVICE_NAME: ${STRATOS_SERVICE_NAME}, "
+OUTPUT="$OUTPUT PORTS: ${STRATOS_PORTS},"
+OUTPUT="$OUTPUT STRATOS_LB_IP: ${STRATOS_LB_IP},"
+OUTPUT="$OUTPUT STRATOS_LB_PUBLIC_IP: ${STRATOS_LB_PUBLIC_IP},"
+OUTPUT="$OUTPUT APP_PATH: ${APP_PATH},"
+OUTPUT="$OUTPUT STRATOS_PARAM_FILE_PATH: ${STRATOS_PARAM_FILE_PATH}"
+echo $OUTPUT | tee -a $log
+echo "Member List: ${STRATOS_MEMBER_LIST_JSON}" | tee -a $log
+echo "Topology: ${STRATOS_TOPOLOGY_JSON}" | tee -a $log
+echo "---------------" | tee -a $log
diff --git a/products/cartridge-agent/modules/distribution/src/main/extensions/member-suspended.sh b/products/cartridge-agent/modules/distribution/src/main/extensions/member-suspended.sh
new file mode 100644
index 0000000..866aa0d
--- /dev/null
+++ b/products/cartridge-agent/modules/distribution/src/main/extensions/member-suspended.sh
@@ -0,0 +1,43 @@
+#!/bin/bash
+# --------------------------------------------------------------
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+# --------------------------------------------------------------
+# This extension script will be executed when member suspended
+# event is received.
+# --------------------------------------------------------------
+#
+
+log=/var/log/apache-stratos/cartridge-agent-extensions.log
+OUTPUT=`date`": Member Suspended Event: "
+OUTPUT="$OUTPUT MEMBER_ID: ${STRATOS_MEMBER_ID}, "
+OUTPUT="$OUTPUT MEMBER_IP: ${STRATOS_MEMBER_IP}, "
+OUTPUT="$OUTPUT CLUSTER_ID: ${STRATOS_CLUSTER_ID}, "
+OUTPUT="$OUTPUT LB_CLUSTER_ID: ${STRATOS_LB_CLUSTER_ID}, "
+OUTPUT="$OUTPUT NETWORK_PARTITION_ID: ${STRATOS_NETWORK_PARTITION_ID}, "
+OUTPUT="$OUTPUT SERVICE_NAME: ${STRATOS_SERVICE_NAME}, "
+OUTPUT="$OUTPUT PORTS: ${STRATOS_PORTS},"
+OUTPUT="$OUTPUT STRATOS_LB_IP: ${STRATOS_LB_IP},"
+OUTPUT="$OUTPUT STRATOS_LB_PUBLIC_IP: ${STRATOS_LB_PUBLIC_IP},"
+OUTPUT="$OUTPUT APP_PATH: ${APP_PATH},"
+OUTPUT="$OUTPUT STRATOS_PARAM_FILE_PATH: ${STRATOS_PARAM_FILE_PATH}"
+echo $OUTPUT | tee -a $log
+echo "Member List: ${STRATOS_MEMBER_LIST_JSON}" | tee -a $log
+echo "Topology: ${STRATOS_TOPOLOGY_JSON}" | tee -a $log
+echo "---------------" | tee -a $log
diff --git a/products/cartridge-agent/modules/distribution/src/main/extensions/member-terminated.sh b/products/cartridge-agent/modules/distribution/src/main/extensions/member-terminated.sh
new file mode 100644
index 0000000..89cedf6
--- /dev/null
+++ b/products/cartridge-agent/modules/distribution/src/main/extensions/member-terminated.sh
@@ -0,0 +1,43 @@
+#!/bin/bash
+# --------------------------------------------------------------
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+# --------------------------------------------------------------
+# This extension script will be executed when member terminated
+# event is received.
+# --------------------------------------------------------------
+#
+
+log=/var/log/apache-stratos/cartridge-agent-extensions.log
+OUTPUT=`date`": Member Terminated Event: "
+OUTPUT="$OUTPUT MEMBER_ID: ${STRATOS_MEMBER_ID}, "
+OUTPUT="$OUTPUT MEMBER_IP: ${STRATOS_MEMBER_IP}, "
+OUTPUT="$OUTPUT CLUSTER_ID: ${STRATOS_CLUSTER_ID}, "
+OUTPUT="$OUTPUT LB_CLUSTER_ID: ${STRATOS_LB_CLUSTER_ID}, "
+OUTPUT="$OUTPUT NETWORK_PARTITION_ID: ${STRATOS_NETWORK_PARTITION_ID}, "
+OUTPUT="$OUTPUT SERVICE_NAME: ${STRATOS_SERVICE_NAME}, "
+OUTPUT="$OUTPUT PORTS: ${STRATOS_PORTS},"
+OUTPUT="$OUTPUT STRATOS_LB_IP: ${STRATOS_LB_IP},"
+OUTPUT="$OUTPUT STRATOS_LB_PUBLIC_IP: ${STRATOS_LB_PUBLIC_IP},"
+OUTPUT="$OUTPUT APP_PATH: ${APP_PATH},"
+OUTPUT="$OUTPUT STRATOS_PARAM_FILE_PATH: ${STRATOS_PARAM_FILE_PATH}"
+echo $OUTPUT | tee -a $log
+echo "Member List: ${STRATOS_MEMBER_LIST_JSON}" | tee -a $log
+echo "Topology: ${STRATOS_TOPOLOGY_JSON}" | tee -a $log
+echo "---------------" | tee -a $log
diff --git a/products/cartridge-agent/modules/distribution/src/main/extensions/mount-volumes.sh b/products/cartridge-agent/modules/distribution/src/main/extensions/mount-volumes.sh
new file mode 100755
index 0000000..2e649bd
--- /dev/null
+++ b/products/cartridge-agent/modules/distribution/src/main/extensions/mount-volumes.sh
@@ -0,0 +1,87 @@
+#!/bin/bash
+# --------------------------------------------------------------
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+# --------------------------------------------------------------
+# This extension script will be executed to mount volumes
+# to the instance.
+# --------------------------------------------------------------
+#
+
+
+log=/var/log/apache-stratos/cartridge-agent-extensions.log
+echo -e "Starting mounting volumes" 2>&1 | tee -a $log
+
+# $1  is passed from Cartridge Agent code.
+echo -e "launh param file location $1" | tee -a $log
+#source /opt/apache-stratos-cartridge-agent/launch.params
+PERSISTENCE_MAPPING=$1
+echo -e "Persistance mappings : $PERSISTENCE_MAPPING" 2>&1 | tee -a $log
+
+mount_volume(){
+
+        device=$1;
+        mount_point=$2;
+        echo "device $device"
+        echo "point  $mount_point"
+        # check if the volume has a file system
+        output=`sudo file -s $device`;
+        echo $output | tee -a $log
+
+        # this is the pattern of the output of file -s if the volume does not have a file system
+        # refer to http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html
+        pattern="$device: data"
+
+        if [[ $output ==  $pattern ]]
+        then
+                echo -e "Volume is not formatted. So formating the device $device \n" | tee -a $log
+                sudo mkfs -t ext4 $device
+        fi
+
+        echo "Mounting  the device $device to the mount point $mount_point \n" | tee -a $log
+        device_mounted=$(mount | grep "$device")
+
+        if [ ! -d "$mount_point" ]
+        then
+              echo "creating the  mount point directory $mount_point since it does not exist." | tee -a $log
+              sudo mkdir $mount_point
+        fi
+
+        #mounting the device if it is not already mounted
+        if [ ! "$device_mounted" = "" ]
+        then
+              echo -e "Device $device is already mounted." | tee -a $log
+        else
+              sudo mount $device $mount_point
+        fi
+
+}
+
+IFS='|' read -ra ADDR <<< "${PERSISTENCE_MAPPING}"
+echo "${ADDR[@]}" | tee -a $log
+
+for i in "${!ADDR[@]}"; do
+        # expected PERSISTANCE_MAPPING format is device1|mountPoint1|device2|mountpoint2...
+        # so that even indexes are devices and odd indexes are mount points..
+        if (( $i  % 2 == 0 ))
+        then
+           mount_volume ${ADDR[$i]} ${ADDR[$i + 1]}
+        fi
+done
+
diff --git a/products/cartridge-agent/modules/distribution/src/main/extensions/mount_volumes.sh b/products/cartridge-agent/modules/distribution/src/main/extensions/mount_volumes.sh
index 63e303f..48f3ceb 100755
--- a/products/cartridge-agent/modules/distribution/src/main/extensions/mount_volumes.sh
+++ b/products/cartridge-agent/modules/distribution/src/main/extensions/mount_volumes.sh
@@ -28,8 +28,8 @@ log=/var/log/apache-stratos/cartridge-agent-extensions.log
 echo -e "Starting mounting volumes" 2>&1 | tee -a $log
 
 # $1  is passed from Cartridge Agent code.
-echo -e "launch param file location $1" | tee -a $log
-
+echo -e "launh param file location $1" | tee -a $log
+#source /opt/apache-stratos-cartridge-agent/launch.params
 PERSISTENCE_MAPPING=$1
 echo -e "Persistance mappings : $PERSISTENCE_MAPPING" 2>&1 | tee -a $log
 
@@ -37,29 +37,8 @@ mount_volume(){
 
         device=$1;
         mount_point=$2;
-    echo -e "device $device" | tee -a $log
-        echo -e "mount point  $mount_point"| tee -a $log
-
-
-        if [  "$mount_point" = "null" ]
-        then
-              echo -e "[ERROR] Mount point can not be null" | tee -a $log
-          return
-        fi
-
-        if [  "$device" = "null" ]
-        then
-              echo -e "[ERROR] Device can not be null" | tee -a $log
-          return
-        fi
-
-        device_exist=`sudo fdisk -l $device`;
-        if [ "$device_exist" = "" ]
-        then
-              echo -e "[ERROR] Device $device does not exist in this instance." | tee -a $log
-          return
-    fi
-
+        echo "device $device"
+        echo "point  $mount_point"
         # check if the volume has a file system
         output=`sudo file -s $device`;
         echo $output | tee -a $log
@@ -80,15 +59,15 @@ mount_volume(){
         if [ ! -d "$mount_point" ]
         then
               echo "creating the  mount point directory $mount_point since it does not exist." | tee -a $log
-              sudo mkdir -p $mount_point
+              sudo mkdir $mount_point
         fi
 
         #mounting the device if it is not already mounted
         if [ ! "$device_mounted" = "" ]
         then
-              echo -e "[WARNING] Device $device is already mounted." | tee -a $log
+              echo -e "Device $device is already mounted." | tee -a $log
         else
-              sudo mount $device $mount_point  2>&1 | tee -a $log
+              sudo mount $device $mount_point
         fi
 
 }
@@ -96,65 +75,12 @@ mount_volume(){
 IFS='|' read -ra ADDR <<< "${PERSISTENCE_MAPPING}"
 echo "${ADDR[@]}" | tee -a $log
 
-echo -e "\n Volumes before mounting...." | tee -a $log
-output=`/bin/lsblk`
-echo -e "\n$output\n" | tee -a $log
-output=`/sbin/blkid`
-echo -e "\n$output\n" | tee -a $log
-
-totalcount=0
 for i in "${!ADDR[@]}"; do
-        # expected PERSISTANCE_MAPPING format is device1|volumeID1|mountPoint1|device2|volumeID2|mountpoint2...
-        if (( $i  % 3 == 0 ))
+        # expected PERSISTANCE_MAPPING format is device1|mountPoint1|device2|mountpoint2...
+        # so that even indexes are devices and odd indexes are mount points..
+        if (( $i  % 2 == 0 ))
         then
-           devicelist[$totalcount]=${ADDR[$i]}
-           mountpathlist[$totalcount]=${ADDR[$i + 2]}
-           totalcount=$((totalcount+1))
-           lastdevice=${ADDR[$i]}
+           mount_volume ${ADDR[$i]} ${ADDR[$i + 1]}
         fi
 done
 
-
-device_exist=`sudo fdisk -l $lastdevice`;
-if [ "$device_exist" = "" ]
-then
-# Last device doesn't exist, which means devices are not attached as per the order given in the payload
-# So start mounting from the last available device and come down
-    devlist=`sudo lsblk -n | cut -f 1 -d " "`
-    devcount=`echo ${devlist} | awk '{print NF}'`
-    totalcount=$((totalcount-1))
-        counter=0
-    for ((i=${devcount}-1; totalcount>=0; i--)); do
-        devnum=`expr ${devcount} - ${counter}`
-        currdevice=`echo ${devlist} | cut -d " " -f ${devnum}`
-        fileout=`sudo file -s /dev/${currdevice}`
-        if [[ $fileout == *ROM* ]] || [[ $fileout == *boot* ]] || [[ $fileout == *cloud* ]] || [[ $fileout == *not-regular* ]] || [[ $fileout == *empty* ]] || [[ $fileout == *swap* ]]
-        then
-            # Ignore special files as checked above...
-            counter=`expr ${counter} + 1`
-            continue
-        fi
-        mountpath=${mountpathlist[$totalcount]}
-        totalcount=$((totalcount-1))
-        echo "device is $currdevice"
-        echo "mount path is $mountpath"
-        counter=`expr ${counter} + 1`
-        mount_volume "/dev/${currdevice}" ${mountpath}
-    done
-else
-# Last device exists, which means the volumes are created or few might have been skipped in the first part since the device is already present
-# Mount of rest of the volumes will be fine and contine
-    for i in "${!ADDR[@]}"; do
-        # expected PERSISTANCE_MAPPING format is device1|volumeID1|mountPoint1|device2|volumeID2|mountpoint2...
-        if (( $i  % 3 == 0 ))
-        then
-           mount_volume ${ADDR[$i]} ${ADDR[$i + 2]}
-        fi
-    done
-fi
-
-echo -e "\n Volumes after mounting...." | tee -a $log
-output=`/bin/lsblk`
-echo -e "\n$output\n" | tee -a $log
-output=`/sbin/blkid`
-echo -e "\n$output\n" | tee -a $log
diff --git a/products/cartridge-agent/modules/distribution/src/main/extensions/start-servers.sh b/products/cartridge-agent/modules/distribution/src/main/extensions/start-servers.sh
index 1bb3f84..d70a193 100644
--- a/products/cartridge-agent/modules/distribution/src/main/extensions/start-servers.sh
+++ b/products/cartridge-agent/modules/distribution/src/main/extensions/start-servers.sh
@@ -24,4 +24,16 @@
 #
 
 log=/var/log/apache-stratos/cartridge-agent-extensions.log
-echo "Starting servers" | tee -a $log
\ No newline at end of file
+if [[ -z $STRATOS_CLUSTERING ]]; then
+   echo `date`": Starting servers..." | tee -a $log
+else
+   echo `date`": Starting servers in clustering mode..." | tee -a $log
+fi
+
+echo "LB IP: ${STRATOS_LB_IP}" | tee -a $log
+echo "LB PUBLIC IP: $STRATOS_LB_PUBLIC_IP}" | tee -a $log
+echo "STRATOS_PARAM_FILE_PATH: ${STRATOS_PARAM_FILE_PATH}"
+echo "Member List: ${STRATOS_MEMBER_LIST_JSON}" | tee -a $log
+echo "Complete Topology: ${STRATOS_TOPOLOGY_JSON}" | tee -a $log
+echo "Members in LB: ${STRATOS_MEMBERS_IN_LB_JSON}" | tee -a $log
+echo "APP_PATH: ${APP_PATH}" | tee -a $log
\ No newline at end of file
diff --git a/products/cartridge-agent/modules/distribution/src/main/extensions/subscription-domain-added.sh b/products/cartridge-agent/modules/distribution/src/main/extensions/subscription-domain-added.sh
index 0ae36f5..f78a5db 100644
--- a/products/cartridge-agent/modules/distribution/src/main/extensions/subscription-domain-added.sh
+++ b/products/cartridge-agent/modules/distribution/src/main/extensions/subscription-domain-added.sh
@@ -19,10 +19,19 @@
 # under the License.
 #
 # --------------------------------------------------------------
-# This extension script will be executed when a subscription domain added
-# event is received by the cartridge agent.
+# This extension script will be executed when subscription domain
+# added event is received.
 # --------------------------------------------------------------
 #
 
 log=/var/log/apache-stratos/cartridge-agent-extensions.log
-echo "Subscription domain added: [tenant-id] $1 [tenant-domain] $2 [domain-name] $3 [application-context] $4" | tee -a $log
\ No newline at end of file
+OUTPUT=`date`": Subscription Domain Added Event"
+OUTPUT="$OUTPUT STRATOS_SUBSCRIPTION_SERVICE_NAME: ${STRATOS_SUBSCRIPTION_SERVICE_NAME},"
+OUTPUT="$OUTPUT STRATOS_SUBSCRIPTION_DOMAIN_NAME: ${STRATOS_SUBSCRIPTION_DOMAIN_NAME},"
+OUTPUT="$OUTPUT STRATOS_SUBSCRIPTION_TENANT_ID: ${STRATOS_SUBSCRIPTION_TENANT_ID},"
+OUTPUT="$OUTPUT STRATOS_SUBSCRIPTION_TENANT_DOMAIN: $STRATOS_SUBSCRIPTION_TENANT_DOMAIN},"
+OUTPUT="$OUTPUT APP_PATH: ${APP_PATH},"
+OUTPUT="$OUTPUT STRATOS_SUBSCRIPTION_APPLICATION_CONTEXT: ${STRATOS_SUBSCRIPTION_APPLICATION_CONTEXT}"
+echo $OUTPUT | tee -a $log
+
+curl -k -v -X POST -H "Content-Type:application/soap+xml;charset=UTF-8;action=urn:addWebAppToHost" -d "<?xml version=\"1.0\" encoding=\"UTF-8\"?><s:Envelope xmlns:s=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:wsa=\"http://www.w3.org/2005/08/addressing\"><s:Body><p:addWebAppToHost xmlns:p=\"http://mapper.url.carbon.wso2.org\"><xs:hostName xmlns:xs=\"http://mapper.url.carbon.wso2.org\">$STRATOS_SUBSCRIPTION_DOMAIN_NAME</xs:hostName><xs:uri xmlns:xs=\"http://mapper.url.carbon.wso2.org\">/t/$STRATOS_SUBSCRIPTION_TENANT_DOMAIN/webapps/$STRATOS_SUBSCRIPTION_APPLICATION_CONTEXT/</xs:uri><xs:appType xmlns:xs=\"http://mapper.url.carbon.wso2.org\">webapp</xs:appType></p:addWebAppToHost></s:Body></s:Envelope>" https://localhost:9443/services/UrlMapperAdminService -u admin:admin
diff --git a/products/cartridge-agent/modules/distribution/src/main/extensions/subscription-domain-removed.sh b/products/cartridge-agent/modules/distribution/src/main/extensions/subscription-domain-removed.sh
index 76480bc..b007044 100644
--- a/products/cartridge-agent/modules/distribution/src/main/extensions/subscription-domain-removed.sh
+++ b/products/cartridge-agent/modules/distribution/src/main/extensions/subscription-domain-removed.sh
@@ -19,10 +19,18 @@
 # under the License.
 #
 # --------------------------------------------------------------
-# This extension script will be executed when a subscription domain removed
-# event is received by the cartridge agent.
+# This extension script will be executed when subscription domain
+# removed event is received.
 # --------------------------------------------------------------
 #
 
 log=/var/log/apache-stratos/cartridge-agent-extensions.log
-echo "Subscription domain added: [tenant-id] $1 [tenant-domain] $2 [domain-name] $3" | tee -a $log
\ No newline at end of file
+OUTPUT=`date`": Subscription Domain Removed Event"
+OUTPUT="$OUTPUT STRATOS_SUBSCRIPTION_SERVICE_NAME: ${STRATOS_SUBSCRIPTION_SERVICE_NAME},"
+OUTPUT="$OUTPUT STRATOS_SUBSCRIPTION_DOMAIN_NAME: ${STRATOS_SUBSCRIPTION_DOMAIN_NAME},"
+OUTPUT="$OUTPUT STRATOS_SUBSCRIPTION_TENANT_ID: ${STRATOS_SUBSCRIPTION_TENANT_ID},"
+OUTPUT="$OUTPUT APP_PATH: ${APP_PATH},"
+OUTPUT="$OUTPUT STRATOS_SUBSCRIPTION_TENANT_DOMAIN: $STRATOS_SUBSCRIPTION_TENANT_DOMAIN}"
+echo $OUTPUT | tee -a $log
+
+curl -k -v -X POST -H "Content-Type:application/soap+xml;charset=UTF-8;action=urn:deleteHost" -d "<?xml version=\"1.0\" encoding=\"UTF-8\"?><s:Envelope xmlns:s=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:wsa=\"http://www.w3.org/2005/08/addressing\"><s:Body><p:deleteHost xmlns:p=\"http://mapper.url.carbon.wso2.org\"><xs:hostName xmlns:xs=\"http://mapper.url.carbon.wso2.org\">$STRATOS_SUBSCRIPTION_DOMAIN_NAME</xs:hostName></p:deleteHost></s:Body></s:Envelope>" https://localhost:9443/services/UrlMapperAdminService -u admin:admin
diff --git a/products/cartridge-agent/modules/distribution/src/main/license/LICENSE b/products/cartridge-agent/modules/distribution/src/main/license/LICENSE
index d1a10ab..4a1228a 100644
--- a/products/cartridge-agent/modules/distribution/src/main/license/LICENSE
+++ b/products/cartridge-agent/modules/distribution/src/main/license/LICENSE
@@ -217,7 +217,7 @@ andes-client-0.13.wso2v8.jar,
 ant-1.7.0.jar,
 ant-1.7.0.wso2v1.jar,
 ant-launcher-1.7.0.jar,
-apache-stratos-cartridge-agent-4.0.0-SNAPSHOT.jar,
+apache-stratos-cartridge-agent-4.0.0.jar,
 axiom-1.2.11.wso2v4.jar,
 axiom-api-1.2.11.jar,
 axiom-impl-1.2.11.jar,
@@ -261,9 +261,9 @@ neethi-2.0.4.wso2v4.jar
 not-yet-commons-ssl-0.3.9.jar
 opencsv-1.8.wso2v1.jar
 org.apache.log4j-1.2.13.v200706111418.jar
-org.apache.stratos.cartridge.agent-4.0.0-SNAPSHOT.jar
-org.apache.stratos.common-4.0.0-SNAPSHOT.jar
-org.apache.stratos.messaging-4.0.0-SNAPSHOT.jar 
+org.apache.stratos.cartridge.agent-4.0.0.jar
+org.apache.stratos.common-4.0.0.jar
+org.apache.stratos.messaging-4.0.0.jar
 org.wso2.carbon.base-4.2.0.jar
 org.wso2.carbon.bootstrap-4.2.0.jar
 org.wso2.carbon.core-4.2.0.jar
@@ -342,8 +342,6 @@ jline-0.9.94.jar,
 jsch-0.1.49.jar
 jaxen-1.1.1.jar
 
-Copyright (c) 2010 Terence Parr
-All rights reserved.
 
 [The BSD License]
 
@@ -481,6 +479,7 @@ slf4j-log4j12-1.7.5.jar
 
 The MIT License (MIT)
 
+
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
diff --git a/products/cartridge-agent/pom.xml b/products/cartridge-agent/pom.xml
index d69b554..35536a4 100644
--- a/products/cartridge-agent/pom.xml
+++ b/products/cartridge-agent/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-products-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/products/load-balancer/modules/distribution/INSTALL.txt b/products/load-balancer/modules/distribution/INSTALL.txt
new file mode 100644
index 0000000..89dba62
--- /dev/null
+++ b/products/load-balancer/modules/distribution/INSTALL.txt
@@ -0,0 +1,62 @@
+================================================================================
+                   Apache Stratos Load Balancer Installation
+================================================================================
+
+Apache Stratos Load Balancer can be run as a light-weight software load balancer in
+stand-alone mode, that can be configured to balance the load across the services nodes.
+
+Standalone Mode
+===============
+1. The directory containing this INSTALL.txt file will be the root and it will be
+   treated as Carbon home directory and let it be CARBON_HOME.
+
+2. All the shell scripts and .bat files are available in CARBON_HOME/bin folder.
+
+3. To start LB one can use either stratos.sh in all Unix
+   systems & stratos.bat file on Windows operating systems.
+
+4. Either of the following commands can be used to start LB
+      i)  ./stratos.sh {console|start|stop|restart|version}
+     ii)  stratos.bat {start|stop|version}
+
+        Usage: stratos.sh [command] [options] [system-properties]
+
+            command:
+                --start		    Start LB as a Unix daemon in the background
+                --console	    Start LB as a Unix daemon in the foreground
+                --stop		    Stop the LB Unix daemon
+                --restart	    Restart the LB Unix daemon
+                --version	    What version of the LB server are you running
+            options:
+                --debug <port> 	Start the server in remote debugging mode.
+                                port: The remote debugging port.
+
+            system-properties:
+                -DhttpPort		Overrides the HTTP port defined in the
+                                catalina-server.xml file
+                -DhttpsPort		Overrides the HTTPS port defined in the
+                                catalina-server.xml file
+                -DosgiConsole=[port]
+                                Start Carbon with Equinox OSGi console.
+                                If the optional 'port' parameter is provided, a
+                                telnet port will be opened
+                -DosgiDebugOptions=[options-file]
+                                Start Carbon with OSGi debugging enabled.
+                                If the optional 'options-file is provided, the
+                                OSGi debug options will be loaded from it.
+                -Dsetup			Clean the Registry database & other
+                                configuration, recreate DB, re-populate the
+                                configuration, and start Carbon
+
+System Requirements
+=======================
+1. Minimum memory - 1.5GB
+2. Processor      - Pentium 800MHz or equivalent at minimum
+3. Java SE Development Kit 1.6.0_24 or higher
+
+
+Please refer following link for more information:
+https://cwiki.apache.org/confluence/display/STRATOS/4.0.0+Installation+Guide
+
+
+
diff --git a/products/load-balancer/modules/distribution/README.txt b/products/load-balancer/modules/distribution/README.txt
new file mode 100755
index 0000000..59b0977
--- /dev/null
+++ b/products/load-balancer/modules/distribution/README.txt
@@ -0,0 +1,144 @@
+================================================================================
+                        Apache Stratos Load Balancer
+================================================================================
+
+Welcome to the Apache Stratos Load Balancer.
+
+Apache Stratos LB is a lightweight and easy-to-use Open Source Load Balancer
+(LB) available under the Apache Software License v2.0. Apache Stratos LB allows
+administrators to simply configure message load balancing, failover routing,
+and auto scaling. The runtime has been designed to be completely
+asynchronous, non-blocking and streaming based on the Apache Synapse core.
+
+This is based on the revolutionary WSO2 Carbon [Middleware] framework. All the major
+features have been developed as pluggable Carbon components. Apache Stratos Load Balancer
+is a compact version doing the load balancing features of WSO2 Enterprise Service Bus.
+
+
+Key Features
+============
+
+1. Non-blocking HTTP/S transports based on Apache HttpCore for ultra fast
+   execution and support for thousands of connections at high concurrency with
+   constant memory usage. Integrated high performing, Passthrough Transport. 
+2. Load-balancing (with or without sticky sessions)/Fail-over, and clustered
+   Throttling and Caching support.
+3. Automatically scaling the system according to the number of requests in-flight for
+   a particular service cluster - "Scale up early, scale down slowly".
+4. Service aware dynamic load balancing - A single load balancer
+   can centrally manage the load across the nodes of different service clusters.
+5. Tenant aware load balancing - Tenants can be loaded and unloaded dynamically.
+   Tenants can be partitioned to different service clusters.
+6. Lightweight, XML and Web services centric messaging model.
+7. Administrator friendly - Configurations are simple and easy.
+
+System Requirements
+===================
+
+1. Minimum memory - 1.5GB
+2. Processor      - Pentium 800MHz or equivalent at minimum
+3. Java SE Development Kit 1.6.0_24 or higher
+
+Installation & Running
+==========================
+
+1. Extract the load balancer binary package and go to the extracted directory.
+2. Update load balancer configuration: repository/conf/loadbalancer.conf.
+3. Run bin/stratos.sh or bin/stratos.bat as appropriate.
+
+Apache Stratos LB 2.0.5 distribution directory structure
+=============================================================
+
+    CARBON_HOME
+	|- bin <folder>
+	|- lib <folder>
+	|- repository <folder>
+	|- tmp <folder>
+	|- LICENSE.txt <file>
+	|- README.txt <file>
+	|- INSTALL.txt <file>
+
+    - bin
+	  Contains various scripts, .sh & .bat files
+
+    - lib
+	  Contains the basic set of libraries required to startup LB
+	  in standalone mode
+
+    - repository
+	  The repository where services and modules deployed in Apache Stratos LB
+	  are stored. In addition to this, the components directory inside the
+	  repository directory contains the carbon runtime and the user added
+	  jar files including mediators, third party libraries etc. All
+	  global and LB specific configuration files, generated log files
+	  and other deployed artifacts are also housed under this directory.
+
+    - tmp
+	  Used for storing temporary files, and is pointed to by the
+	  java.io.tmpdir System property
+
+    - LICENSE.txt
+	  Apache License 2.0 and the relevant other licenses under which
+	  Apache Stratos LB is distributed.
+
+    - README.txt
+	  This document.
+
+    - INSTALL.txt
+      This document will contain information on installing Apache Stratos LB
+
+    - release-notes.html
+	  Release information for Apache Stratos load balancer.
+
+
+Support
+==================================
+
+Any problem with this release can be reported to Apache Stratos mailing list
+or in the JIRA issue tracker. If you are sending an email to the mailing
+list make sure to add the [Apache Stratos] prefix to the subject.
+
+Mailing list subscription:
+    dev-subscribe@stratos.apache.org
+
+
+Issue Tracker
+==================================
+
+Jira:
+    https://issues.apache.org/jira/browse/stratos
+
+
+Crypto Notice
+==================================
+
+   This distribution includes cryptographic software.  The country in
+   which you currently reside may have restrictions on the import,
+   possession, use, and/or re-export to another country, of
+   encryption software.  BEFORE using any encryption software, please
+   check your country's laws, regulations and policies concerning the
+   import, possession, or use, and re-export of encryption software, to
+   see if this is permitted.  See <http://www.wassenaar.org/> for more
+   information.
+
+   The U.S. Government Department of Commerce, Bureau of Industry and
+   Security (BIS), has classified this software as Export Commodity
+   Control Number (ECCN) 5D002.C.1, which includes information security
+   software using or performing cryptographic functions with asymmetric
+   algorithms.  The form and manner of this Apache Software Foundation
+   distribution makes it eligible for export under the License Exception
+   ENC Technology Software Unrestricted (TSU) exception (see the BIS
+   Export Administration Regulations, Section 740.13) for both object
+   code and source code.
+
+   The following provides more details on the included cryptographic
+   software:
+
+   Apache Rampart   : http://ws.apache.org/rampart/
+   Apache WSS4J     : http://ws.apache.org/wss4j/
+   Apache Santuario : http://santuario.apache.org/
+   Bouncycastle     : http://www.bouncycastle.org/
+
+
+Thank you for using Apache Stratos!
+The Stratos Team
diff --git a/products/load-balancer/modules/distribution/pom.xml b/products/load-balancer/modules/distribution/pom.xml
index 05fbd20..05041d9 100755
--- a/products/load-balancer/modules/distribution/pom.xml
+++ b/products/load-balancer/modules/distribution/pom.xml
@@ -23,7 +23,7 @@
     <parent>
         <groupId>org.apache.stratos.load.balancer</groupId>
         <artifactId>load-balancer-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
         <relativePath>../../pom.xml</relativePath>
     </parent>
 
diff --git a/products/load-balancer/modules/distribution/src/main/assembly/bin.xml b/products/load-balancer/modules/distribution/src/main/assembly/bin.xml
index dbe5d0b..12fb1db 100755
--- a/products/load-balancer/modules/distribution/src/main/assembly/bin.xml
+++ b/products/load-balancer/modules/distribution/src/main/assembly/bin.xml
@@ -295,13 +295,13 @@
             <fileMode>644</fileMode>
         </file>
         <file>
-            <source>../../README.txt</source>
+            <source>${project.basedir}/README.txt</source>
             <outputDirectory>apache-stratos-load-balancer-${pom.version}</outputDirectory>
             <filtered>true</filtered>
             <fileMode>644</fileMode>
         </file>
         <file>
-            <source>../../INSTALL.txt</source>
+            <source>${project.basedir}/INSTALL.txt</source>
             <outputDirectory>apache-stratos-load-balancer-${pom.version}</outputDirectory>
             <filtered>true</filtered>
             <fileMode>644</fileMode>
diff --git a/products/load-balancer/modules/distribution/src/main/assembly/filter.properties b/products/load-balancer/modules/distribution/src/main/assembly/filter.properties
index 2a25f5f..01e5a9d 100644
--- a/products/load-balancer/modules/distribution/src/main/assembly/filter.properties
+++ b/products/load-balancer/modules/distribution/src/main/assembly/filter.properties
@@ -19,7 +19,7 @@
 
 product.name=Apache Stratos LB
 product.key=LB
-product.version=4.0.0-SNAPSHOT
+product.version=4.0.0
 
 lb.version=2.0.5
 default.server.role=ElasticLoadBalancer
diff --git a/products/load-balancer/modules/distribution/src/main/bin/stratos.sh b/products/load-balancer/modules/distribution/src/main/bin/stratos.sh
index 1a2c3f8..5a6e2b3 100644
--- a/products/load-balancer/modules/distribution/src/main/bin/stratos.sh
+++ b/products/load-balancer/modules/distribution/src/main/bin/stratos.sh
@@ -17,7 +17,7 @@
 #  specific language governing permissions and limitations
 #  under the License.
 # ----------------------------------------------------------------------------
-# Main Script for the Apache Stratos
+# Main Script for the Apache Stratos (incubating)
 #
 # Environment Variable Prerequisites
 #
diff --git a/products/load-balancer/modules/distribution/src/main/conf/loadbalancer.conf b/products/load-balancer/modules/distribution/src/main/conf/loadbalancer.conf
index ea3fe8a..8060030 100644
--- a/products/load-balancer/modules/distribution/src/main/conf/loadbalancer.conf
+++ b/products/load-balancer/modules/distribution/src/main/conf/loadbalancer.conf
@@ -98,12 +98,6 @@ loadbalancer {
         }
     }
 
-    # Rewrite location header
-    # If this property is set to true, load balancer will rewrite HTTP Location header values found in response
-    # messages if the host is set to an ip address of a known member. The resulting Location header host will be
-    # set to corresponding cluster hostname and the port will be set to corresponding transport proxy port.
-    rewrite-location-header: true;
-
     # Static topology configuration
     # Define a static topology configuration if topology-event-listener is set to false.
     # A sample configuration has been given below:
diff --git a/products/load-balancer/modules/p2-profile/pom.xml b/products/load-balancer/modules/p2-profile/pom.xml
index b4791e0..08e747f 100755
--- a/products/load-balancer/modules/p2-profile/pom.xml
+++ b/products/load-balancer/modules/p2-profile/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos.load.balancer</groupId>
         <artifactId>load-balancer-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
         <relativePath>../../pom.xml</relativePath>
     </parent>
 
diff --git a/products/load-balancer/pom.xml b/products/load-balancer/pom.xml
index 7cb218f..8c896da 100755
--- a/products/load-balancer/pom.xml
+++ b/products/load-balancer/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
         <relativePath>../../pom.xml</relativePath>
     </parent>
 
diff --git a/products/pom.xml b/products/pom.xml
index b58a5ee..839b63b 100644
--- a/products/pom.xml
+++ b/products/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
@@ -37,6 +37,7 @@
         <module>stratos-cli</module>
         <module>load-balancer</module>
         <module>stratos</module>
+      
     </modules>
 </project>
 
diff --git a/products/stratos-cli/distribution/INSTALL.txt b/products/stratos-cli/distribution/INSTALL.txt
new file mode 100644
index 0000000..46ad852
--- /dev/null
+++ b/products/stratos-cli/distribution/INSTALL.txt
@@ -0,0 +1,42 @@
+================================================================================
+                        Apache Stratos CLI Installation
+================================================================================
+
+
+1. Extract the zip and go to the extracted directory
+
+Add execute permission to the script in Linux.
+chmod +x ./stratos.sh
+
+2. Export the host and port of the SC as environment variables
+
+Linux:
+export STRATOS_URL=https://stratosmanager.apache.org:9445
+
+Windows:
+set STRATOS_URL=https://stratosmanager.apache.org:9445
+
+3. Run the stratos.sh or stratos.bat as appropriate
+
+4. Export the following environment variables.
+
+Linux: (Add to your bashrc file)
+export JAVA_HOME=/opt/jdk1.6.0_24
+export PATH=$JAVA_HOME/bin:$PATH
+
+Windows: (Set in System Properties)
+set JAVA_HOME=C:\Java\jdk1.6.0_24
+set PATH=%JAVA_HOME%\bin;%PATH%
+
+4. Use the tentant username and password to login
+
+If you wish, you can also export your username and password as environment variables.
+If you export only the username, you will be prompted to enter the password.
+
+Linux:
+export STRATOS_USERNAME=<username>
+export STRATOS_PASSWORD=<password>
+
+Windows:
+set STRATOS_USERNAME=<username>
+set STRATOS_PASSWORD=<password>
\ No newline at end of file
diff --git a/products/stratos-cli/distribution/README.txt b/products/stratos-cli/distribution/README.txt
new file mode 100755
index 0000000..6829586
--- /dev/null
+++ b/products/stratos-cli/distribution/README.txt
@@ -0,0 +1,72 @@
+================================================================================
+                        Apache Stratos CLI
+================================================================================
+
+Welcome to the Apache Stratos CLI.
+
+The command line interface (CLI) is a powerful tool that clients can use
+to communicate with Stratos services. The CLI distribution only includes one
+jar file containing all dependent java libraries.
+
+The tenant can use the CLI tool on two separate modes if needed, which 
+are namely single command line mode and interactive mode. 
+
+If the user executes with a command as an argument, the CLI tool 
+will execute that command and exit with a status code. 
+
+However, if there is no command as an argument, the CLI tool will 
+enter into an interactive mode.
+
+A user will be able to carryout all the following functions via the
+CLI, with the exception of registering tenants and viewing logs.
+
+The CLI tool also supports command history and auto-completing features 
+in the interactive mode.
+
+Help
+==================================
+usage: stratos [-debug] [-h] [-p <password>] [-trace] [-u <username>]
+ -debug                     Enable debug logging
+ -h,--help                  Display this help
+ -p,--password <password>   Password
+ -trace                     Enable trace logging
+ -u,--username <username>   Username
+
+
+Available Commands:
+create-tenant             	Add new tenant
+list-autoscale-policies   	List available autoscale policies
+subscribe-cartridge       	Subscribe to a cartridge
+exit                      	Exit from Stratos Client Tool
+list-available-cartridges 	List available cartridges
+help                      	Help for commands
+list-available-partitions 	List available partitions
+deploy-cartridge          	Add new cartridge deployment
+unsubscribe-cartridge     	Unsubscribe from a subscribed cartridge
+list-subscribe-cartridges 	List subscribed cartridges with details
+deploy-partition          	Add new partition deployment
+deploy-autoscaling-policy 	Add new autoscaling policy deployment
+deploy-deployment-policy  	Add new deployment policy
+
+
+Support
+==================================
+
+Any problem with this release can be reported to Apache Stratos mailing list
+or in the JIRA issue tracker. If you are sending an email to the mailing
+list make sure to add the [Apache Stratos] prefix to the subject.
+
+Mailing list subscription:
+    dev-subscribe@stratos.apache.org
+
+
+Issue Tracker
+==================================
+
+Jira:
+    https://issues.apache.org/jira/browse/stratos
+
+
+Thank you for using Apache Stratos!
+The Stratos Team
+
diff --git a/products/stratos-cli/distribution/pom.xml b/products/stratos-cli/distribution/pom.xml
index 9671f95..577fb47 100644
--- a/products/stratos-cli/distribution/pom.xml
+++ b/products/stratos-cli/distribution/pom.xml
@@ -21,7 +21,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>apache-stratos-cli-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
diff --git a/products/stratos-cli/distribution/src/main/assembly/bin.xml b/products/stratos-cli/distribution/src/main/assembly/bin.xml
index 273273a..3998ff3 100644
--- a/products/stratos-cli/distribution/src/main/assembly/bin.xml
+++ b/products/stratos-cli/distribution/src/main/assembly/bin.xml
@@ -29,7 +29,7 @@
             <directory>../../../components/org.apache.stratos.cli/target</directory>
             <outputDirectory>${pom.artifactId}-${pom.version}</outputDirectory>
             <includes>
-                <include>org.apache.stratos.cli-${pom.version}-Tool.jar</include>
+                <include>org.apache.stratos.cli-${pom.version}.jar</include>
             </includes>
         </fileSet>
         <fileSet>
@@ -47,22 +47,23 @@
                 <include>stratos.bat</include>
             </includes>
         </fileSet>
-	<fileSet>
-            <directory>../</directory>
+        <fileSet>
+            <directory>${project.basedir}</directory>
             <outputDirectory>${pom.artifactId}-${pom.version}</outputDirectory>
             <includes>
+                <include>INSTALL.txt</include>
                 <include>README.txt</include>
             </includes>
         </fileSet>
     </fileSets>
     <files>
-  	<file>
+        <file>
             <source>src/main/notice/NOTICE</source>
             <outputDirectory>${pom.artifactId}-${pom.version}</outputDirectory>
             <filtered>true</filtered>
             <fileMode>644</fileMode>
         </file>
-	 <file>
+        <file>
             <source>src/main/license/LICENSE</source>
             <outputDirectory>${pom.artifactId}-${pom.version}</outputDirectory>
             <filtered>true</filtered>
diff --git a/products/stratos-cli/distribution/src/main/bin/stratos.bat b/products/stratos-cli/distribution/src/main/bin/stratos.bat
index 12c891e..354c664 100644
--- a/products/stratos-cli/distribution/src/main/bin/stratos.bat
+++ b/products/stratos-cli/distribution/src/main/bin/stratos.bat
@@ -32,5 +32,5 @@ if "%STRATOS_CLI_HOME%"=="" set STRATOS_CLI_HOME=%CD%
 
 cd %STRATOS_CLI_HOME%
 
-java -jar "org.apache.stratos.cli-4.0.0-SNAPSHOT-Tool.jar" %*
+java -jar "org.apache.stratos.cli-4.0.0-Tool.jar" %*
 
diff --git a/products/stratos-cli/distribution/src/main/bin/stratos.sh b/products/stratos-cli/distribution/src/main/bin/stratos.sh
index 060b6f5..be97b36 100755
--- a/products/stratos-cli/distribution/src/main/bin/stratos.sh
+++ b/products/stratos-cli/distribution/src/main/bin/stratos.sh
@@ -29,5 +29,5 @@ if [ -z $STRATOS_CLI_HOME ] ; then
 STRATOS_CLI_HOME="$PWD"
 fi
 
-java -jar $STRATOS_CLI_HOME/org.apache.stratos.cli-4.0.0-SNAPSHOT-Tool.jar $*
+java -jar $STRATOS_CLI_HOME/org.apache.stratos.cli-4.0.0.jar $*
 
diff --git a/products/stratos-cli/distribution/src/main/license/LICENSE b/products/stratos-cli/distribution/src/main/license/LICENSE
index 353011d..df32dcd 100644
--- a/products/stratos-cli/distribution/src/main/license/LICENSE
+++ b/products/stratos-cli/distribution/src/main/license/LICENSE
@@ -223,7 +223,7 @@ org.apache.geronimo.specs:geronimo-stax-api_1.0_spec:1.0.1
 org.apache.geronimo.specs.wso2:geronimo-stax-api_1.0_spec:1.0.1.wso2v1
 org.apache.httpcomponents.wso2:httpcore:4.1.0-wso2v1
 org.apache.neethi.wso2:neethi:2.0.4.wso2v4
-org.apache.stratos:org.apache.stratos.manager.stub:4.0.0-SNAPSHOT
+org.apache.stratos:org.apache.stratos.manager.stub:4.0.0
 org.apache.woden.wso2:woden:1.0.0.M8-wso2v1
 org.apache.ws.commons.axiom:axiom-api:1.2.11
 org.apache.ws.commons.axiom:axiom-impl:1.2.11
diff --git a/products/stratos-cli/pom.xml b/products/stratos-cli/pom.xml
index 41b2cfc..50ea437 100644
--- a/products/stratos-cli/pom.xml
+++ b/products/stratos-cli/pom.xml
@@ -22,7 +22,7 @@
      <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-products-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
     
diff --git a/products/stratos/conf/tenant-mgt.xml b/products/stratos/conf/tenant-mgt.xml
new file mode 100644
index 0000000..ddfe83a
--- /dev/null
+++ b/products/stratos/conf/tenant-mgt.xml
@@ -0,0 +1,42 @@
+<!--
+ ~ Licensed to the Apache Software Foundation (ASF) under one
+ ~ or more contributor license agreements.  See the NOTICE file
+ ~ distributed with this work for additional information
+ ~ regarding copyright ownership.  The ASF licenses this file
+ ~ to you under the Apache License, Version 2.0 (the
+ ~ "License"); you may not use this file except in compliance
+ ~ with the License.  You may obtain a copy of the License at
+ ~
+ ~     http://www.apache.org/licenses/LICENSE-2.0
+ ~
+ ~ Unless required by applicable law or agreed to in writing,
+ ~ software distributed under the License is distributed on an
+ ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ ~ KIND, either express or implied.  See the License for the
+ ~ specific language governing permissions and limitations
+ ~ under the License.
+ -->
+<TenantManagers>
+    <TenantManager class="org.wso2.carbon.user.core.tenant.JDBCTenantManager">
+        <Property name="MultiTenantRealmConfigBuilder">org.wso2.carbon.user.core.config.multitenancy.SimpleRealmConfigBuilder</Property>
+    </TenantManager>
+</TenantManagers>
+
+<!--If the product is using LDAP user store in MT mode, use following tenant manager.-->
+<!--TenantManager class="org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager">
+    <Property name="RootPartition">dc=wso2,dc=com</Property>
+    <Property name="OrganizationalObjectClass">organizationalUnit</Property>
+    <Property name="OrganizationalAttribute">ou</Property>
+    <Property name="OrganizationalSubContextObjectClass">organizationalUnit</Property>
+    <Property name="OrganizationalSubContextAttribute">ou</Property>
+</TenantManager-->
+<!--Following tenant manager is used by Identity Server (IS) as its default tenant manager.
+    IS will do token replacement when building the product. Therefore do not change the syntax.-->
+<!--TenantManager class="org.wso2.carbon.user.core.tenant.JDBCTenantManager">
+    <Property name="RootPartition">dc=wso2,dc=org</Property>
+    <Property name="OrganizationalObjectClass">organizationalUnit</Property>
+    <Property name="OrganizationalAttribute">ou</Property>
+    <Property name="OrganizationalSubContextObjectClass">organizationalUnit</Property>
+    <Property name="OrganizationalSubContextAttribute">ou</Property>
+</TenantManager-->
+
diff --git a/products/stratos/modules/distribution/INSTALL.txt b/products/stratos/modules/distribution/INSTALL.txt
index 31ea2f5..8af898f 100755
--- a/products/stratos/modules/distribution/INSTALL.txt
+++ b/products/stratos/modules/distribution/INSTALL.txt
@@ -1,8 +1,10 @@
-Installing  Apache Stratos Controller (SC) 1.0.1
-===============================================
+================================================================================
+                         Apache Stratos Installation
+================================================================================
 
 Standalone Mode
 ===============
+
 1. The directory containing this INSTALL file will be the root and it will be
    treated as Carbon home directory and let it be CARBON_HOME.
 
@@ -59,3 +61,7 @@ System Requirements
      level in Internet Explorer 6.x and the default medium security setting with
      IE does not allow sufficient level of JS or ActiveX enablement for the
      management console to run.
+
+
+Please refer below link for more information:
+https://cwiki.apache.org/confluence/display/STRATOS/4.0.0+Installation+Guide
\ No newline at end of file
diff --git a/products/stratos/modules/distribution/README.txt b/products/stratos/modules/distribution/README.txt
index 02db83a..543541d 100755
--- a/products/stratos/modules/distribution/README.txt
+++ b/products/stratos/modules/distribution/README.txt
@@ -1,15 +1,37 @@
-Apache Stratos Controller
------------------------
+================================================================================
+                                Apache Stratos
+================================================================================
 
-Welcome to the Apache Stratos Controller
+Welcome to the Apache Stratos distribution. This distribution includes Stratos Manager, Auto-scaler,
+Complex Event Processor and Cloud Contoller components. In single-JVM mode all four components could be run
+in single product and in multiple-JVM mode Stratos Manager, Auto-Scaler and Cloud Controller could be run using
+this distribution with carbon profiles and Complex Event Processor needs to be run separately.
 
-The Stratos Controller (SC) mainly consists of the graphical user interface (GUI) and The Artifact Distribution 
-Coordinator that is responsible for the distribution of artifacts has been embedded into the Stratos Controller. 
+Stratos Manager (SM)
+--------------------
+Stratos Manager includes a comprehensive RESTful API for integration with external PaaS management interfaces for all
+DevOps and user interaction.
 
-The Stratos Controller also defines the autoscaling policies that are defined for the Cartridges. 
+Auto-scaler
+-----------
+Auto-scaler is responsible for the elasticity of all components of the system. It contains an embedded rule engine to
+take fast and accurate decisions.
+
+Complex Event Processor (CEP)
+-----------------------------
+Complex Event Processor does temporal (i.e., time-based) queries to analyze all the event streams that are being sent to
+it and sends summarized information to the Auto-scaler. The event processing engine is an event aggregator/accumulator,
+which takes lots of events and produces messages that Auto-scaler uses to make elasticity decisions in a more granular manner.
+
+Cloud Controller (CC)
+---------------------
+Cloud Controller sends instructions via jClouds to the IaaS to create or destroy instances. It also listens to messages
+from instances and updates the routing topology periodically. Topology updates fire messages on a topic that the LBs listen to.
+
+
+Please refer below link for more information:
+https://cwiki.apache.org/confluence/display/STRATOS/4.0.0+Architecture
 
-For more information about Stratos Controller, please refer WSO2 Stratos Wiki Docs:
-http://docs.wso2.org/wiki/display/Stratos200/WSO2+Stratos+Documentation
 
 Crypto Notice
 =============
@@ -40,3 +62,7 @@ Crypto Notice
    Apache WSS4J     : http://ws.apache.org/wss4j/
    Apache Santuario : http://santuario.apache.org/
    Bouncycastle     : http://www.bouncycastle.org/
+
+
+Thank you for using Apache Stratos!
+The Stratos Team
\ No newline at end of file
diff --git a/products/stratos/modules/distribution/pom.xml b/products/stratos/modules/distribution/pom.xml
index f9c7444..05fe914 100755
--- a/products/stratos/modules/distribution/pom.xml
+++ b/products/stratos/modules/distribution/pom.xml
@@ -21,7 +21,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
         <relativePath>../../pom.xml</relativePath>
     </parent>
 
@@ -452,7 +452,7 @@
         <dependency>
             <groupId>org.apache.stratos</groupId>
             <artifactId>org.apache.stratos.cep.extension</artifactId>
-            <version>4.0.0-SNAPSHOT</version>
+            <version>4.0.0</version>
         </dependency>
 	<dependency>
 	    <groupId>org.apache.geronimo.specs</groupId>
diff --git a/products/stratos/modules/distribution/src/assembly/bin.xml b/products/stratos/modules/distribution/src/assembly/bin.xml
index e5cc69e..581fcc5 100755
--- a/products/stratos/modules/distribution/src/assembly/bin.xml
+++ b/products/stratos/modules/distribution/src/assembly/bin.xml
@@ -39,17 +39,18 @@
                 <exclude>**/LICENSE.txt</exclude>
                 <exclude>**/NOTICE</exclude>
                 <exclude>**/release-notes.html</exclude>
- 		<exclude>**/launch.ini</exclude>
+ 		        <exclude>**/launch.ini</exclude>
                 <exclude>**/carbon.xml</exclude>
                 <exclude>**/README*</exclude>
                 <exclude>**/log4j.properties</exclude>
                 <exclude>**/repository/components/**</exclude>
-		<exclude>**/lib/endorsed/**</exclude>
+		        <exclude>**/lib/endorsed/**</exclude>
                 <exclude>**/dbscripts/mysql.sql</exclude>
                 <exclude>**/repository/conf/security/cipher-tool.properties</exclude>
                 <exclude>**/repository/conf/security/cipher-text.properties</exclude>
-		<exclude>**/repository/conf/axis2/axis2.xml</exclude>
-		<exclude>**/repository/conf/registry.xml</exclude>
+		        <exclude>**/repository/conf/axis2/axis2.xml</exclude>
+		        <exclude>**/repository/conf/registry.xml</exclude>
+
 		<exclude>**/repository/conf/log4j.properties</exclude>
   		<exclude>**/repository/conf/data-bridge/**</exclude>
             </excludes>
@@ -153,6 +154,7 @@
                 <exclude>**/datasources.properties</exclude>
                 <exclude>.svn</exclude>
                 <exclude>**/temp-artifacts/**</exclude>
+                <exclude>tenant-mgt.xml</exclude>
                 <exclude>email-bill-generated.xml</exclude>
                 <exclude>email-billing-notifications.xml</exclude>
                 <exclude>email-new-tenant-activation.xml</exclude>
@@ -168,6 +170,7 @@
 		<exclude>tenant-reg-agent.xml</exclude>
                 <exclude>features-dashboard.xml</exclude>
                 <exclude>**/data-bridge/**</exclude>
+
             </excludes>
         </fileSet>
         <fileSet>
@@ -646,7 +649,7 @@
         </file>
 		<!-- autoscaler -->
         <file>
-            <source>INSTALL.txt</source>
+            <source>${project.basedir}/INSTALL.txt</source>
             <outputDirectory>${pom.artifactId}-${pom.version}</outputDirectory>
             <filtered>true</filtered>
             <fileMode>644</fileMode>
@@ -714,7 +717,7 @@
             <fileMode>644</fileMode>
         </file>
         <file>
-            <source>README.txt</source>
+            <source>${project.basedir}/README.txt</source>
             <outputDirectory>${pom.artifactId}-${pom.version}</outputDirectory>
             <filtered>true</filtered>
             <fileMode>644</fileMode>
@@ -835,6 +838,12 @@
 	    <destName>jaas.conf</destName>
             <filtered>true</filtered>
         </file>
+        <file>
+            <source>../../conf/tenant-mgt.xml</source>
+            <outputDirectory>${pom.artifactId}-${pom.version}/repository/conf</outputDirectory>
+            <filtered>true</filtered>
+            <fileMode>644</fileMode>
+        </file>
         <!--Application authenticators -->
         <file>
             <source>../../conf/application-authenticators.xml</source>
@@ -847,6 +856,12 @@
             <outputDirectory>${pom.artifactId}-${pom.version}/repository/deployment/server/webapps/</outputDirectory>
             <fileMode>644</fileMode>
         </file>
+        <!-- Meta data service -->
+        <file>
+            <source>../p2-profile-gen/target/wso2carbon-core-${carbon.kernel.version}/repository/deployment/server/webapps/stratos.war</source>
+            <outputDirectory>${pom.artifactId}-${pom.version}/repository/deployment/server/webapps/</outputDirectory>
+            <fileMode>644</fileMode>
+        </file>
         <!-- End of REST endpoint webapp -->
         <file>
             <source>../../conf/data-bridge/data-bridge-config.xml</source>
diff --git a/products/stratos/modules/distribution/src/assembly/filter.properties b/products/stratos/modules/distribution/src/assembly/filter.properties
index 0ff05ac..e7e41dc 100755
--- a/products/stratos/modules/distribution/src/assembly/filter.properties
+++ b/products/stratos/modules/distribution/src/assembly/filter.properties
@@ -19,7 +19,7 @@
 
 product.name=Apache Stratos
 product.key=STRATOS
-product.version=4.0.0-SNAPSHOT
+product.version=4.0.0
 hotdeployment=true
 hotupdate=false
 carbon.version=4.2.0
diff --git a/products/stratos/modules/distribution/src/bin/stratos.sh b/products/stratos/modules/distribution/src/bin/stratos.sh
index 644b8a6..eda3730 100755
--- a/products/stratos/modules/distribution/src/bin/stratos.sh
+++ b/products/stratos/modules/distribution/src/bin/stratos.sh
@@ -17,7 +17,7 @@
 #  specific language governing permissions and limitations
 #  under the License.
 # ----------------------------------------------------------------------------
-# Main Script for the Apache Stratos 
+# Main Script for the Apache Stratos (incubating)
 #
 # Environment Variable Prerequisites
 #
@@ -183,7 +183,7 @@ elif [ "$CMD" = "start" ]; then
   fi
   export CARBON_HOME=$CARBON_HOME
 # using nohup bash to avoid erros in solaris OS.TODO
-  nohup bash $CARBON_HOME/bin/stratos.sh $args < /dev/null > /dev/null 2>&1 &
+  nohup bash $CARBON_HOME/bin/stratos.sh $args > /dev/null 2>&1 &
   exit 0
 elif [ "$CMD" = "stop" ]; then
   export CARBON_HOME=$CARBON_HOME
@@ -202,7 +202,7 @@ elif [ "$CMD" = "restart" ]; then
   done
 
 # using nohup bash to avoid erros in solaris OS.TODO
-  nohup bash $CARBON_HOME/bin/stratos.sh $args < /dev/null > /dev/null 2>&1 &
+  nohup bash $CARBON_HOME/bin/stratos.sh $args > /dev/null 2>&1 &
   exit 0
 elif [ "$CMD" = "test" ]; then
     JAVACMD="exec "$JAVACMD""
diff --git a/products/stratos/modules/distribution/src/main/conf/autoscaler.xml b/products/stratos/modules/distribution/src/main/conf/autoscaler.xml
index f733514..c0c4eb9 100644
--- a/products/stratos/modules/distribution/src/main/conf/autoscaler.xml
+++ b/products/stratos/modules/distribution/src/main/conf/autoscaler.xml
@@ -27,9 +27,9 @@
 	    </rulesEvaluator>
 	    <cloudController>
 	        <hostname>localhost</hostname>
-		    <port>9443</port>
-		    <!-->CC client timout in ms<-->
-            <clientTimeout>300000</clientTimeout>
+		<port>9444</port>
+		<!-->CC client timout in ms<-->
+                <clientTimeout>300000</clientTimeout>
 	    </cloudController>
             <stratosManager>
 	        <hostname>localhost</hostname>
@@ -41,5 +41,7 @@
 		<!-->member expiry timeout (time waited till activation) in ms<-->
 		<expiryTimeout>900000</expiryTimeout>
 	    </member>
+	    <!-- monitor task interval -->
+	    <monitorInterval>90000</monitorInterval>
 	</autoscaler>
 </configuration>
diff --git a/products/stratos/modules/distribution/src/main/conf/cartridge-config.properties b/products/stratos/modules/distribution/src/main/conf/cartridge-config.properties
index 4a121d8..eaa7dcc 100644
--- a/products/stratos/modules/distribution/src/main/conf/cartridge-config.properties
+++ b/products/stratos/modules/distribution/src/main/conf/cartridge-config.properties
@@ -19,8 +19,8 @@
 #
 #
 
-autoscaler.service.url=https://localhost:9443/services/AutoScalerService/
-cloud.controller.service.url=https://localhost:9443/services/CloudControllerService/
+autoscaler.service.url=https://as.stratos.apache.org:9446/services/AutoScalerService/
+cloud.controller.service.url=https://cc.stratos.apache.org:9444/services/CloudControllerService/
 puppet.ip=127.0.0.1
 puppet.hostname=puppet.apache.stratos.org
 puppet.environment=stratos
diff --git a/products/stratos/modules/distribution/src/main/conf/mincheck.drl b/products/stratos/modules/distribution/src/main/conf/mincheck.drl
index b1c0f7c..ceeab48 100755
--- a/products/stratos/modules/distribution/src/main/conf/mincheck.drl
+++ b/products/stratos/modules/distribution/src/main/conf/mincheck.drl
@@ -48,6 +48,8 @@ global org.apache.stratos.messaging.domain.topology.Topology $topology;
 global java.util.Map partitionCtxts;
 global java.lang.String clusterId;
 global java.lang.String lbRef;
+global java.lang.Boolean isPrimary;
+global Integer primaryMemberCount;
 
 rule "Minimum Rule"
 dialect "mvel"
@@ -56,11 +58,14 @@ dialect "mvel"
            eval(log.debug("Running minimum rule: [network-partition] " + $ctxt.getNetworkPartitionId() + " [partition] " + $ctxt.getPartitionId()))
 	       eval(log.debug("[min-check] [network-partition] " + $ctxt.getNetworkPartitionId() + " [partition] " + $ctxt.getPartitionId() + " Non terminated member count: " + $ctxt.getNonTerminatedMemberCount()))
 	       eval(log.debug("[min-check] [network-partition] " + $ctxt.getNetworkPartitionId() + " [partition] " + $ctxt.getPartitionId() + " Minimum member count: " + $ctxt.getMinimumMemberCount()))
-	       eval($ctxt.getNonTerminatedMemberCount() < $ctxt.getMinimumMemberCount())
-
+	       eval ( (isPrimary && (primaryMemberCount < $ctxt.getMinimumMemberCount() )) || ( !isPrimary && ($ctxt.getNonTerminatedMemberCount() < $ctxt.getMinimumMemberCount() )) )
        then
-	       $delegator.delegateSpawn($ctxt, clusterId, lbRef);
-	       
+           if (isPrimary){
+              log.debug("[min-check] true  [primary] true   [primary member count] " + primaryMemberCount);
+           } else{
+              log.debug("[min-check] true  [primary] false");
+           }
+	       $delegator.delegateSpawn($ctxt, clusterId, lbRef, isPrimary);
 end
 
 rule "Terminate Obsoleted Instances"
diff --git a/products/stratos/modules/distribution/src/main/conf/scaling.drl b/products/stratos/modules/distribution/src/main/conf/scaling.drl
index 8600a27..b3f6466 100644
--- a/products/stratos/modules/distribution/src/main/conf/scaling.drl
+++ b/products/stratos/modules/distribution/src/main/conf/scaling.drl
@@ -53,6 +53,8 @@ global java.lang.String lbRef;
 global java.lang.Boolean rifReset;
 global java.lang.Boolean mcReset;
 global java.lang.Boolean laReset;
+global java.lang.Boolean isPrimary;
+global java.util.List primaryMembers;
 
 rule "Scaling Rule"
 dialect "mvel"
@@ -67,46 +69,36 @@ dialect "mvel"
         eval(log.debug("[scaling] [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId + " Algorithm name: " + algorithmName))
         eval(log.debug("[scaling] [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId + " Algorithm: " + autoscaleAlgorithm))
 
-	
-        rifUpperLimit : Float() from  $loadThresholds.getRequestsInFlight().getUpperLimit()
-        rifLowerLimit : Float() from  $loadThresholds.getRequestsInFlight().getLowerLimit()
 
         rifAverage : Float() from  $networkPartitionContext.getAverageRequestsInFlight()
         rifGradient : Float() from  $networkPartitionContext.getRequestsInFlightGradient()
         rifSecondDerivative : Float() from  $networkPartitionContext.getRequestsInFlightSecondDerivative()
+        rifAverageLimit : Float() from  $loadThresholds.getRequestsInFlight().getAverage()
 	    rifPredictedValue : Double() from $delegator.getPredictedValueForNextMinute(rifAverage, rifGradient, rifSecondDerivative, 1)
 
-        mcUpperLimit : Float() from  $loadThresholds.getMemoryConsumption().getUpperLimit()
-        mcLowerLimit : Float() from  $loadThresholds.getMemoryConsumption().getLowerLimit()
-
         memoryConsumptionAverage : Float() from  $networkPartitionContext.getAverageMemoryConsumption()
         memoryConsumptionGradient : Float() from  $networkPartitionContext.getMemoryConsumptionGradient()
         memoryConsumptionSecondDerivative : Float() from  $networkPartitionContext.getMemoryConsumptionSecondDerivative()
+        mcAverageLimit : Float() from  $loadThresholds.getMemoryConsumption().getAverage()
 	    mcPredictedValue : Double() from $delegator.getPredictedValueForNextMinute(memoryConsumptionAverage, memoryConsumptionGradient, memoryConsumptionSecondDerivative, 1)
 
-        laUpperLimit : Float() from  $loadThresholds.getLoadAverage().getUpperLimit()
-        laLowerLimit : Float() from  $loadThresholds.getLoadAverage().getLowerLimit()
-
         loadAverageAverage : Float() from  $networkPartitionContext.getAverageLoadAverage()
         loadAverageGradient : Float() from  $networkPartitionContext.getLoadAverageGradient()
         loadAverageSecondDerivative : Float() from  $networkPartitionContext.getLoadAverageSecondDerivative()
+        laAverageLimit : Float() from  $loadThresholds.getLoadAverage().getAverage()
 	    laPredictedValue : Double() from $delegator.getPredictedValueForNextMinute(loadAverageAverage, loadAverageGradient, loadAverageSecondDerivative, 1)
 
-        scaleUp : Boolean() from ((rifReset && (rifPredictedValue > rifUpperLimit)) || (mcReset && (mcPredictedValue > mcUpperLimit)) || (laReset && (laPredictedValue > laUpperLimit)))
-        scaleDown : Boolean() from ((rifReset && (rifPredictedValue < rifLowerLimit )) && (mcReset && (mcPredictedValue < mcLowerLimit)) && (laReset && (laPredictedValue < laLowerLimit)))
+        scaleUp : Boolean() from ((rifReset && (rifPredictedValue > rifAverageLimit * 0.8)) || (mcReset && (mcPredictedValue > mcAverageLimit * 0.8)) || (laReset && (laPredictedValue > laAverageLimit * 0.8)))
+        scaleDown : Boolean() from ((rifReset && (rifPredictedValue < rifAverageLimit * 0.1)) && (mcReset && (mcPredictedValue < mcAverageLimit * 0.1)) && (laReset && (laPredictedValue < laAverageLimit * 0.1)))
 
-        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " RIF Resetted?: " + rifReset))
         eval(log.debug("[scaling] " + " [cluster] " + clusterId + " RIF predicted value: " + rifPredictedValue))
-        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " RIF upper limit: " + rifUpperLimit))
-        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " RIF lower limit: " + rifLowerLimit))
+        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " RIF average limit: " + rifAverageLimit))
 
         eval(log.debug("[scaling] " + " [cluster] " + clusterId + " MC predicted value: " + mcPredictedValue))
-        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " MC upper limit: " + mcUpperLimit))
-        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " MC lower limit: " + mcLowerLimit))
+        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " MC average limit: " + mcAverageLimit))
 
         eval(log.debug("[scaling] " + " [cluster] " + clusterId + " LA predicted value: " + laPredictedValue))
-        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " LA upper limit: " + laUpperLimit))
-        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " LA lower limit: " + laLowerLimit))
+        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " LA Average limit: " + laAverageLimit))
 
         eval(log.debug("[scaling] " + " [cluster] " + clusterId + " Scale-up action: " + scaleUp))
         eval(log.debug("[scaling] " + " [cluster] " + clusterId + " Scale-down action: " + scaleDown))
@@ -119,7 +111,7 @@ dialect "mvel"
             if(partition != null){
                 log.info("[scale-up] Partition available, hence trying to spawn an instance to scale up!" );
                 log.debug("[scale-up] " + " [partition] " + partition.getId() + " [cluster] " + clusterId );
-                $delegator.delegateSpawn($networkPartitionContext.getPartitionCtxt(partition.getId()), clusterId, lbRef);
+                $delegator.delegateSpawn($networkPartitionContext.getPartitionCtxt(partition.getId()), clusterId, lbRef, isPrimary);
             }
         } else if(scaleDown){
 
@@ -136,8 +128,15 @@ dialect "mvel"
                     log.debug("[scale-down] " + " [partition] " + partition.getId() + " [cluster] " + clusterId);
                     partitionContext = $networkPartitionContext.getPartitionCtxt(partition.getId());
 
-                    for(MemberStatsContext memberStatsContext: partitionContext.getMemberStatsContexts().values()){
 
+					// In partition context member stat context, all the primary members need to be
+					// avoided being selected as the member to terminated
+					
+
+                    for(MemberStatsContext memberStatsContext: partitionContext.getMemberStatsContexts().values()){
+					
+						if( !primaryMembers.contains(memberStatsContext.getMemberId()) ) {
+						
                         LoadAverage loadAverage = memberStatsContext.getLoadAverage();
                         log.debug("[scale-down] " + " [cluster] "
                             + clusterId + " [member] " + memberStatsContext.getMemberId() + " Load average: " + loadAverage);
@@ -166,6 +165,10 @@ dialect "mvel"
                             selectedMemberStatsContext = memberStatsContext;
                             lowestOverallLoad = overallLoad;
                         }
+                        
+                        							
+					  }
+						
                     }
                     if(selectedMemberStatsContext != null) {
                         log.info("[scale-down] Trying to terminating an instace to scale down!" );
diff --git a/products/stratos/modules/distribution/src/main/license/LICENSE b/products/stratos/modules/distribution/src/main/license/LICENSE
index e293289..4881393 100644
--- a/products/stratos/modules/distribution/src/main/license/LICENSE
+++ b/products/stratos/modules/distribution/src/main/license/LICENSE
@@ -704,9 +704,6 @@ tcpmon-1.0.jar,
 xstream-1.4.1.jar,
 dhtmlHistory.js
 
-Copyright (c) 2010 Terence Parr
-All rights reserved.
-
 [The BSD License]
 
 Redistribution and use in source and binary forms, with or without modification,
@@ -1049,6 +1046,7 @@ Scriptaculous-1.7.0
 
 The MIT License (MIT)
 
+
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
diff --git a/products/stratos/modules/p2-profile-gen/pom.xml b/products/stratos/modules/p2-profile-gen/pom.xml
index 64ae09c..4faf8a3 100644
--- a/products/stratos/modules/p2-profile-gen/pom.xml
+++ b/products/stratos/modules/p2-profile-gen/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
         <relativePath>../../pom.xml</relativePath>
     </parent>
 
@@ -207,6 +207,7 @@
                                 <featureArtifactDef>org.apache.stratos:org.apache.stratos.manager.feature:${project.version}</featureArtifactDef>
                                 <featureArtifactDef>org.apache.stratos:org.apache.stratos.cartridge.mgt.ui.feature:${project.version}</featureArtifactDef>
                                 <featureArtifactDef>org.apache.stratos:org.apache.stratos.rest.endpoint.feature:${project.version}</featureArtifactDef>
+                                <featureArtifactDef>org.apache.stratos:org.apache.stratos.metadataservice.feature:${project.version}</featureArtifactDef>
                                 <featureArtifactDef>org.wso2.carbon:org.wso2.carbon.identity.authenticator.saml2.sso.server.feature:${carbon.platform.patch.version.4.2.1}</featureArtifactDef>
                                 <featureArtifactDef>org.wso2.carbon:org.wso2.carbon.identity.authenticator.saml2.sso.ui.feature:${carbon.platform.patch.version.4.2.2}</featureArtifactDef>
                                 <featureArtifactDef>org.wso2.carbon:org.wso2.carbon.identity.application.authentication.framework.server.feature:${carbon.platform.patch.version.4.2.1}</featureArtifactDef>
@@ -412,6 +413,10 @@
                                     <version>${project.version}</version>
                                 </feature>
                                 <feature>
+                                    <id>org.apache.stratos.metadataservice.feature.group</id>
+                                    <version>${project.version}</version>
+                                </feature>
+                                <feature>
                                     <id>org.apache.stratos.messaging.feature.group</id>
                                     <version>${project.version}</version>
                                 </feature>
@@ -687,6 +692,10 @@
                                     <id>org.apache.stratos.rest.endpoint.feature.group</id>
                                     <version>${project.version}</version>
                                 </feature>
+                                 <feature>
+                                    <id>org.apache.stratos.metadataservice.feature.group</id>
+                                    <version>${project.version}</version>
+                                </feature>
                                 <feature>
                                     <id>org.apache.stratos.messaging.feature.group</id>
                                     <version>${project.version}</version>
diff --git a/products/stratos/pom.xml b/products/stratos/pom.xml
index f478d6a..2f3e7e9 100755
--- a/products/stratos/pom.xml
+++ b/products/stratos/pom.xml
@@ -20,7 +20,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-products-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
     
     <modelVersion>4.0.0</modelVersion>
@@ -228,6 +228,7 @@
                 <artifactId>org.apache.stratos.redirector.servlet</artifactId>
                 <version>${project.version}</version>
             </dependency>
+            
             <dependency>
                 <groupId>org.apache.batik.wso2</groupId>
                 <artifactId>batik</artifactId>
diff --git a/service-stubs/org.apache.stratos.account.mgt.stub/pom.xml b/service-stubs/org.apache.stratos.account.mgt.stub/pom.xml
index 4edc39a..8756d30 100644
--- a/service-stubs/org.apache.stratos.account.mgt.stub/pom.xml
+++ b/service-stubs/org.apache.stratos.account.mgt.stub/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-service-stubs-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/service-stubs/org.apache.stratos.adc.instanceinfo.mgt.stub/pom.xml b/service-stubs/org.apache.stratos.adc.instanceinfo.mgt.stub/pom.xml
index 38d9bc2..4c7394b 100644
--- a/service-stubs/org.apache.stratos.adc.instanceinfo.mgt.stub/pom.xml
+++ b/service-stubs/org.apache.stratos.adc.instanceinfo.mgt.stub/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-service-stubs-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/service-stubs/org.apache.stratos.adc.reponotification.service.stub/pom.xml b/service-stubs/org.apache.stratos.adc.reponotification.service.stub/pom.xml
index b636bb3..00e2449 100644
--- a/service-stubs/org.apache.stratos.adc.reponotification.service.stub/pom.xml
+++ b/service-stubs/org.apache.stratos.adc.reponotification.service.stub/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-service-stubs-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/service-stubs/org.apache.stratos.autoscaler.service.stub/pom.xml b/service-stubs/org.apache.stratos.autoscaler.service.stub/pom.xml
index 710623f..9c0b0be 100644
--- a/service-stubs/org.apache.stratos.autoscaler.service.stub/pom.xml
+++ b/service-stubs/org.apache.stratos.autoscaler.service.stub/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-service-stubs-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
@@ -47,7 +47,7 @@
                         <configuration>
                             <tasks>
                                 <java classname="org.apache.axis2.wsdl.WSDL2Java" fork="true">
-                                    <arg line="-uri src/main/resources/AutoScalerService.wsdl -u -uw -o target/generated-code -p org.apache.stratos.autoscaler.stub -ns2p http://policy.deployment.autoscaler.stratos.apache.org/xsd=org.apache.stratos.autoscaler.deployment.policy,http://model.policy.autoscaler.stratos.apache.org/xsd=org.apache.stratos.autoscaler.policy.model,http://exception.autoscaler.stratos.apache.org/xsd=org.apache.stratos.autoscaler.exception,http://partition.deployment.stub.controller.cloud.stratos.apache.org/xsd=org.apache.stratos.cloud.controller.stub.deployment.partition,http://pojo.stub.controller.cloud.stratos.apache.org/xsd=org.apache.stratos.cloud.controller.stub.pojo,http://partition.autoscaler.stratos.apache.org/xsd=org.apache.stratos.autoscaler.partition" />
+                                    <arg line="-uri src/main/resources/AutoScalerService.wsdl -u -uw -o target/generated-code -p org.apache.stratos.autoscaler.stub -ns2p http://policy.deployment.autoscaler.stratos.apache.org/xsd=org.apache.stratos.autoscaler.deployment.policy,http://model.policy.autoscaler.stratos.apache.org/xsd=org.apache.stratos.autoscaler.policy.model,http://exception.autoscaler.stratos.apache.org/xsd=org.apache.stratos.autoscaler.exception,http://partition.deployment.controller.cloud.stratos.apache.org/xsd=org.apache.stratos.cloud.controller.stub.deployment.partition,http://pojo.controller.cloud.stratos.apache.org/xsd=org.apache.stratos.cloud.controller.stub.pojo,http://partition.autoscaler.stratos.apache.org/xsd=org.apache.stratos.autoscaler.partition" />
                                     <classpath refid="maven.dependency.classpath" />
                                     <classpath refid="maven.compile.classpath" />
                                     <classpath refid="maven.runtime.classpath" />
diff --git a/service-stubs/org.apache.stratos.autoscaler.service.stub/src/main/resources/AutoScalerService.wsdl b/service-stubs/org.apache.stratos.autoscaler.service.stub/src/main/resources/AutoScalerService.wsdl
index 23b4099..422f85f 100644
--- a/service-stubs/org.apache.stratos.autoscaler.service.stub/src/main/resources/AutoScalerService.wsdl
+++ b/service-stubs/org.apache.stratos.autoscaler.service.stub/src/main/resources/AutoScalerService.wsdl
@@ -1,4 +1,26 @@
-<wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:ns="http://api.autoscaler.stratos.apache.org" xmlns:ax28="http://partition.autoscaler.stratos.apache.org/xsd" xmlns:ax25="http://pojo.stub.controller.cloud.stratos.apache.org/xsd" xmlns:ax23="http://policy.deployment.autoscaler.stratos.apache.org/xsd" xmlns:ax24="http://partition.deployment.stub.controller.cloud.stratos.apache.org/xsd" xmlns:ax216="http://exception.autoscaler.stratos.apache.org/xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ax214="http://model.policy.autoscaler.stratos.apache.org/xsd" xmlns:ns1="http://org.apache.axis2/xsd" xmlns:wsaw="http://www.w3.org/2006/05/addressing/wsdl" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" targetNamespace="http://api.autoscaler.stratos.apache.org">
+<?xml version='1.0'?>
+<!--
+
+ Licensed to the Apache Software Foundation (ASF) under one
+ or more contributor license agreements.  See the NOTICE file
+ distributed with this work for additional information
+ regarding copyright ownership.  The ASF licenses this file
+ to you under the Apache License, Version 2.0 (the
+ "License"); you may not use this file except in compliance
+ with the License.  You may obtain a copy of the License at
+
+   http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing,
+ software distributed under the License is distributed on an
+ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ KIND, either express or implied.  See the License for the
+ specific language governing permissions and limitations
+ under the License.
+
+-->
+
+<wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:ns="http://api.autoscaler.stratos.apache.org" xmlns:ax28="http://partition.autoscaler.stratos.apache.org/xsd" xmlns:ax25="http://pojo.controller.cloud.stratos.apache.org/xsd" xmlns:ax23="http://policy.deployment.autoscaler.stratos.apache.org/xsd" xmlns:ax24="http://partition.deployment.controller.cloud.stratos.apache.org/xsd" xmlns:ax216="http://exception.autoscaler.stratos.apache.org/xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ax214="http://model.policy.autoscaler.stratos.apache.org/xsd" xmlns:ns1="http://org.apache.axis2/xsd" xmlns:wsaw="http://www.w3.org/2006/05/addressing/wsdl" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" targetNamespace="http://api.autoscaler.stratos.apache.org">
     <wsdl:documentation>AutoScalerService</wsdl:documentation>
     <wsdl:types>
         <xs:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://exception.autoscaler.stratos.apache.org/xsd">
@@ -18,25 +40,9 @@
                 </xs:sequence>
             </xs:complexType>
         </xs:schema>
-        <xs:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://pojo.stub.controller.cloud.stratos.apache.org/xsd">
-            <xs:complexType name="Properties">
-                <xs:sequence>
-                    <xs:element maxOccurs="unbounded" minOccurs="0" name="properties" nillable="true" type="ax25:Property"></xs:element>
-                    <xs:element minOccurs="0" name="propertiesSpecified" type="xs:boolean"></xs:element>
-                </xs:sequence>
-            </xs:complexType>
-            <xs:complexType name="Property">
-                <xs:sequence>
-                    <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"></xs:element>
-                    <xs:element minOccurs="0" name="nameSpecified" type="xs:boolean"></xs:element>
-                    <xs:element minOccurs="0" name="value" nillable="true" type="xs:string"></xs:element>
-                    <xs:element minOccurs="0" name="valueSpecified" type="xs:boolean"></xs:element>
-                </xs:sequence>
-            </xs:complexType>
-        </xs:schema>
-        <xs:schema xmlns:ax217="http://exception.autoscaler.stratos.apache.org/xsd" xmlns:ax215="http://model.policy.autoscaler.stratos.apache.org/xsd" xmlns:ax212="http://partition.deployment.stub.controller.cloud.stratos.apache.org/xsd" xmlns:ax213="http://partition.autoscaler.stratos.apache.org/xsd" xmlns:ax211="http://policy.deployment.autoscaler.stratos.apache.org/xsd" attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://api.autoscaler.stratos.apache.org">
+        <xs:schema xmlns:ax217="http://exception.autoscaler.stratos.apache.org/xsd" xmlns:ax215="http://model.policy.autoscaler.stratos.apache.org/xsd" xmlns:ax212="http://partition.deployment.controller.cloud.stratos.apache.org/xsd" xmlns:ax213="http://partition.autoscaler.stratos.apache.org/xsd" xmlns:ax211="http://policy.deployment.autoscaler.stratos.apache.org/xsd" attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://api.autoscaler.stratos.apache.org">
             <xs:import namespace="http://policy.deployment.autoscaler.stratos.apache.org/xsd"></xs:import>
-            <xs:import namespace="http://partition.deployment.stub.controller.cloud.stratos.apache.org/xsd"></xs:import>
+            <xs:import namespace="http://partition.deployment.controller.cloud.stratos.apache.org/xsd"></xs:import>
             <xs:import namespace="http://partition.autoscaler.stratos.apache.org/xsd"></xs:import>
             <xs:import namespace="http://model.policy.autoscaler.stratos.apache.org/xsd"></xs:import>
             <xs:import namespace="http://exception.autoscaler.stratos.apache.org/xsd"></xs:import>
@@ -320,8 +326,8 @@
                 </xs:complexType>
             </xs:element>
         </xs:schema>
-        <xs:schema xmlns:ax29="http://partition.deployment.stub.controller.cloud.stratos.apache.org/xsd" attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://partition.autoscaler.stratos.apache.org/xsd">
-            <xs:import namespace="http://partition.deployment.stub.controller.cloud.stratos.apache.org/xsd"></xs:import>
+        <xs:schema xmlns:ax29="http://partition.deployment.controller.cloud.stratos.apache.org/xsd" attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://partition.autoscaler.stratos.apache.org/xsd">
+            <xs:import namespace="http://partition.deployment.controller.cloud.stratos.apache.org/xsd"></xs:import>
             <xs:complexType name="PartitionGroup">
                 <xs:sequence>
                     <xs:element minOccurs="0" name="id" nillable="true" type="xs:string"></xs:element>
@@ -341,32 +347,41 @@
             </xs:complexType>
             <xs:complexType name="LoadThresholds">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="loadAverage" nillable="true" type="ax214:LoadAverageThresholds"></xs:element>
-                    <xs:element minOccurs="0" name="memoryConsumption" nillable="true" type="ax214:MemoryConsumptionThresholds"></xs:element>
-                    <xs:element minOccurs="0" name="requestsInFlight" nillable="true" type="ax214:RequestsInFlightThresholds"></xs:element>
+                    <xs:element minOccurs="0" name="loadAverage" nillable="true" type="ax214:LoadAverage"></xs:element>
+                    <xs:element minOccurs="0" name="memoryConsumption" nillable="true" type="ax214:MemoryConsumption"></xs:element>
+                    <xs:element minOccurs="0" name="requestsInFlight" nillable="true" type="ax214:RequestsInFlight"></xs:element>
                 </xs:sequence>
             </xs:complexType>
-            <xs:complexType name="LoadAverageThresholds">
+            <xs:complexType name="LoadAverage">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="lowerLimit" type="xs:float"></xs:element>
-                    <xs:element minOccurs="0" name="upperLimit" type="xs:float"></xs:element>
+                    <xs:element minOccurs="0" name="average" type="xs:float"></xs:element>
+                    <xs:element minOccurs="0" name="gradient" type="xs:float"></xs:element>
+                    <xs:element minOccurs="0" name="scaleDownMarginOfGradient" type="xs:float"></xs:element>
+                    <xs:element minOccurs="0" name="scaleDownMarginOfSecondDerivative" type="xs:float"></xs:element>
+                    <xs:element minOccurs="0" name="secondDerivative" type="xs:float"></xs:element>
                 </xs:sequence>
             </xs:complexType>
-            <xs:complexType name="MemoryConsumptionThresholds">
+            <xs:complexType name="MemoryConsumption">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="lowerLimit" type="xs:float"></xs:element>
-                    <xs:element minOccurs="0" name="upperLimit" type="xs:float"></xs:element>
+                    <xs:element minOccurs="0" name="average" type="xs:float"></xs:element>
+                    <xs:element minOccurs="0" name="gradient" type="xs:float"></xs:element>
+                    <xs:element minOccurs="0" name="scaleDownMarginOfGradient" type="xs:float"></xs:element>
+                    <xs:element minOccurs="0" name="scaleDownMarginOfSecondDerivative" type="xs:float"></xs:element>
+                    <xs:element minOccurs="0" name="secondDerivative" type="xs:float"></xs:element>
                 </xs:sequence>
             </xs:complexType>
-            <xs:complexType name="RequestsInFlightThresholds">
+            <xs:complexType name="RequestsInFlight">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="lowerLimit" type="xs:float"></xs:element>
-                    <xs:element minOccurs="0" name="upperLimit" type="xs:float"></xs:element>
+                    <xs:element minOccurs="0" name="average" type="xs:float"></xs:element>
+                    <xs:element minOccurs="0" name="gradient" type="xs:float"></xs:element>
+                    <xs:element minOccurs="0" name="scaleDownMarginOfGradient" type="xs:float"></xs:element>
+                    <xs:element minOccurs="0" name="scaleDownMarginOfSecondDerivative" type="xs:float"></xs:element>
+                    <xs:element minOccurs="0" name="secondDerivative" type="xs:float"></xs:element>
                 </xs:sequence>
             </xs:complexType>
         </xs:schema>
-        <xs:schema xmlns:ax27="http://partition.deployment.stub.controller.cloud.stratos.apache.org/xsd" xmlns:ax210="http://partition.autoscaler.stratos.apache.org/xsd" attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://policy.deployment.autoscaler.stratos.apache.org/xsd">
-            <xs:import namespace="http://partition.deployment.stub.controller.cloud.stratos.apache.org/xsd"></xs:import>
+        <xs:schema xmlns:ax27="http://partition.deployment.controller.cloud.stratos.apache.org/xsd" xmlns:ax210="http://partition.autoscaler.stratos.apache.org/xsd" attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://policy.deployment.autoscaler.stratos.apache.org/xsd">
+            <xs:import namespace="http://partition.deployment.controller.cloud.stratos.apache.org/xsd"></xs:import>
             <xs:import namespace="http://partition.autoscaler.stratos.apache.org/xsd"></xs:import>
             <xs:complexType name="DeploymentPolicy">
                 <xs:sequence>
@@ -376,8 +391,24 @@
                 </xs:sequence>
             </xs:complexType>
         </xs:schema>
-        <xs:schema xmlns:ax26="http://pojo.stub.controller.cloud.stratos.apache.org/xsd" attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://partition.deployment.stub.controller.cloud.stratos.apache.org/xsd">
-            <xs:import namespace="http://pojo.stub.controller.cloud.stratos.apache.org/xsd"></xs:import>
+        <xs:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://pojo.controller.cloud.stratos.apache.org/xsd">
+            <xs:complexType name="Properties">
+                <xs:sequence>
+                    <xs:element maxOccurs="unbounded" minOccurs="0" name="properties" nillable="true" type="ax25:Property"></xs:element>
+                    <xs:element minOccurs="0" name="propertiesSpecified" type="xs:boolean"></xs:element>
+                </xs:sequence>
+            </xs:complexType>
+            <xs:complexType name="Property">
+                <xs:sequence>
+                    <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="nameSpecified" type="xs:boolean"></xs:element>
+                    <xs:element minOccurs="0" name="value" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="valueSpecified" type="xs:boolean"></xs:element>
+                </xs:sequence>
+            </xs:complexType>
+        </xs:schema>
+        <xs:schema xmlns:ax26="http://pojo.controller.cloud.stratos.apache.org/xsd" attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://partition.deployment.controller.cloud.stratos.apache.org/xsd">
+            <xs:import namespace="http://pojo.controller.cloud.stratos.apache.org/xsd"></xs:import>
             <xs:complexType name="Partition">
                 <xs:sequence>
                     <xs:element minOccurs="0" name="id" nillable="true" type="xs:string"></xs:element>
@@ -1134,22 +1165,22 @@
     </wsdl:binding>
     <wsdl:service name="AutoScalerService">
         <wsdl:port name="AutoScalerServiceHttpSoap11Endpoint" binding="ns:AutoScalerServiceSoap11Binding">
-            <soap:address location="http://172.17.42.1:9763/services/AutoScalerService.AutoScalerServiceHttpSoap11Endpoint/"></soap:address>
+            <soap:address location="http://10.128.181.194:9766/services/AutoScalerService.AutoScalerServiceHttpSoap11Endpoint/"></soap:address>
         </wsdl:port>
         <wsdl:port name="AutoScalerServiceHttpsSoap11Endpoint" binding="ns:AutoScalerServiceSoap11Binding">
-            <soap:address location="https://172.17.42.1:9443/services/AutoScalerService.AutoScalerServiceHttpsSoap11Endpoint/"></soap:address>
+            <soap:address location="https://10.128.181.194:9446/services/AutoScalerService.AutoScalerServiceHttpsSoap11Endpoint/"></soap:address>
         </wsdl:port>
         <wsdl:port name="AutoScalerServiceHttpsSoap12Endpoint" binding="ns:AutoScalerServiceSoap12Binding">
-            <soap12:address location="https://172.17.42.1:9443/services/AutoScalerService.AutoScalerServiceHttpsSoap12Endpoint/"></soap12:address>
+            <soap12:address location="https://10.128.181.194:9446/services/AutoScalerService.AutoScalerServiceHttpsSoap12Endpoint/"></soap12:address>
         </wsdl:port>
         <wsdl:port name="AutoScalerServiceHttpSoap12Endpoint" binding="ns:AutoScalerServiceSoap12Binding">
-            <soap12:address location="http://172.17.42.1:9763/services/AutoScalerService.AutoScalerServiceHttpSoap12Endpoint/"></soap12:address>
+            <soap12:address location="http://10.128.181.194:9766/services/AutoScalerService.AutoScalerServiceHttpSoap12Endpoint/"></soap12:address>
         </wsdl:port>
         <wsdl:port name="AutoScalerServiceHttpEndpoint" binding="ns:AutoScalerServiceHttpBinding">
-            <http:address location="http://172.17.42.1:9763/services/AutoScalerService.AutoScalerServiceHttpEndpoint/"></http:address>
+            <http:address location="http://10.128.181.194:9766/services/AutoScalerService.AutoScalerServiceHttpEndpoint/"></http:address>
         </wsdl:port>
         <wsdl:port name="AutoScalerServiceHttpsEndpoint" binding="ns:AutoScalerServiceHttpBinding">
-            <http:address location="https://172.17.42.1:9443/services/AutoScalerService.AutoScalerServiceHttpsEndpoint/"></http:address>
+            <http:address location="https://10.128.181.194:9446/services/AutoScalerService.AutoScalerServiceHttpsEndpoint/"></http:address>
         </wsdl:port>
     </wsdl:service>
-</wsdl:definitions>
\ No newline at end of file
+</wsdl:definitions>
diff --git a/service-stubs/org.apache.stratos.billing.mgt.stub/pom.xml b/service-stubs/org.apache.stratos.billing.mgt.stub/pom.xml
index 2855f5e..7ac95d4 100644
--- a/service-stubs/org.apache.stratos.billing.mgt.stub/pom.xml
+++ b/service-stubs/org.apache.stratos.billing.mgt.stub/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-service-stubs-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/service-stubs/org.apache.stratos.cartridge.agent.stub/pom.xml b/service-stubs/org.apache.stratos.cartridge.agent.stub/pom.xml
index b5f3d35..2a3de47 100644
--- a/service-stubs/org.apache.stratos.cartridge.agent.stub/pom.xml
+++ b/service-stubs/org.apache.stratos.cartridge.agent.stub/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-service-stubs-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
     
     <modelVersion>4.0.0</modelVersion>
diff --git a/service-stubs/org.apache.stratos.cloud.controller.service.stub/pom.xml b/service-stubs/org.apache.stratos.cloud.controller.service.stub/pom.xml
index 8340d6d..b3fadd7 100644
--- a/service-stubs/org.apache.stratos.cloud.controller.service.stub/pom.xml
+++ b/service-stubs/org.apache.stratos.cloud.controller.service.stub/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-service-stubs-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/service-stubs/org.apache.stratos.cloud.controller.service.stub/src/main/resources/CloudControllerService.wsdl b/service-stubs/org.apache.stratos.cloud.controller.service.stub/src/main/resources/CloudControllerService.wsdl
index 27b8f37..a354310 100644
--- a/service-stubs/org.apache.stratos.cloud.controller.service.stub/src/main/resources/CloudControllerService.wsdl
+++ b/service-stubs/org.apache.stratos.cloud.controller.service.stub/src/main/resources/CloudControllerService.wsdl
@@ -2,943 +2,942 @@
     <wsdl:documentation>CloudControllerService</wsdl:documentation>
     <wsdl:types>
         <xs:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://exception.controller.cloud.stratos.apache.org/xsd">
-            <xs:complexType name="InvalidPartitionException">
+            <xs:complexType name="UnregisteredClusterException">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
+                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"></xs:element>
                 </xs:sequence>
             </xs:complexType>
-            <xs:complexType name="InvalidCartridgeTypeException">
+            <xs:complexType name="InvalidPartitionException">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
+                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"></xs:element>
                 </xs:sequence>
             </xs:complexType>
-            <xs:complexType name="UnregisteredClusterException">
+            <xs:complexType name="InvalidCartridgeDefinitionException">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
+                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"></xs:element>
                 </xs:sequence>
             </xs:complexType>
-            <xs:complexType name="InvalidMemberException">
+            <xs:complexType name="InvalidIaasProviderException">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
+                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"></xs:element>
                 </xs:sequence>
             </xs:complexType>
-            <xs:complexType name="InvalidClusterException">
+            <xs:complexType name="UnregisteredCartridgeException">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
+                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"></xs:element>
                 </xs:sequence>
             </xs:complexType>
-            <xs:complexType name="UnregisteredCartridgeException">
+            <xs:complexType name="InvalidCartridgeTypeException">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
+                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"></xs:element>
                 </xs:sequence>
             </xs:complexType>
-            <xs:complexType name="InvalidIaasProviderException">
+            <xs:complexType name="InvalidMemberException">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
+                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"></xs:element>
                 </xs:sequence>
             </xs:complexType>
-            <xs:complexType name="InvalidCartridgeDefinitionException">
+            <xs:complexType name="InvalidClusterException">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
+                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"></xs:element>
                 </xs:sequence>
             </xs:complexType>
         </xs:schema>
-        <xs:schema xmlns:ax219="http://exception.controller.cloud.stratos.apache.org/xsd" xmlns:ax223="http://partition.deployment.controller.cloud.stratos.apache.org/xsd" xmlns:ax225="http://pojo.controller.cloud.stratos.apache.org/xsd" attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://impl.controller.cloud.stratos.apache.org">
-            <xs:import namespace="http://exception.controller.cloud.stratos.apache.org/xsd"/>
-            <xs:import namespace="http://partition.deployment.controller.cloud.stratos.apache.org/xsd"/>
-            <xs:import namespace="http://pojo.controller.cloud.stratos.apache.org/xsd"/>
-            <xs:element name="CloudControllerServiceInvalidPartitionException">
+        <xs:schema xmlns:ax219="http://exception.controller.cloud.stratos.apache.org/xsd" xmlns:ax223="http://partition.deployment.controller.cloud.stratos.apache.org/xsd" xmlns:ax224="http://pojo.controller.cloud.stratos.apache.org/xsd" attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://impl.controller.cloud.stratos.apache.org">
+            <xs:import namespace="http://exception.controller.cloud.stratos.apache.org/xsd"></xs:import>
+            <xs:import namespace="http://partition.deployment.controller.cloud.stratos.apache.org/xsd"></xs:import>
+            <xs:import namespace="http://pojo.controller.cloud.stratos.apache.org/xsd"></xs:import>
+            <xs:element name="CloudControllerServiceUnregisteredClusterException">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element minOccurs="0" name="InvalidPartitionException" nillable="true" type="ax219:InvalidPartitionException"/>
+                        <xs:element minOccurs="0" name="UnregisteredClusterException" nillable="true" type="ax219:UnregisteredClusterException"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="validatePartition">
+            <xs:element name="unregisterService">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element minOccurs="0" name="partition" nillable="true" type="ax220:Partition"/>
+                        <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="validatePartitionResponse">
+            <xs:element name="CloudControllerServiceInvalidPartitionException">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element minOccurs="0" name="return" type="xs:boolean"/>
+                        <xs:element minOccurs="0" name="InvalidPartitionException" nillable="true" type="ax219:InvalidPartitionException"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="CloudControllerServiceInvalidCartridgeTypeException">
+            <xs:element name="validatePartition">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element minOccurs="0" name="InvalidCartridgeTypeException" nillable="true" type="ax219:InvalidCartridgeTypeException"/>
+                        <xs:element minOccurs="0" name="partition" nillable="true" type="ax220:Partition"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="validateDeploymentPolicy">
+            <xs:element name="validatePartitionResponse">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"/>
-                        <xs:element maxOccurs="unbounded" minOccurs="0" name="partitions" nillable="true" type="ax220:Partition"/>
+                        <xs:element minOccurs="0" name="return" type="xs:boolean"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="validateDeploymentPolicyResponse">
+            <xs:element name="CloudControllerServiceInvalidCartridgeDefinitionException">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element minOccurs="0" name="return" type="xs:boolean"/>
+                        <xs:element minOccurs="0" name="InvalidCartridgeDefinitionException" nillable="true" type="ax219:InvalidCartridgeDefinitionException"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="CloudControllerServiceUnregisteredClusterException">
+            <xs:element name="CloudControllerServiceInvalidIaasProviderException">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element minOccurs="0" name="UnregisteredClusterException" nillable="true" type="ax219:UnregisteredClusterException"/>
+                        <xs:element minOccurs="0" name="InvalidIaasProviderException" nillable="true" type="ax219:InvalidIaasProviderException"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="unregisterService">
+            <xs:element name="deployCartridgeDefinition">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"/>
+                        <xs:element minOccurs="0" name="cartridgeConfig" nillable="true" type="ax221:CartridgeConfig"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="undeployCartridgeDefinition">
+            <xs:element name="getClusterContext">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"/>
+                        <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="CloudControllerServiceInvalidMemberException">
+            <xs:element name="getClusterContextResponse">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element minOccurs="0" name="InvalidMemberException" nillable="true" type="ax219:InvalidMemberException"/>
+                        <xs:element minOccurs="0" name="return" nillable="true" type="ax221:ClusterContext"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="terminateInstance">
+            <xs:element name="CloudControllerServiceUnregisteredCartridgeException">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element minOccurs="0" name="memberId" nillable="true" type="xs:string"/>
+                        <xs:element minOccurs="0" name="UnregisteredCartridgeException" nillable="true" type="ax219:UnregisteredCartridgeException"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="CloudControllerServiceInvalidClusterException">
+            <xs:element name="getCartridgeInfo">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element minOccurs="0" name="InvalidClusterException" nillable="true" type="ax219:InvalidClusterException"/>
+                        <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="terminateAllInstances">
+            <xs:element name="getCartridgeInfoResponse">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"/>
+                        <xs:element minOccurs="0" name="return" nillable="true" type="ax221:CartridgeInfo"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="CloudControllerServiceUnregisteredCartridgeException">
+            <xs:element name="startInstance">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element minOccurs="0" name="UnregisteredCartridgeException" nillable="true" type="ax219:UnregisteredCartridgeException"/>
+                        <xs:element minOccurs="0" name="memberContext" nillable="true" type="ax221:MemberContext"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="CloudControllerServiceInvalidIaasProviderException">
+            <xs:element name="startInstanceResponse">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element minOccurs="0" name="InvalidIaasProviderException" nillable="true" type="ax219:InvalidIaasProviderException"/>
+                        <xs:element minOccurs="0" name="return" nillable="true" type="ax221:MemberContext"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="startInstance">
+            <xs:element name="CloudControllerServiceInvalidCartridgeTypeException">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element minOccurs="0" name="memberContext" nillable="true" type="ax221:MemberContext"/>
+                        <xs:element minOccurs="0" name="InvalidCartridgeTypeException" nillable="true" type="ax219:InvalidCartridgeTypeException"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="startInstanceResponse">
+            <xs:element name="validateDeploymentPolicy">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element minOccurs="0" name="return" nillable="true" type="ax221:MemberContext"/>
+                        <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"></xs:element>
+                        <xs:element maxOccurs="unbounded" minOccurs="0" name="partitions" nillable="true" type="ax220:Partition"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="registerService">
+            <xs:element name="validateDeploymentPolicyResponse">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element minOccurs="0" name="registrant" nillable="true" type="ax221:Registrant"/>
+                        <xs:element minOccurs="0" name="return" type="xs:boolean"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="registerServiceResponse">
+            <xs:element name="undeployCartridgeDefinition">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element minOccurs="0" name="return" type="xs:boolean"/>
+                        <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="getRegisteredCartridges">
+            <xs:element name="CloudControllerServiceInvalidMemberException">
                 <xs:complexType>
-                    <xs:sequence/>
+                    <xs:sequence>
+                        <xs:element minOccurs="0" name="InvalidMemberException" nillable="true" type="ax219:InvalidMemberException"></xs:element>
+                    </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="getRegisteredCartridgesResponse">
+            <xs:element name="terminateInstance">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="xs:string"/>
+                        <xs:element minOccurs="0" name="memberId" nillable="true" type="xs:string"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="getClusterContext">
+            <xs:element name="CloudControllerServiceInvalidClusterException">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"/>
+                        <xs:element minOccurs="0" name="InvalidClusterException" nillable="true" type="ax219:InvalidClusterException"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="getClusterContextResponse">
+            <xs:element name="terminateAllInstances">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element minOccurs="0" name="return" nillable="true" type="ax221:ClusterContext"/>
+                        <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="getCartridgeInfo">
+            <xs:element name="getRegisteredCartridges">
                 <xs:complexType>
-                    <xs:sequence>
-                        <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"/>
-                    </xs:sequence>
+                    <xs:sequence></xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="getCartridgeInfoResponse">
+            <xs:element name="getRegisteredCartridgesResponse">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element minOccurs="0" name="return" nillable="true" type="ax221:CartridgeInfo"/>
+                        <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="xs:string"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="CloudControllerServiceInvalidCartridgeDefinitionException">
+            <xs:element name="registerService">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element minOccurs="0" name="InvalidCartridgeDefinitionException" nillable="true" type="ax219:InvalidCartridgeDefinitionException"/>
+                        <xs:element minOccurs="0" name="registrant" nillable="true" type="ax221:Registrant"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
-            <xs:element name="deployCartridgeDefinition">
+            <xs:element name="registerServiceResponse">
                 <xs:complexType>
                     <xs:sequence>
-                        <xs:element minOccurs="0" name="cartridgeConfig" nillable="true" type="ax221:CartridgeConfig"/>
+                        <xs:element minOccurs="0" name="return" type="xs:boolean"></xs:element>
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
         </xs:schema>
-        <xs:schema xmlns:ax224="http://partition.deployment.controller.cloud.stratos.apache.org/xsd" attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://pojo.controller.cloud.stratos.apache.org/xsd">
-            <xs:import namespace="http://partition.deployment.controller.cloud.stratos.apache.org/xsd"/>
+        <xs:schema xmlns:ax225="http://partition.deployment.controller.cloud.stratos.apache.org/xsd" attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://pojo.controller.cloud.stratos.apache.org/xsd">
+            <xs:import namespace="http://partition.deployment.controller.cloud.stratos.apache.org/xsd"></xs:import>
             <xs:complexType name="Properties">
                 <xs:sequence>
-                    <xs:element maxOccurs="unbounded" minOccurs="0" name="properties" nillable="true" type="ax221:Property"/>
+                    <xs:element maxOccurs="unbounded" minOccurs="0" name="properties" nillable="true" type="ax221:Property"></xs:element>
                 </xs:sequence>
             </xs:complexType>
             <xs:complexType name="Property">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="value" nillable="true" type="xs:string"/>
+                    <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="value" nillable="true" type="xs:string"></xs:element>
                 </xs:sequence>
             </xs:complexType>
-            <xs:complexType name="MemberContext">
+            <xs:complexType name="CartridgeConfig">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="allocatedIpAddress" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="initTime" type="xs:long"/>
-                    <xs:element minOccurs="0" name="instanceId" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="lbClusterId" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="memberId" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="networkPartitionId" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="nodeId" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="partition" nillable="true" type="ax220:Partition"/>
-                    <xs:element minOccurs="0" name="privateIpAddress" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="publicIpAddress" nillable="true" type="xs:string"/>
+                    <xs:element minOccurs="0" name="baseDir" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="defaultAutoscalingPolicy" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="defaultDeploymentPolicy" nillable="true" type="xs:string"></xs:element>
+                    <xs:element maxOccurs="unbounded" minOccurs="0" name="deploymentDirs" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="description" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="displayName" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="hostName" nillable="true" type="xs:string"></xs:element>
+                    <xs:element maxOccurs="unbounded" minOccurs="0" name="iaasConfigs" nillable="true" type="ax221:IaasConfig"></xs:element>
+                    <xs:element minOccurs="0" name="lbConfig" nillable="true" type="ax221:LoadbalancerConfig"></xs:element>
+                    <xs:element minOccurs="0" name="multiTenant" type="xs:boolean"></xs:element>
+                    <xs:element minOccurs="0" name="persistence" nillable="true" type="ax221:Persistence"></xs:element>
+                    <xs:element maxOccurs="unbounded" minOccurs="0" name="portMappings" nillable="true" type="ax221:PortMapping"></xs:element>
+                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax221:Properties"></xs:element>
+                    <xs:element minOccurs="0" name="provider" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="serviceGroup" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="type" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="version" nillable="true" type="xs:string"></xs:element>
                 </xs:sequence>
             </xs:complexType>
-            <xs:complexType name="Registrant">
+            <xs:complexType name="IaasConfig">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="autoScalerPolicyName" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="deploymentPolicyName" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="hostName" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="payload" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="persistence" nillable="true" type="ax221:Persistence"/>
-                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax221:Properties"/>
-                    <xs:element minOccurs="0" name="tenantRange" nillable="true" type="xs:string"/>
+                    <xs:element minOccurs="0" name="className" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="credential" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="identity" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="imageId" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="maxInstanceLimit" type="xs:int"></xs:element>
+                    <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="networkInterfaces" nillable="true" type="ax221:NetworkInterfaces"></xs:element>
+                    <xs:element minOccurs="0" name="payload" nillable="true" type="xs:base64Binary"></xs:element>
+                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax221:Properties"></xs:element>
+                    <xs:element minOccurs="0" name="provider" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="type" nillable="true" type="xs:string"></xs:element>
                 </xs:sequence>
             </xs:complexType>
-            <xs:complexType name="Persistence">
+            <xs:complexType name="NetworkInterfaces">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="persistanceRequired" type="xs:boolean"/>
-                    <xs:element maxOccurs="unbounded" minOccurs="0" name="volumes" nillable="true" type="ax221:Volume"/>
+                    <xs:element maxOccurs="unbounded" minOccurs="0" name="networkInterfaces" nillable="true" type="ax221:NetworkInterface"></xs:element>
                 </xs:sequence>
             </xs:complexType>
-            <xs:complexType name="Volume">
+            <xs:complexType name="NetworkInterface">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="device" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="iaasType" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="id" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="mappingPath" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="removeOntermination" type="xs:boolean"/>
-                    <xs:element minOccurs="0" name="size" type="xs:int"/>
-                    <xs:element minOccurs="0" name="snapshotId" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="volumeId" nillable="true" type="xs:string"/>
+                    <xs:element minOccurs="0" name="fixedIp" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="networkUuid" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="portUuid" nillable="true" type="xs:string"></xs:element>
                 </xs:sequence>
             </xs:complexType>
-            <xs:complexType name="ClusterContext">
+            <xs:complexType name="LoadbalancerConfig">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="hostName" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="lbCluster" type="xs:boolean"/>
-                    <xs:element minOccurs="0" name="payload" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="timeoutInMillis" type="xs:long"/>
-                    <xs:element minOccurs="0" name="volumeRequired" type="xs:boolean"/>
-                    <xs:element maxOccurs="unbounded" minOccurs="0" name="volumes" nillable="true" type="ax221:Volume"/>
+                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax221:Properties"></xs:element>
+                    <xs:element minOccurs="0" name="type" nillable="true" type="xs:string"></xs:element>
                 </xs:sequence>
             </xs:complexType>
-            <xs:complexType name="CartridgeInfo">
+            <xs:complexType name="Persistence">
                 <xs:sequence>
-                    <xs:element maxOccurs="unbounded" minOccurs="0" name="appTypes" nillable="true" type="ax221:AppType"/>
-                    <xs:element minOccurs="0" name="baseDir" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="defaultAutoscalingPolicy" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="defaultDeploymentPolicy" nillable="true" type="xs:string"/>
-                    <xs:element maxOccurs="unbounded" minOccurs="0" name="deploymentDirs" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="description" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="displayName" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="hostName" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="lbConfig" nillable="true" type="ax221:LoadbalancerConfig"/>
-                    <xs:element minOccurs="0" name="multiTenant" type="xs:boolean"/>
-                    <xs:element minOccurs="0" name="persistence" nillable="true" type="ax221:Persistence"/>
-                    <xs:element maxOccurs="unbounded" minOccurs="0" name="portMappings" nillable="true" type="ax221:PortMapping"/>
-                    <xs:element maxOccurs="unbounded" minOccurs="0" name="properties" nillable="true" type="ax221:Property"/>
-                    <xs:element minOccurs="0" name="provider" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="type" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="version" nillable="true" type="xs:string"/>
+                    <xs:element minOccurs="0" name="persistanceRequired" type="xs:boolean"></xs:element>
+                    <xs:element maxOccurs="unbounded" minOccurs="0" name="volumes" nillable="true" type="ax221:Volume"></xs:element>
                 </xs:sequence>
             </xs:complexType>
-            <xs:complexType name="AppType">
+            <xs:complexType name="Volume">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="appSpecificMapping" type="xs:boolean"/>
-                    <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"/>
+                    <xs:element minOccurs="0" name="device" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="iaasType" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="id" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="mappingPath" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="removeOntermination" type="xs:boolean"></xs:element>
+                    <xs:element minOccurs="0" name="size" type="xs:int"></xs:element>
                 </xs:sequence>
             </xs:complexType>
-            <xs:complexType name="LoadbalancerConfig">
+            <xs:complexType name="PortMapping">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax221:Properties"/>
-                    <xs:element minOccurs="0" name="type" nillable="true" type="xs:string"/>
+                    <xs:element minOccurs="0" name="port" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="protocol" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="proxyPort" nillable="true" type="xs:string"></xs:element>
                 </xs:sequence>
             </xs:complexType>
-            <xs:complexType name="PortMapping">
+            <xs:complexType name="ClusterContext">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="port" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="protocol" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="proxyPort" nillable="true" type="xs:string"/>
+                    <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="hostName" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="lbCluster" type="xs:boolean"></xs:element>
+                    <xs:element minOccurs="0" name="payload" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="timeoutInMillis" type="xs:long"></xs:element>
+                    <xs:element minOccurs="0" name="volumeRequired" type="xs:boolean"></xs:element>
+                    <xs:element maxOccurs="unbounded" minOccurs="0" name="volumes" nillable="true" type="ax221:Volume"></xs:element>
                 </xs:sequence>
             </xs:complexType>
-            <xs:complexType name="CartridgeConfig">
+            <xs:complexType name="CartridgeInfo">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="baseDir" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="defaultAutoscalingPolicy" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="defaultDeploymentPolicy" nillable="true" type="xs:string"/>
-                    <xs:element maxOccurs="unbounded" minOccurs="0" name="deploymentDirs" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="description" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="displayName" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="hostName" nillable="true" type="xs:string"/>
-                    <xs:element maxOccurs="unbounded" minOccurs="0" name="iaasConfigs" nillable="true" type="ax221:IaasConfig"/>
-                    <xs:element minOccurs="0" name="lbConfig" nillable="true" type="ax221:LoadbalancerConfig"/>
-                    <xs:element minOccurs="0" name="multiTenant" type="xs:boolean"/>
-                    <xs:element minOccurs="0" name="persistence" nillable="true" type="ax221:Persistence"/>
-                    <xs:element maxOccurs="unbounded" minOccurs="0" name="portMappings" nillable="true" type="ax221:PortMapping"/>
-                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax221:Properties"/>
-                    <xs:element minOccurs="0" name="provider" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="serviceGroup" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="type" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="version" nillable="true" type="xs:string"/>
+                    <xs:element maxOccurs="unbounded" minOccurs="0" name="appTypes" nillable="true" type="ax221:AppType"></xs:element>
+                    <xs:element minOccurs="0" name="baseDir" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="defaultAutoscalingPolicy" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="defaultDeploymentPolicy" nillable="true" type="xs:string"></xs:element>
+                    <xs:element maxOccurs="unbounded" minOccurs="0" name="deploymentDirs" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="description" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="displayName" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="hostName" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="lbConfig" nillable="true" type="ax221:LoadbalancerConfig"></xs:element>
+                    <xs:element minOccurs="0" name="multiTenant" type="xs:boolean"></xs:element>
+                    <xs:element minOccurs="0" name="persistence" nillable="true" type="ax221:Persistence"></xs:element>
+                    <xs:element maxOccurs="unbounded" minOccurs="0" name="portMappings" nillable="true" type="ax221:PortMapping"></xs:element>
+                    <xs:element maxOccurs="unbounded" minOccurs="0" name="properties" nillable="true" type="ax221:Property"></xs:element>
+                    <xs:element minOccurs="0" name="provider" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="serviceGroup" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="type" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="version" nillable="true" type="xs:string"></xs:element>
                 </xs:sequence>
             </xs:complexType>
-            <xs:complexType name="IaasConfig">
+            <xs:complexType name="AppType">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="className" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="credential" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="identity" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="imageId" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="maxInstanceLimit" type="xs:int"/>
-                    <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="networkInterfaces" nillable="true" type="ax221:NetworkInterfaces"/>
-                    <xs:element minOccurs="0" name="payload" nillable="true" type="xs:base64Binary"/>
-                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax221:Properties"/>
-                    <xs:element minOccurs="0" name="provider" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="type" nillable="true" type="xs:string"/>
+                    <xs:element minOccurs="0" name="appSpecificMapping" type="xs:boolean"></xs:element>
+                    <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"></xs:element>
                 </xs:sequence>
             </xs:complexType>
-            <xs:complexType name="NetworkInterfaces">
+            <xs:complexType name="MemberContext">
                 <xs:sequence>
-                    <xs:element maxOccurs="unbounded" minOccurs="0" name="networkInterfaces" nillable="true" type="ax221:NetworkInterface"/>
+                    <xs:element minOccurs="0" name="allocatedIpAddress" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="initTime" type="xs:long"></xs:element>
+                    <xs:element minOccurs="0" name="instanceId" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="lbClusterId" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="memberId" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="networkPartitionId" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="nodeId" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="partition" nillable="true" type="ax220:Partition"></xs:element>
+                    <xs:element minOccurs="0" name="privateIpAddress" nillable="true" type="xs:string"></xs:element>
+					<xs:element minOccurs="0" name="properties" nillable="true" type="ax221:Properties"></xs:element>
+                    <xs:element minOccurs="0" name="publicIpAddress" nillable="true" type="xs:string"></xs:element>
                 </xs:sequence>
             </xs:complexType>
-            <xs:complexType name="NetworkInterface">
+            <xs:complexType name="Registrant">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="fixedIp" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="networkUuid" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="portUuid" nillable="true" type="xs:string"/>
+                    <xs:element minOccurs="0" name="autoScalerPolicyName" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="deploymentPolicyName" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="hostName" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="payload" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax221:Properties"></xs:element>
+                    <xs:element minOccurs="0" name="tenantRange" nillable="true" type="xs:string"></xs:element>
                 </xs:sequence>
             </xs:complexType>
         </xs:schema>
         <xs:schema xmlns:ax222="http://pojo.controller.cloud.stratos.apache.org/xsd" attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://partition.deployment.controller.cloud.stratos.apache.org/xsd">
-            <xs:import namespace="http://pojo.controller.cloud.stratos.apache.org/xsd"/>
+            <xs:import namespace="http://pojo.controller.cloud.stratos.apache.org/xsd"></xs:import>
             <xs:complexType name="Partition">
                 <xs:sequence>
-                    <xs:element minOccurs="0" name="id" nillable="true" type="xs:string"/>
-                    <xs:element minOccurs="0" name="partitionMax" type="xs:int"/>
-                    <xs:element minOccurs="0" name="partitionMin" type="xs:int"/>
-                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax221:Properties"/>
-                    <xs:element minOccurs="0" name="provider" nillable="true" type="xs:string"/>
+                    <xs:element minOccurs="0" name="id" nillable="true" type="xs:string"></xs:element>
+                    <xs:element minOccurs="0" name="partitionMax" type="xs:int"></xs:element>
+                    <xs:element minOccurs="0" name="partitionMin" type="xs:int"></xs:element>
+                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax221:Properties"></xs:element>
+                    <xs:element minOccurs="0" name="provider" nillable="true" type="xs:string"></xs:element>
                 </xs:sequence>
             </xs:complexType>
         </xs:schema>
     </wsdl:types>
     <wsdl:message name="validatePartitionRequest">
-        <wsdl:part name="parameters" element="ns:validatePartition"/>
+        <wsdl:part name="parameters" element="ns:validatePartition"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="validatePartitionResponse">
-        <wsdl:part name="parameters" element="ns:validatePartitionResponse"/>
+        <wsdl:part name="parameters" element="ns:validatePartitionResponse"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="CloudControllerServiceInvalidPartitionException">
-        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidPartitionException"/>
+        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidPartitionException"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="validateDeploymentPolicyRequest">
-        <wsdl:part name="parameters" element="ns:validateDeploymentPolicy"/>
+        <wsdl:part name="parameters" element="ns:validateDeploymentPolicy"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="validateDeploymentPolicyResponse">
-        <wsdl:part name="parameters" element="ns:validateDeploymentPolicyResponse"/>
+        <wsdl:part name="parameters" element="ns:validateDeploymentPolicyResponse"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="CloudControllerServiceInvalidCartridgeTypeException">
-        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidCartridgeTypeException"/>
+        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidCartridgeTypeException"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="terminateInstanceRequest">
-        <wsdl:part name="parameters" element="ns:terminateInstance"/>
+        <wsdl:part name="parameters" element="ns:terminateInstance"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="CloudControllerServiceInvalidMemberException">
-        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidMemberException"/>
+        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidMemberException"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="registerServiceRequest">
-        <wsdl:part name="parameters" element="ns:registerService"/>
+        <wsdl:part name="parameters" element="ns:registerService"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="registerServiceResponse">
-        <wsdl:part name="parameters" element="ns:registerServiceResponse"/>
+        <wsdl:part name="parameters" element="ns:registerServiceResponse"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="CloudControllerServiceUnregisteredCartridgeException">
-        <wsdl:part name="parameters" element="ns:CloudControllerServiceUnregisteredCartridgeException"/>
+        <wsdl:part name="parameters" element="ns:CloudControllerServiceUnregisteredCartridgeException"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="deployCartridgeDefinitionRequest">
-        <wsdl:part name="parameters" element="ns:deployCartridgeDefinition"/>
+        <wsdl:part name="parameters" element="ns:deployCartridgeDefinition"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="CloudControllerServiceInvalidCartridgeDefinitionException">
-        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidCartridgeDefinitionException"/>
+        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidCartridgeDefinitionException"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="CloudControllerServiceInvalidIaasProviderException">
-        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidIaasProviderException"/>
+        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidIaasProviderException"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="getCartridgeInfoRequest">
-        <wsdl:part name="parameters" element="ns:getCartridgeInfo"/>
+        <wsdl:part name="parameters" element="ns:getCartridgeInfo"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="getCartridgeInfoResponse">
-        <wsdl:part name="parameters" element="ns:getCartridgeInfoResponse"/>
+        <wsdl:part name="parameters" element="ns:getCartridgeInfoResponse"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="unregisterServiceRequest">
-        <wsdl:part name="parameters" element="ns:unregisterService"/>
+        <wsdl:part name="parameters" element="ns:unregisterService"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="CloudControllerServiceUnregisteredClusterException">
-        <wsdl:part name="parameters" element="ns:CloudControllerServiceUnregisteredClusterException"/>
+        <wsdl:part name="parameters" element="ns:CloudControllerServiceUnregisteredClusterException"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="undeployCartridgeDefinitionRequest">
-        <wsdl:part name="parameters" element="ns:undeployCartridgeDefinition"/>
+        <wsdl:part name="parameters" element="ns:undeployCartridgeDefinition"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="terminateAllInstancesRequest">
-        <wsdl:part name="parameters" element="ns:terminateAllInstances"/>
+        <wsdl:part name="parameters" element="ns:terminateAllInstances"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="CloudControllerServiceInvalidClusterException">
-        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidClusterException"/>
+        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidClusterException"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="getRegisteredCartridgesRequest">
-        <wsdl:part name="parameters" element="ns:getRegisteredCartridges"/>
+        <wsdl:part name="parameters" element="ns:getRegisteredCartridges"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="getRegisteredCartridgesResponse">
-        <wsdl:part name="parameters" element="ns:getRegisteredCartridgesResponse"/>
+        <wsdl:part name="parameters" element="ns:getRegisteredCartridgesResponse"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="startInstanceRequest">
-        <wsdl:part name="parameters" element="ns:startInstance"/>
+        <wsdl:part name="parameters" element="ns:startInstance"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="startInstanceResponse">
-        <wsdl:part name="parameters" element="ns:startInstanceResponse"/>
+        <wsdl:part name="parameters" element="ns:startInstanceResponse"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="getClusterContextRequest">
-        <wsdl:part name="parameters" element="ns:getClusterContext"/>
+        <wsdl:part name="parameters" element="ns:getClusterContext"></wsdl:part>
     </wsdl:message>
     <wsdl:message name="getClusterContextResponse">
-        <wsdl:part name="parameters" element="ns:getClusterContextResponse"/>
+        <wsdl:part name="parameters" element="ns:getClusterContextResponse"></wsdl:part>
     </wsdl:message>
     <wsdl:portType name="CloudControllerServicePortType">
         <wsdl:operation name="validatePartition">
-            <wsdl:input message="ns:validatePartitionRequest" wsaw:Action="urn:validatePartition"/>
-            <wsdl:output message="ns:validatePartitionResponse" wsaw:Action="urn:validatePartitionResponse"/>
-            <wsdl:fault message="ns:CloudControllerServiceInvalidPartitionException" name="CloudControllerServiceInvalidPartitionException" wsaw:Action="urn:validatePartitionCloudControllerServiceInvalidPartitionException"/>
+            <wsdl:input message="ns:validatePartitionRequest" wsaw:Action="urn:validatePartition"></wsdl:input>
+            <wsdl:output message="ns:validatePartitionResponse" wsaw:Action="urn:validatePartitionResponse"></wsdl:output>
+            <wsdl:fault message="ns:CloudControllerServiceInvalidPartitionException" name="CloudControllerServiceInvalidPartitionException" wsaw:Action="urn:validatePartitionCloudControllerServiceInvalidPartitionException"></wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="validateDeploymentPolicy">
-            <wsdl:input message="ns:validateDeploymentPolicyRequest" wsaw:Action="urn:validateDeploymentPolicy"/>
-            <wsdl:output message="ns:validateDeploymentPolicyResponse" wsaw:Action="urn:validateDeploymentPolicyResponse"/>
-            <wsdl:fault message="ns:CloudControllerServiceInvalidPartitionException" name="CloudControllerServiceInvalidPartitionException" wsaw:Action="urn:validateDeploymentPolicyCloudControllerServiceInvalidPartitionException"/>
-            <wsdl:fault message="ns:CloudControllerServiceInvalidCartridgeTypeException" name="CloudControllerServiceInvalidCartridgeTypeException" wsaw:Action="urn:validateDeploymentPolicyCloudControllerServiceInvalidCartridgeTypeException"/>
+            <wsdl:input message="ns:validateDeploymentPolicyRequest" wsaw:Action="urn:validateDeploymentPolicy"></wsdl:input>
+            <wsdl:output message="ns:validateDeploymentPolicyResponse" wsaw:Action="urn:validateDeploymentPolicyResponse"></wsdl:output>
+            <wsdl:fault message="ns:CloudControllerServiceInvalidPartitionException" name="CloudControllerServiceInvalidPartitionException" wsaw:Action="urn:validateDeploymentPolicyCloudControllerServiceInvalidPartitionException"></wsdl:fault>
+            <wsdl:fault message="ns:CloudControllerServiceInvalidCartridgeTypeException" name="CloudControllerServiceInvalidCartridgeTypeException" wsaw:Action="urn:validateDeploymentPolicyCloudControllerServiceInvalidCartridgeTypeException"></wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="terminateInstance">
-            <wsdl:input message="ns:terminateInstanceRequest" wsaw:Action="urn:terminateInstance"/>
-            <wsdl:fault message="ns:CloudControllerServiceInvalidMemberException" name="CloudControllerServiceInvalidMemberException" wsaw:Action="urn:terminateInstanceCloudControllerServiceInvalidMemberException"/>
-            <wsdl:fault message="ns:CloudControllerServiceInvalidCartridgeTypeException" name="CloudControllerServiceInvalidCartridgeTypeException" wsaw:Action="urn:terminateInstanceCloudControllerServiceInvalidCartridgeTypeException"/>
+            <wsdl:input message="ns:terminateInstanceRequest" wsaw:Action="urn:terminateInstance"></wsdl:input>
+            <wsdl:fault message="ns:CloudControllerServiceInvalidMemberException" name="CloudControllerServiceInvalidMemberException" wsaw:Action="urn:terminateInstanceCloudControllerServiceInvalidMemberException"></wsdl:fault>
+            <wsdl:fault message="ns:CloudControllerServiceInvalidCartridgeTypeException" name="CloudControllerServiceInvalidCartridgeTypeException" wsaw:Action="urn:terminateInstanceCloudControllerServiceInvalidCartridgeTypeException"></wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="registerService">
-            <wsdl:input message="ns:registerServiceRequest" wsaw:Action="urn:registerService"/>
-            <wsdl:output message="ns:registerServiceResponse" wsaw:Action="urn:registerServiceResponse"/>
-            <wsdl:fault message="ns:CloudControllerServiceUnregisteredCartridgeException" name="CloudControllerServiceUnregisteredCartridgeException" wsaw:Action="urn:registerServiceCloudControllerServiceUnregisteredCartridgeException"/>
+            <wsdl:input message="ns:registerServiceRequest" wsaw:Action="urn:registerService"></wsdl:input>
+            <wsdl:output message="ns:registerServiceResponse" wsaw:Action="urn:registerServiceResponse"></wsdl:output>
+            <wsdl:fault message="ns:CloudControllerServiceUnregisteredCartridgeException" name="CloudControllerServiceUnregisteredCartridgeException" wsaw:Action="urn:registerServiceCloudControllerServiceUnregisteredCartridgeException"></wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="deployCartridgeDefinition">
-            <wsdl:input message="ns:deployCartridgeDefinitionRequest" wsaw:Action="urn:deployCartridgeDefinition"/>
-            <wsdl:fault message="ns:CloudControllerServiceInvalidCartridgeDefinitionException" name="CloudControllerServiceInvalidCartridgeDefinitionException" wsaw:Action="urn:deployCartridgeDefinitionCloudControllerServiceInvalidCartridgeDefinitionException"/>
-            <wsdl:fault message="ns:CloudControllerServiceInvalidIaasProviderException" name="CloudControllerServiceInvalidIaasProviderException" wsaw:Action="urn:deployCartridgeDefinitionCloudControllerServiceInvalidIaasProviderException"/>
+            <wsdl:input message="ns:deployCartridgeDefinitionRequest" wsaw:Action="urn:deployCartridgeDefinition"></wsdl:input>
+            <wsdl:fault message="ns:CloudControllerServiceInvalidCartridgeDefinitionException" name="CloudControllerServiceInvalidCartridgeDefinitionException" wsaw:Action="urn:deployCartridgeDefinitionCloudControllerServiceInvalidCartridgeDefinitionException"></wsdl:fault>
+            <wsdl:fault message="ns:CloudControllerServiceInvalidIaasProviderException" name="CloudControllerServiceInvalidIaasProviderException" wsaw:Action="urn:deployCartridgeDefinitionCloudControllerServiceInvalidIaasProviderException"></wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="getCartridgeInfo">
-            <wsdl:input message="ns:getCartridgeInfoRequest" wsaw:Action="urn:getCartridgeInfo"/>
-            <wsdl:output message="ns:getCartridgeInfoResponse" wsaw:Action="urn:getCartridgeInfoResponse"/>
-            <wsdl:fault message="ns:CloudControllerServiceUnregisteredCartridgeException" name="CloudControllerServiceUnregisteredCartridgeException" wsaw:Action="urn:getCartridgeInfoCloudControllerServiceUnregisteredCartridgeException"/>
+            <wsdl:input message="ns:getCartridgeInfoRequest" wsaw:Action="urn:getCartridgeInfo"></wsdl:input>
+            <wsdl:output message="ns:getCartridgeInfoResponse" wsaw:Action="urn:getCartridgeInfoResponse"></wsdl:output>
+            <wsdl:fault message="ns:CloudControllerServiceUnregisteredCartridgeException" name="CloudControllerServiceUnregisteredCartridgeException" wsaw:Action="urn:getCartridgeInfoCloudControllerServiceUnregisteredCartridgeException"></wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="unregisterService">
-            <wsdl:input message="ns:unregisterServiceRequest" wsaw:Action="urn:unregisterService"/>
-            <wsdl:fault message="ns:CloudControllerServiceUnregisteredClusterException" name="CloudControllerServiceUnregisteredClusterException" wsaw:Action="urn:unregisterServiceCloudControllerServiceUnregisteredClusterException"/>
+            <wsdl:input message="ns:unregisterServiceRequest" wsaw:Action="urn:unregisterService"></wsdl:input>
+            <wsdl:fault message="ns:CloudControllerServiceUnregisteredClusterException" name="CloudControllerServiceUnregisteredClusterException" wsaw:Action="urn:unregisterServiceCloudControllerServiceUnregisteredClusterException"></wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="undeployCartridgeDefinition">
-            <wsdl:input message="ns:undeployCartridgeDefinitionRequest" wsaw:Action="urn:undeployCartridgeDefinition"/>
-            <wsdl:fault message="ns:CloudControllerServiceInvalidCartridgeTypeException" name="CloudControllerServiceInvalidCartridgeTypeException" wsaw:Action="urn:undeployCartridgeDefinitionCloudControllerServiceInvalidCartridgeTypeException"/>
+            <wsdl:input message="ns:undeployCartridgeDefinitionRequest" wsaw:Action="urn:undeployCartridgeDefinition"></wsdl:input>
+            <wsdl:fault message="ns:CloudControllerServiceInvalidCartridgeTypeException" name="CloudControllerServiceInvalidCartridgeTypeException" wsaw:Action="urn:undeployCartridgeDefinitionCloudControllerServiceInvalidCartridgeTypeException"></wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="terminateAllInstances">
-            <wsdl:input message="ns:terminateAllInstancesRequest" wsaw:Action="urn:terminateAllInstances"/>
-            <wsdl:fault message="ns:CloudControllerServiceInvalidClusterException" name="CloudControllerServiceInvalidClusterException" wsaw:Action="urn:terminateAllInstancesCloudControllerServiceInvalidClusterException"/>
+            <wsdl:input message="ns:terminateAllInstancesRequest" wsaw:Action="urn:terminateAllInstances"></wsdl:input>
+            <wsdl:fault message="ns:CloudControllerServiceInvalidClusterException" name="CloudControllerServiceInvalidClusterException" wsaw:Action="urn:terminateAllInstancesCloudControllerServiceInvalidClusterException"></wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="getRegisteredCartridges">
-            <wsdl:input message="ns:getRegisteredCartridgesRequest" wsaw:Action="urn:getRegisteredCartridges"/>
-            <wsdl:output message="ns:getRegisteredCartridgesResponse" wsaw:Action="urn:getRegisteredCartridgesResponse"/>
+            <wsdl:input message="ns:getRegisteredCartridgesRequest" wsaw:Action="urn:getRegisteredCartridges"></wsdl:input>
+            <wsdl:output message="ns:getRegisteredCartridgesResponse" wsaw:Action="urn:getRegisteredCartridgesResponse"></wsdl:output>
         </wsdl:operation>
         <wsdl:operation name="startInstance">
-            <wsdl:input message="ns:startInstanceRequest" wsaw:Action="urn:startInstance"/>
-            <wsdl:output message="ns:startInstanceResponse" wsaw:Action="urn:startInstanceResponse"/>
-            <wsdl:fault message="ns:CloudControllerServiceUnregisteredCartridgeException" name="CloudControllerServiceUnregisteredCartridgeException" wsaw:Action="urn:startInstanceCloudControllerServiceUnregisteredCartridgeException"/>
-            <wsdl:fault message="ns:CloudControllerServiceInvalidIaasProviderException" name="CloudControllerServiceInvalidIaasProviderException" wsaw:Action="urn:startInstanceCloudControllerServiceInvalidIaasProviderException"/>
+            <wsdl:input message="ns:startInstanceRequest" wsaw:Action="urn:startInstance"></wsdl:input>
+            <wsdl:output message="ns:startInstanceResponse" wsaw:Action="urn:startInstanceResponse"></wsdl:output>
+            <wsdl:fault message="ns:CloudControllerServiceUnregisteredCartridgeException" name="CloudControllerServiceUnregisteredCartridgeException" wsaw:Action="urn:startInstanceCloudControllerServiceUnregisteredCartridgeException"></wsdl:fault>
+            <wsdl:fault message="ns:CloudControllerServiceInvalidIaasProviderException" name="CloudControllerServiceInvalidIaasProviderException" wsaw:Action="urn:startInstanceCloudControllerServiceInvalidIaasProviderException"></wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="getClusterContext">
-            <wsdl:input message="ns:getClusterContextRequest" wsaw:Action="urn:getClusterContext"/>
-            <wsdl:output message="ns:getClusterContextResponse" wsaw:Action="urn:getClusterContextResponse"/>
+            <wsdl:input message="ns:getClusterContextRequest" wsaw:Action="urn:getClusterContext"></wsdl:input>
+            <wsdl:output message="ns:getClusterContextResponse" wsaw:Action="urn:getClusterContextResponse"></wsdl:output>
         </wsdl:operation>
     </wsdl:portType>
     <wsdl:binding name="CloudControllerServiceSoap11Binding" type="ns:CloudControllerServicePortType">
-        <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document"/>
+        <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document"></soap:binding>
         <wsdl:operation name="validatePartition">
-            <soap:operation soapAction="urn:validatePartition" style="document"/>
+            <soap:operation soapAction="urn:validatePartition" style="document"></soap:operation>
             <wsdl:input>
-                <soap:body use="literal"/>
+                <soap:body use="literal"></soap:body>
             </wsdl:input>
             <wsdl:output>
-                <soap:body use="literal"/>
+                <soap:body use="literal"></soap:body>
             </wsdl:output>
             <wsdl:fault name="CloudControllerServiceInvalidPartitionException">
-                <soap:fault use="literal" name="CloudControllerServiceInvalidPartitionException"/>
+                <soap:fault use="literal" name="CloudControllerServiceInvalidPartitionException"></soap:fault>
             </wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="validateDeploymentPolicy">
-            <soap:operation soapAction="urn:validateDeploymentPolicy" style="document"/>
+            <soap:operation soapAction="urn:validateDeploymentPolicy" style="document"></soap:operation>
             <wsdl:input>
-                <soap:body use="literal"/>
+                <soap:body use="literal"></soap:body>
             </wsdl:input>
             <wsdl:output>
-                <soap:body use="literal"/>
+                <soap:body use="literal"></soap:body>
             </wsdl:output>
             <wsdl:fault name="CloudControllerServiceInvalidPartitionException">
-                <soap:fault use="literal" name="CloudControllerServiceInvalidPartitionException"/>
+                <soap:fault use="literal" name="CloudControllerServiceInvalidPartitionException"></soap:fault>
             </wsdl:fault>
             <wsdl:fault name="CloudControllerServiceInvalidCartridgeTypeException">
-                <soap:fault use="literal" name="CloudControllerServiceInvalidCartridgeTypeException"/>
-            </wsdl:fault>
-        </wsdl:operation>
-        <wsdl:operation name="registerService">
-            <soap:operation soapAction="urn:registerService" style="document"/>
-            <wsdl:input>
-                <soap:body use="literal"/>
-            </wsdl:input>
-            <wsdl:output>
-                <soap:body use="literal"/>
-            </wsdl:output>
-            <wsdl:fault name="CloudControllerServiceUnregisteredCartridgeException">
-                <soap:fault use="literal" name="CloudControllerServiceUnregisteredCartridgeException"/>
+                <soap:fault use="literal" name="CloudControllerServiceInvalidCartridgeTypeException"></soap:fault>
             </wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="terminateInstance">
-            <soap:operation soapAction="urn:terminateInstance" style="document"/>
+            <soap:operation soapAction="urn:terminateInstance" style="document"></soap:operation>
             <wsdl:input>
-                <soap:body use="literal"/>
+                <soap:body use="literal"></soap:body>
             </wsdl:input>
             <wsdl:fault name="CloudControllerServiceInvalidMemberException">
-                <soap:fault use="literal" name="CloudControllerServiceInvalidMemberException"/>
+                <soap:fault use="literal" name="CloudControllerServiceInvalidMemberException"></soap:fault>
             </wsdl:fault>
             <wsdl:fault name="CloudControllerServiceInvalidCartridgeTypeException">
-                <soap:fault use="literal" name="CloudControllerServiceInvalidCartridgeTypeException"/>
+                <soap:fault use="literal" name="CloudControllerServiceInvalidCartridgeTypeException"></soap:fault>
+            </wsdl:fault>
+        </wsdl:operation>
+        <wsdl:operation name="registerService">
+            <soap:operation soapAction="urn:registerService" style="document"></soap:operation>
+            <wsdl:input>
+                <soap:body use="literal"></soap:body>
+            </wsdl:input>
+            <wsdl:output>
+                <soap:body use="literal"></soap:body>
+            </wsdl:output>
+            <wsdl:fault name="CloudControllerServiceUnregisteredCartridgeException">
+                <soap:fault use="literal" name="CloudControllerServiceUnregisteredCartridgeException"></soap:fault>
             </wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="deployCartridgeDefinition">
-            <soap:operation soapAction="urn:deployCartridgeDefinition" style="document"/>
+            <soap:operation soapAction="urn:deployCartridgeDefinition" style="document"></soap:operation>
             <wsdl:input>
-                <soap:body use="literal"/>
+                <soap:body use="literal"></soap:body>
             </wsdl:input>
             <wsdl:fault name="CloudControllerServiceInvalidCartridgeDefinitionException">
-                <soap:fault use="literal" name="CloudControllerServiceInvalidCartridgeDefinitionException"/>
+                <soap:fault use="literal" name="CloudControllerServiceInvalidCartridgeDefinitionException"></soap:fault>
             </wsdl:fault>
             <wsdl:fault name="CloudControllerServiceInvalidIaasProviderException">
-                <soap:fault use="literal" name="CloudControllerServiceInvalidIaasProviderException"/>
+                <soap:fault use="literal" name="CloudControllerServiceInvalidIaasProviderException"></soap:fault>
             </wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="getCartridgeInfo">
-            <soap:operation soapAction="urn:getCartridgeInfo" style="document"/>
+            <soap:operation soapAction="urn:getCartridgeInfo" style="document"></soap:operation>
             <wsdl:input>
-                <soap:body use="literal"/>
+                <soap:body use="literal"></soap:body>
             </wsdl:input>
             <wsdl:output>
-                <soap:body use="literal"/>
+                <soap:body use="literal"></soap:body>
             </wsdl:output>
             <wsdl:fault name="CloudControllerServiceUnregisteredCartridgeException">
-                <soap:fault use="literal" name="CloudControllerServiceUnregisteredCartridgeException"/>
+                <soap:fault use="literal" name="CloudControllerServiceUnregisteredCartridgeException"></soap:fault>
             </wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="unregisterService">
-            <soap:operation soapAction="urn:unregisterService" style="document"/>
+            <soap:operation soapAction="urn:unregisterService" style="document"></soap:operation>
             <wsdl:input>
-                <soap:body use="literal"/>
+                <soap:body use="literal"></soap:body>
             </wsdl:input>
             <wsdl:fault name="CloudControllerServiceUnregisteredClusterException">
-                <soap:fault use="literal" name="CloudControllerServiceUnregisteredClusterException"/>
+                <soap:fault use="literal" name="CloudControllerServiceUnregisteredClusterException"></soap:fault>
             </wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="undeployCartridgeDefinition">
-            <soap:operation soapAction="urn:undeployCartridgeDefinition" style="document"/>
+            <soap:operation soapAction="urn:undeployCartridgeDefinition" style="document"></soap:operation>
             <wsdl:input>
-                <soap:body use="literal"/>
+                <soap:body use="literal"></soap:body>
             </wsdl:input>
             <wsdl:fault name="CloudControllerServiceInvalidCartridgeTypeException">
-                <soap:fault use="literal" name="CloudControllerServiceInvalidCartridgeTypeException"/>
+                <soap:fault use="literal" name="CloudControllerServiceInvalidCartridgeTypeException"></soap:fault>
             </wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="terminateAllInstances">
-            <soap:operation soapAction="urn:terminateAllInstances" style="document"/>
+            <soap:operation soapAction="urn:terminateAllInstances" style="document"></soap:operation>
             <wsdl:input>
-                <soap:body use="literal"/>
+                <soap:body use="literal"></soap:body>
             </wsdl:input>
             <wsdl:fault name="CloudControllerServiceInvalidClusterException">
-                <soap:fault use="literal" name="CloudControllerServiceInvalidClusterException"/>
+                <soap:fault use="literal" name="CloudControllerServiceInvalidClusterException"></soap:fault>
             </wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="getRegisteredCartridges">
-            <soap:operation soapAction="urn:getRegisteredCartridges" style="document"/>
+            <soap:operation soapAction="urn:getRegisteredCartridges" style="document"></soap:operation>
             <wsdl:input>
-                <soap:body use="literal"/>
+                <soap:body use="literal"></soap:body>
             </wsdl:input>
             <wsdl:output>
-                <soap:body use="literal"/>
+                <soap:body use="literal"></soap:body>
             </wsdl:output>
         </wsdl:operation>
         <wsdl:operation name="startInstance">
-            <soap:operation soapAction="urn:startInstance" style="document"/>
+            <soap:operation soapAction="urn:startInstance" style="document"></soap:operation>
             <wsdl:input>
-                <soap:body use="literal"/>
+                <soap:body use="literal"></soap:body>
             </wsdl:input>
             <wsdl:output>
-                <soap:body use="literal"/>
+                <soap:body use="literal"></soap:body>
             </wsdl:output>
             <wsdl:fault name="CloudControllerServiceInvalidIaasProviderException">
-                <soap:fault use="literal" name="CloudControllerServiceInvalidIaasProviderException"/>
+                <soap:fault use="literal" name="CloudControllerServiceInvalidIaasProviderException"></soap:fault>
             </wsdl:fault>
             <wsdl:fault name="CloudControllerServiceUnregisteredCartridgeException">
-                <soap:fault use="literal" name="CloudControllerServiceUnregisteredCartridgeException"/>
+                <soap:fault use="literal" name="CloudControllerServiceUnregisteredCartridgeException"></soap:fault>
             </wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="getClusterContext">
-            <soap:operation soapAction="urn:getClusterContext" style="document"/>
+            <soap:operation soapAction="urn:getClusterContext" style="document"></soap:operation>
             <wsdl:input>
-                <soap:body use="literal"/>
+                <soap:body use="literal"></soap:body>
             </wsdl:input>
             <wsdl:output>
-                <soap:body use="literal"/>
+                <soap:body use="literal"></soap:body>
             </wsdl:output>
         </wsdl:operation>
     </wsdl:binding>
     <wsdl:binding name="CloudControllerServiceSoap12Binding" type="ns:CloudControllerServicePortType">
-        <soap12:binding transport="http://schemas.xmlsoap.org/soap/http" style="document"/>
+        <soap12:binding transport="http://schemas.xmlsoap.org/soap/http" style="document"></soap12:binding>
         <wsdl:operation name="validatePartition">
-            <soap12:operation soapAction="urn:validatePartition" style="document"/>
+            <soap12:operation soapAction="urn:validatePartition" style="document"></soap12:operation>
             <wsdl:input>
-                <soap12:body use="literal"/>
+                <soap12:body use="literal"></soap12:body>
             </wsdl:input>
             <wsdl:output>
-                <soap12:body use="literal"/>
+                <soap12:body use="literal"></soap12:body>
             </wsdl:output>
             <wsdl:fault name="CloudControllerServiceInvalidPartitionException">
-                <soap12:fault use="literal" name="CloudControllerServiceInvalidPartitionException"/>
+                <soap12:fault use="literal" name="CloudControllerServiceInvalidPartitionException"></soap12:fault>
             </wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="validateDeploymentPolicy">
-            <soap12:operation soapAction="urn:validateDeploymentPolicy" style="document"/>
+            <soap12:operation soapAction="urn:validateDeploymentPolicy" style="document"></soap12:operation>
             <wsdl:input>
-                <soap12:body use="literal"/>
+                <soap12:body use="literal"></soap12:body>
             </wsdl:input>
             <wsdl:output>
-                <soap12:body use="literal"/>
+                <soap12:body use="literal"></soap12:body>
             </wsdl:output>
             <wsdl:fault name="CloudControllerServiceInvalidPartitionException">
-                <soap12:fault use="literal" name="CloudControllerServiceInvalidPartitionException"/>
+                <soap12:fault use="literal" name="CloudControllerServiceInvalidPartitionException"></soap12:fault>
             </wsdl:fault>
             <wsdl:fault name="CloudControllerServiceInvalidCartridgeTypeException">
-                <soap12:fault use="literal" name="CloudControllerServiceInvalidCartridgeTypeException"/>
-            </wsdl:fault>
-        </wsdl:operation>
-        <wsdl:operation name="registerService">
-            <soap12:operation soapAction="urn:registerService" style="document"/>
-            <wsdl:input>
-                <soap12:body use="literal"/>
-            </wsdl:input>
-            <wsdl:output>
-                <soap12:body use="literal"/>
-            </wsdl:output>
-            <wsdl:fault name="CloudControllerServiceUnregisteredCartridgeException">
-                <soap12:fault use="literal" name="CloudControllerServiceUnregisteredCartridgeException"/>
+                <soap12:fault use="literal" name="CloudControllerServiceInvalidCartridgeTypeException"></soap12:fault>
             </wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="terminateInstance">
-            <soap12:operation soapAction="urn:terminateInstance" style="document"/>
+            <soap12:operation soapAction="urn:terminateInstance" style="document"></soap12:operation>
             <wsdl:input>
-                <soap12:body use="literal"/>
+                <soap12:body use="literal"></soap12:body>
             </wsdl:input>
             <wsdl:fault name="CloudControllerServiceInvalidMemberException">
-                <soap12:fault use="literal" name="CloudControllerServiceInvalidMemberException"/>
+                <soap12:fault use="literal" name="CloudControllerServiceInvalidMemberException"></soap12:fault>
             </wsdl:fault>
             <wsdl:fault name="CloudControllerServiceInvalidCartridgeTypeException">
-                <soap12:fault use="literal" name="CloudControllerServiceInvalidCartridgeTypeException"/>
+                <soap12:fault use="literal" name="CloudControllerServiceInvalidCartridgeTypeException"></soap12:fault>
+            </wsdl:fault>
+        </wsdl:operation>
+        <wsdl:operation name="registerService">
+            <soap12:operation soapAction="urn:registerService" style="document"></soap12:operation>
+            <wsdl:input>
+                <soap12:body use="literal"></soap12:body>
+            </wsdl:input>
+            <wsdl:output>
+                <soap12:body use="literal"></soap12:body>
+            </wsdl:output>
+            <wsdl:fault name="CloudControllerServiceUnregisteredCartridgeException">
+                <soap12:fault use="literal" name="CloudControllerServiceUnregisteredCartridgeException"></soap12:fault>
             </wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="deployCartridgeDefinition">
-            <soap12:operation soapAction="urn:deployCartridgeDefinition" style="document"/>
+            <soap12:operation soapAction="urn:deployCartridgeDefinition" style="document"></soap12:operation>
             <wsdl:input>
-                <soap12:body use="literal"/>
+                <soap12:body use="literal"></soap12:body>
             </wsdl:input>
             <wsdl:fault name="CloudControllerServiceInvalidCartridgeDefinitionException">
-                <soap12:fault use="literal" name="CloudControllerServiceInvalidCartridgeDefinitionException"/>
+                <soap12:fault use="literal" name="CloudControllerServiceInvalidCartridgeDefinitionException"></soap12:fault>
             </wsdl:fault>
             <wsdl:fault name="CloudControllerServiceInvalidIaasProviderException">
-                <soap12:fault use="literal" name="CloudControllerServiceInvalidIaasProviderException"/>
+                <soap12:fault use="literal" name="CloudControllerServiceInvalidIaasProviderException"></soap12:fault>
             </wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="getCartridgeInfo">
-            <soap12:operation soapAction="urn:getCartridgeInfo" style="document"/>
+            <soap12:operation soapAction="urn:getCartridgeInfo" style="document"></soap12:operation>
             <wsdl:input>
-                <soap12:body use="literal"/>
+                <soap12:body use="literal"></soap12:body>
             </wsdl:input>
             <wsdl:output>
-                <soap12:body use="literal"/>
+                <soap12:body use="literal"></soap12:body>
             </wsdl:output>
             <wsdl:fault name="CloudControllerServiceUnregisteredCartridgeException">
-                <soap12:fault use="literal" name="CloudControllerServiceUnregisteredCartridgeException"/>
+                <soap12:fault use="literal" name="CloudControllerServiceUnregisteredCartridgeException"></soap12:fault>
             </wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="unregisterService">
-            <soap12:operation soapAction="urn:unregisterService" style="document"/>
+            <soap12:operation soapAction="urn:unregisterService" style="document"></soap12:operation>
             <wsdl:input>
-                <soap12:body use="literal"/>
+                <soap12:body use="literal"></soap12:body>
             </wsdl:input>
             <wsdl:fault name="CloudControllerServiceUnregisteredClusterException">
-                <soap12:fault use="literal" name="CloudControllerServiceUnregisteredClusterException"/>
+                <soap12:fault use="literal" name="CloudControllerServiceUnregisteredClusterException"></soap12:fault>
             </wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="undeployCartridgeDefinition">
-            <soap12:operation soapAction="urn:undeployCartridgeDefinition" style="document"/>
+            <soap12:operation soapAction="urn:undeployCartridgeDefinition" style="document"></soap12:operation>
             <wsdl:input>
-                <soap12:body use="literal"/>
+                <soap12:body use="literal"></soap12:body>
             </wsdl:input>
             <wsdl:fault name="CloudControllerServiceInvalidCartridgeTypeException">
-                <soap12:fault use="literal" name="CloudControllerServiceInvalidCartridgeTypeException"/>
+                <soap12:fault use="literal" name="CloudControllerServiceInvalidCartridgeTypeException"></soap12:fault>
             </wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="terminateAllInstances">
-            <soap12:operation soapAction="urn:terminateAllInstances" style="document"/>
+            <soap12:operation soapAction="urn:terminateAllInstances" style="document"></soap12:operation>
             <wsdl:input>
-                <soap12:body use="literal"/>
+                <soap12:body use="literal"></soap12:body>
             </wsdl:input>
             <wsdl:fault name="CloudControllerServiceInvalidClusterException">
-                <soap12:fault use="literal" name="CloudControllerServiceInvalidClusterException"/>
+                <soap12:fault use="literal" name="CloudControllerServiceInvalidClusterException"></soap12:fault>
             </wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="getRegisteredCartridges">
-            <soap12:operation soapAction="urn:getRegisteredCartridges" style="document"/>
+            <soap12:operation soapAction="urn:getRegisteredCartridges" style="document"></soap12:operation>
             <wsdl:input>
-                <soap12:body use="literal"/>
+                <soap12:body use="literal"></soap12:body>
             </wsdl:input>
             <wsdl:output>
-                <soap12:body use="literal"/>
+                <soap12:body use="literal"></soap12:body>
             </wsdl:output>
         </wsdl:operation>
         <wsdl:operation name="startInstance">
-            <soap12:operation soapAction="urn:startInstance" style="document"/>
+            <soap12:operation soapAction="urn:startInstance" style="document"></soap12:operation>
             <wsdl:input>
-                <soap12:body use="literal"/>
+                <soap12:body use="literal"></soap12:body>
             </wsdl:input>
             <wsdl:output>
-                <soap12:body use="literal"/>
+                <soap12:body use="literal"></soap12:body>
             </wsdl:output>
             <wsdl:fault name="CloudControllerServiceInvalidIaasProviderException">
-                <soap12:fault use="literal" name="CloudControllerServiceInvalidIaasProviderException"/>
+                <soap12:fault use="literal" name="CloudControllerServiceInvalidIaasProviderException"></soap12:fault>
             </wsdl:fault>
             <wsdl:fault name="CloudControllerServiceUnregisteredCartridgeException">
-                <soap12:fault use="literal" name="CloudControllerServiceUnregisteredCartridgeException"/>
+                <soap12:fault use="literal" name="CloudControllerServiceUnregisteredCartridgeException"></soap12:fault>
             </wsdl:fault>
         </wsdl:operation>
         <wsdl:operation name="getClusterContext">
-            <soap12:operation soapAction="urn:getClusterContext" style="document"/>
+            <soap12:operation soapAction="urn:getClusterContext" style="document"></soap12:operation>
             <wsdl:input>
-                <soap12:body use="literal"/>
+                <soap12:body use="literal"></soap12:body>
             </wsdl:input>
             <wsdl:output>
-                <soap12:body use="literal"/>
+                <soap12:body use="literal"></soap12:body>
             </wsdl:output>
         </wsdl:operation>
     </wsdl:binding>
     <wsdl:binding name="CloudControllerServiceHttpBinding" type="ns:CloudControllerServicePortType">
-        <http:binding verb="POST"/>
+        <http:binding verb="POST"></http:binding>
         <wsdl:operation name="validatePartition">
-            <http:operation location="validatePartition"/>
+            <http:operation location="validatePartition"></http:operation>
             <wsdl:input>
-                <mime:content type="text/xml" part="parameters"/>
+                <mime:content type="text/xml" part="parameters"></mime:content>
             </wsdl:input>
             <wsdl:output>
-                <mime:content type="text/xml" part="parameters"/>
+                <mime:content type="text/xml" part="parameters"></mime:content>
             </wsdl:output>
         </wsdl:operation>
         <wsdl:operation name="validateDeploymentPolicy">
-            <http:operation location="validateDeploymentPolicy"/>
+            <http:operation location="validateDeploymentPolicy"></http:operation>
             <wsdl:input>
-                <mime:content type="text/xml" part="parameters"/>
+                <mime:content type="text/xml" part="parameters"></mime:content>
             </wsdl:input>
             <wsdl:output>
-                <mime:content type="text/xml" part="parameters"/>
+                <mime:content type="text/xml" part="parameters"></mime:content>
             </wsdl:output>
         </wsdl:operation>
-        <wsdl:operation name="registerService">
-            <http:operation location="registerService"/>
+        <wsdl:operation name="terminateInstance">
+            <http:operation location="terminateInstance"></http:operation>
             <wsdl:input>
-                <mime:content type="text/xml" part="parameters"/>
+                <mime:content type="text/xml" part="parameters"></mime:content>
             </wsdl:input>
-            <wsdl:output>
-                <mime:content type="text/xml" part="parameters"/>
-            </wsdl:output>
         </wsdl:operation>
-        <wsdl:operation name="terminateInstance">
-            <http:operation location="terminateInstance"/>
+        <wsdl:operation name="registerService">
+            <http:operation location="registerService"></http:operation>
             <wsdl:input>
-                <mime:content type="text/xml" part="parameters"/>
+                <mime:content type="text/xml" part="parameters"></mime:content>
             </wsdl:input>
+            <wsdl:output>
+                <mime:content type="text/xml" part="parameters"></mime:content>
+            </wsdl:output>
         </wsdl:operation>
         <wsdl:operation name="deployCartridgeDefinition">
-            <http:operation location="deployCartridgeDefinition"/>
+            <http:operation location="deployCartridgeDefinition"></http:operation>
             <wsdl:input>
-                <mime:content type="text/xml" part="parameters"/>
+                <mime:content type="text/xml" part="parameters"></mime:content>
             </wsdl:input>
         </wsdl:operation>
         <wsdl:operation name="getCartridgeInfo">
-            <http:operation location="getCartridgeInfo"/>
+            <http:operation location="getCartridgeInfo"></http:operation>
             <wsdl:input>
-                <mime:content type="text/xml" part="parameters"/>
+                <mime:content type="text/xml" part="parameters"></mime:content>
             </wsdl:input>
             <wsdl:output>
-                <mime:content type="text/xml" part="parameters"/>
+                <mime:content type="text/xml" part="parameters"></mime:content>
             </wsdl:output>
         </wsdl:operation>
         <wsdl:operation name="unregisterService">
-            <http:operation location="unregisterService"/>
+            <http:operation location="unregisterService"></http:operation>
             <wsdl:input>
-                <mime:content type="text/xml" part="parameters"/>
+                <mime:content type="text/xml" part="parameters"></mime:content>
             </wsdl:input>
         </wsdl:operation>
         <wsdl:operation name="undeployCartridgeDefinition">
-            <http:operation location="undeployCartridgeDefinition"/>
+            <http:operation location="undeployCartridgeDefinition"></http:operation>
             <wsdl:input>
-                <mime:content type="text/xml" part="parameters"/>
+                <mime:content type="text/xml" part="parameters"></mime:content>
             </wsdl:input>
         </wsdl:operation>
         <wsdl:operation name="terminateAllInstances">
-            <http:operation location="terminateAllInstances"/>
+            <http:operation location="terminateAllInstances"></http:operation>
             <wsdl:input>
-                <mime:content type="text/xml" part="parameters"/>
+                <mime:content type="text/xml" part="parameters"></mime:content>
             </wsdl:input>
         </wsdl:operation>
         <wsdl:operation name="getRegisteredCartridges">
-            <http:operation location="getRegisteredCartridges"/>
+            <http:operation location="getRegisteredCartridges"></http:operation>
             <wsdl:input>
-                <mime:content type="text/xml" part="parameters"/>
+                <mime:content type="text/xml" part="parameters"></mime:content>
             </wsdl:input>
             <wsdl:output>
-                <mime:content type="text/xml" part="parameters"/>
+                <mime:content type="text/xml" part="parameters"></mime:content>
             </wsdl:output>
         </wsdl:operation>
         <wsdl:operation name="startInstance">
-            <http:operation location="startInstance"/>
+            <http:operation location="startInstance"></http:operation>
             <wsdl:input>
-                <mime:content type="text/xml" part="parameters"/>
+                <mime:content type="text/xml" part="parameters"></mime:content>
             </wsdl:input>
             <wsdl:output>
-                <mime:content type="text/xml" part="parameters"/>
+                <mime:content type="text/xml" part="parameters"></mime:content>
             </wsdl:output>
         </wsdl:operation>
         <wsdl:operation name="getClusterContext">
-            <http:operation location="getClusterContext"/>
+            <http:operation location="getClusterContext"></http:operation>
             <wsdl:input>
-                <mime:content type="text/xml" part="parameters"/>
+                <mime:content type="text/xml" part="parameters"></mime:content>
             </wsdl:input>
             <wsdl:output>
-                <mime:content type="text/xml" part="parameters"/>
+                <mime:content type="text/xml" part="parameters"></mime:content>
             </wsdl:output>
         </wsdl:operation>
     </wsdl:binding>
     <wsdl:service name="CloudControllerService">
         <wsdl:port name="CloudControllerServiceHttpSoap11Endpoint" binding="ns:CloudControllerServiceSoap11Binding">
-            <soap:address location="http://10.100.0.38:9763/services/CloudControllerService.CloudControllerServiceHttpSoap11Endpoint/"/>
+            <soap:address location="http://10.146.138.213:9763/services/CloudControllerService.CloudControllerServiceHttpSoap11Endpoint/"></soap:address>
         </wsdl:port>
         <wsdl:port name="CloudControllerServiceHttpsSoap11Endpoint" binding="ns:CloudControllerServiceSoap11Binding">
-            <soap:address location="https://10.100.0.38:9443/services/CloudControllerService.CloudControllerServiceHttpsSoap11Endpoint/"/>
+            <soap:address location="https://10.146.138.213:9443/services/CloudControllerService.CloudControllerServiceHttpsSoap11Endpoint/"></soap:address>
         </wsdl:port>
         <wsdl:port name="CloudControllerServiceHttpSoap12Endpoint" binding="ns:CloudControllerServiceSoap12Binding">
-            <soap12:address location="http://10.100.0.38:9763/services/CloudControllerService.CloudControllerServiceHttpSoap12Endpoint/"/>
+            <soap12:address location="http://10.146.138.213:9763/services/CloudControllerService.CloudControllerServiceHttpSoap12Endpoint/"></soap12:address>
         </wsdl:port>
         <wsdl:port name="CloudControllerServiceHttpsSoap12Endpoint" binding="ns:CloudControllerServiceSoap12Binding">
-            <soap12:address location="https://10.100.0.38:9443/services/CloudControllerService.CloudControllerServiceHttpsSoap12Endpoint/"/>
+            <soap12:address location="https://10.146.138.213:9443/services/CloudControllerService.CloudControllerServiceHttpsSoap12Endpoint/"></soap12:address>
         </wsdl:port>
         <wsdl:port name="CloudControllerServiceHttpEndpoint" binding="ns:CloudControllerServiceHttpBinding">
-            <http:address location="http://10.100.0.38:9763/services/CloudControllerService.CloudControllerServiceHttpEndpoint/"/>
+            <http:address location="http://10.146.138.213:9763/services/CloudControllerService.CloudControllerServiceHttpEndpoint/"></http:address>
         </wsdl:port>
         <wsdl:port name="CloudControllerServiceHttpsEndpoint" binding="ns:CloudControllerServiceHttpBinding">
-            <http:address location="https://10.100.0.38:9443/services/CloudControllerService.CloudControllerServiceHttpsEndpoint/"/>
+            <http:address location="https://10.146.138.213:9443/services/CloudControllerService.CloudControllerServiceHttpsEndpoint/"></http:address>
         </wsdl:port>
     </wsdl:service>
 </wsdl:definitions>
\ No newline at end of file
diff --git a/service-stubs/org.apache.stratos.common.stub/pom.xml b/service-stubs/org.apache.stratos.common.stub/pom.xml
index 03e861f..d997b85 100644
--- a/service-stubs/org.apache.stratos.common.stub/pom.xml
+++ b/service-stubs/org.apache.stratos.common.stub/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-service-stubs-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/service-stubs/org.apache.stratos.manager.cleanup.notification.stub/pom.xml b/service-stubs/org.apache.stratos.manager.cleanup.notification.stub/pom.xml
index 73b9194..5acd8df 100644
--- a/service-stubs/org.apache.stratos.manager.cleanup.notification.stub/pom.xml
+++ b/service-stubs/org.apache.stratos.manager.cleanup.notification.stub/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-service-stubs-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/service-stubs/org.apache.stratos.manager.dashboard.stub/pom.xml b/service-stubs/org.apache.stratos.manager.dashboard.stub/pom.xml
index 4cc4216..f1875c0 100644
--- a/service-stubs/org.apache.stratos.manager.dashboard.stub/pom.xml
+++ b/service-stubs/org.apache.stratos.manager.dashboard.stub/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-service-stubs-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/service-stubs/org.apache.stratos.manager.stub/pom.xml b/service-stubs/org.apache.stratos.manager.stub/pom.xml
index ae6158a..f841b4d 100644
--- a/service-stubs/org.apache.stratos.manager.stub/pom.xml
+++ b/service-stubs/org.apache.stratos.manager.stub/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-service-stubs-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/service-stubs/org.apache.stratos.redirector.servlet.stub/pom.xml b/service-stubs/org.apache.stratos.redirector.servlet.stub/pom.xml
index 28b1354..5954814 100644
--- a/service-stubs/org.apache.stratos.redirector.servlet.stub/pom.xml
+++ b/service-stubs/org.apache.stratos.redirector.servlet.stub/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-service-stubs-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/service-stubs/org.apache.stratos.tenant.activity.stub/pom.xml b/service-stubs/org.apache.stratos.tenant.activity.stub/pom.xml
index 82b6d22..90b2401 100644
--- a/service-stubs/org.apache.stratos.tenant.activity.stub/pom.xml
+++ b/service-stubs/org.apache.stratos.tenant.activity.stub/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-service-stubs-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/service-stubs/org.apache.stratos.tenant.mgt.stub/pom.xml b/service-stubs/org.apache.stratos.tenant.mgt.stub/pom.xml
index 258c4e5..06493bc 100644
--- a/service-stubs/org.apache.stratos.tenant.mgt.stub/pom.xml
+++ b/service-stubs/org.apache.stratos.tenant.mgt.stub/pom.xml
@@ -22,7 +22,7 @@
     <parent>
     	<groupId>org.apache.stratos</groupId>
         <artifactId>stratos-service-stubs-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/service-stubs/org.apache.stratos.tenant.register.gapp.stub/pom.xml b/service-stubs/org.apache.stratos.tenant.register.gapp.stub/pom.xml
index e2d3730..6bb5616 100644
--- a/service-stubs/org.apache.stratos.tenant.register.gapp.stub/pom.xml
+++ b/service-stubs/org.apache.stratos.tenant.register.gapp.stub/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-service-stubs-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
    </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/service-stubs/org.apache.stratos.tenant.register.stub/pom.xml b/service-stubs/org.apache.stratos.tenant.register.stub/pom.xml
index 8752637..89f621a 100644
--- a/service-stubs/org.apache.stratos.tenant.register.stub/pom.xml
+++ b/service-stubs/org.apache.stratos.tenant.register.stub/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-service-stubs-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/service-stubs/org.apache.stratos.theme.mgt.stub/pom.xml b/service-stubs/org.apache.stratos.theme.mgt.stub/pom.xml
index 216616e..408da55 100644
--- a/service-stubs/org.apache.stratos.theme.mgt.stub/pom.xml
+++ b/service-stubs/org.apache.stratos.theme.mgt.stub/pom.xml
@@ -21,7 +21,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-service-stubs-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/service-stubs/org.apache.stratos.throttle.stub/pom.xml b/service-stubs/org.apache.stratos.throttle.stub/pom.xml
index 7dcc4e5..90154a2 100644
--- a/service-stubs/org.apache.stratos.throttle.stub/pom.xml
+++ b/service-stubs/org.apache.stratos.throttle.stub/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-service-stubs-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/service-stubs/org.apache.stratos.throttling.agent.stub/pom.xml b/service-stubs/org.apache.stratos.throttling.agent.stub/pom.xml
index bb49271..729b50e 100644
--- a/service-stubs/org.apache.stratos.throttling.agent.stub/pom.xml
+++ b/service-stubs/org.apache.stratos.throttling.agent.stub/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-service-stubs-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/service-stubs/org.apache.stratos.throttling.stub/pom.xml b/service-stubs/org.apache.stratos.throttling.stub/pom.xml
index 5b2c25a..3e73096 100644
--- a/service-stubs/org.apache.stratos.throttling.stub/pom.xml
+++ b/service-stubs/org.apache.stratos.throttling.stub/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-service-stubs-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/service-stubs/org.apache.stratos.usage.meteringqueryds.stub/pom.xml b/service-stubs/org.apache.stratos.usage.meteringqueryds.stub/pom.xml
index ae5175c..b6b6f2a 100644
--- a/service-stubs/org.apache.stratos.usage.meteringqueryds.stub/pom.xml
+++ b/service-stubs/org.apache.stratos.usage.meteringqueryds.stub/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-service-stubs-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/service-stubs/org.apache.stratos.usage.meteringsummarygenerationds.stub/pom.xml b/service-stubs/org.apache.stratos.usage.meteringsummarygenerationds.stub/pom.xml
index 5aaaa50..c56f615 100644
--- a/service-stubs/org.apache.stratos.usage.meteringsummarygenerationds.stub/pom.xml
+++ b/service-stubs/org.apache.stratos.usage.meteringsummarygenerationds.stub/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-service-stubs-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/service-stubs/org.apache.stratos.usage.stub/pom.xml b/service-stubs/org.apache.stratos.usage.stub/pom.xml
index 5209094..8bb915f 100644
--- a/service-stubs/org.apache.stratos.usage.stub/pom.xml
+++ b/service-stubs/org.apache.stratos.usage.stub/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-service-stubs-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/service-stubs/org.apache.stratos.validate.domain.stub/pom.xml b/service-stubs/org.apache.stratos.validate.domain.stub/pom.xml
index f317f35..f1802d6 100644
--- a/service-stubs/org.apache.stratos.validate.domain.stub/pom.xml
+++ b/service-stubs/org.apache.stratos.validate.domain.stub/pom.xml
@@ -22,7 +22,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-service-stubs-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/service-stubs/pom.xml b/service-stubs/pom.xml
index bc0f5d6..26ca4c2 100644
--- a/service-stubs/pom.xml
+++ b/service-stubs/pom.xml
@@ -23,7 +23,7 @@
     <parent>
         <groupId>org.apache.stratos</groupId>
         <artifactId>stratos-parent</artifactId>
-        <version>4.0.0-SNAPSHOT</version>
+        <version>4.0.0</version>
     </parent>
 
     <modelVersion>4.0.0</modelVersion>
diff --git a/tools/puppet3-agent/config.sh b/tools/puppet3-agent/config.sh
index 3347b80..4e4cbc2 100755
--- a/tools/puppet3-agent/config.sh
+++ b/tools/puppet3-agent/config.sh
@@ -88,7 +88,7 @@ if [[ $answer = y ]] ; then
 	ARGS=("-n${NODEID}" "-d${DOMAIN}" "-s${PUPPET_IP}")
 	${ECHO} "\nRunning puppet installation with arguments: ${ARGS[@]}"
 	/root/bin/puppetinstall/puppetinstall "${ARGS[@]}"
-        ${RM} /mnt/apache-stratos-cartridge-agent-4.0.0-SNAPSHOT/wso2carbon.lck
+        ${RM} /mnt/apache-stratos-cartridge-agent-4.0.0/wso2carbon.lck
 	${GREP} -q '/root/bin/init.sh > /tmp/puppet_log' /etc/rc.local || ${SED} -i 's/exit 0$/\/root\/bin\/init.sh \> \/tmp\/puppet_log\nexit 0/' /etc/rc.local
 	${RM} -rf /tmp/*
 	${RM} -rf /var/lib/puppet/ssl/*
diff --git a/tools/puppet3/manifests/nodes.pp b/tools/puppet3/manifests/nodes.pp
index 701b541..519de39 100644
--- a/tools/puppet3/manifests/nodes.pp
+++ b/tools/puppet3/manifests/nodes.pp
@@ -15,4 +15,115 @@
 # specific language governing permissions and limitations
 # under the License.
 
-# Stratos Puppet nodes defnitions
+node 'base' {
+
+  #essential variables
+  $package_repo         = 'http://10.4.128.7'
+  $local_package_dir    = '/mnt/packs'
+  $mb_ip                = '127.0.0.1'
+  $mb_port              = '61616'
+  $mb_type		= 'activemq' #in wso2 mb case, value should be 'wso2mb'
+  $cep_ip               = '127.0.0.1'
+  $cep_port             = '7611'
+  $truststore_password  = 'wso2carbon'
+  $java_distribution	= 'jdk-7u51-linux-x64.tar.gz'
+  $java_name		= 'jdk1.7.0_51'
+  $member_type_ip       = 'private'
+  $lb_httpPort          = '80'
+  $lb_httpsPort         = '443'
+  $tomcat_version       = '7.0.52'
+  $enable_log_publisher = 'false'
+  $bam_ip		= '127.0.0.1'
+  $bam_port		= '7611'
+  $bam_secure_port	= '7711'
+  $bam_username		= 'admin'
+  $bam_password		= 'admin'
+
+
+}
+
+# php cartridge node
+node /php/ inherits base {
+  $docroot = "/var/www/"
+  $syslog="/var/log/apache2/error.log"
+  $samlalias="/var/www/"
+  require java
+  class {'agent':
+    type => 'php',
+  }
+  class {'php':}
+  
+  #install php before agent
+  Class['php'] ~> Class['agent']
+}
+
+# loadbalancer cartridge node
+node /lb/ inherits base {
+  require java
+  class {'agent':}
+  class {'lb': maintenance_mode   => 'norestart',}
+}
+
+# tomcat cartridge node
+node /tomcat/ inherits base {
+  $docroot = "/mnt/apache-tomcat-${tomcat_version}/webapps/"
+  $samlalias="/mnt/apache-tomcat-${tomcat_version}/webapps/"
+
+  require java
+  class {'agent':}
+  class {'tomcat':}
+
+  #install tomcat befor agent
+  #Class['tomcat'] ~> Class['agent']
+}
+
+# mysql cartridge node
+node /mysql/ inherits base {
+  require java
+  class {'agent':
+    type => 'mysql',
+  }
+  class {'mysql':}
+}
+
+# nodejs cartridge node
+node /nodejs/ inherits base {
+  require java
+  class {'agent':
+    type => 'nodejs',
+  }
+  class {'nodejs':}
+
+  #install agent before nodejs
+  Class['nodejs'] ~> Class['agent']
+}
+
+# haproxy extension loadbalancer cartridge node
+node /haproxy/ inherits base {
+  require java
+  class {'haproxy':}
+  class {'agent':}
+}
+
+# ruby cartridge node
+node /ruby/ inherits base {
+  require java
+  class {'agent':
+  }
+  class {'ruby':}
+#  Class['ruby'] ~> Class['agent']
+}
+
+#wordpress cartridge node
+node /wordpress/ inherits base {
+  class {'agent':}
+  class {'wordpress':}
+  class {'mysql':}
+
+}
+
+# default (base) cartridge node
+node /default/ inherits base {
+  require java
+  class {'agent':}
+}
diff --git a/tools/puppet3/manifests/site.pp b/tools/puppet3/manifests/site.pp
index 5404576..cce0655 100644
--- a/tools/puppet3/manifests/site.pp
+++ b/tools/puppet3/manifests/site.pp
@@ -15,19 +15,4 @@
 # specific language governing permissions and limitations
 # under the License.
 
-# import Stratos cartridge nodes definitions
-import 'nodes/base.pp'
-import 'nodes/haproxy.pp'
-import 'nodes/lb.pp'
-import 'nodes/mysql.pp'
-import 'nodes/nodejs.pp'
-import 'nodes/php.pp'
-import 'nodes/ruby.pp'
-import 'nodes/tomcat.pp'
-import 'nodes/wordpress.pp'
-
-# import a single manifest file with node definitions
-import 'nodes.pp'
-
-# import default cartridge definition at the last
-import 'nodes/default.pp'
+import "nodes"
diff --git a/tools/puppet3/modules/agent/files/README.txt b/tools/puppet3/modules/agent/files/README.txt
index 88c8daf..6fef5cb 100644
--- a/tools/puppet3/modules/agent/files/README.txt
+++ b/tools/puppet3/modules/agent/files/README.txt
@@ -1,12 +1,12 @@
 This folder should have following:
 
-1. apache-stratos-cartridge-agent-${version}-bin.zip file 
+1. apache-stratos-cartridge-agent-${version}.zip file
 
 2. Folder having a name as $mb_type which is defined in the nodes.pp file.
 
 eg:
 if $mb_type = activemq, folder structure of this folder would be:
 >$ls
->activemq  apache-stratos-cartridge-agent-4.0.0-SNAPSHOT-bin.zip
+>activemq  apache-stratos-cartridge-agent-4.0.0.zip
 
 3. Under $mb_type folder, please add all the client jars, that should be copied to the agent's lib directory.
diff --git a/tools/puppet3/modules/agent/files/activemq/README.txt b/tools/puppet3/modules/agent/files/activemq/README.txt
new file mode 100644
index 0000000..dff519c
--- /dev/null
+++ b/tools/puppet3/modules/agent/files/activemq/README.txt
@@ -0,0 +1 @@
+please add all the client jars
diff --git a/tools/puppet3/modules/agent/manifests/init.pp b/tools/puppet3/modules/agent/manifests/init.pp
index 2d1b078..2ab599c 100644
--- a/tools/puppet3/modules/agent/manifests/init.pp
+++ b/tools/puppet3/modules/agent/manifests/init.pp
@@ -16,11 +16,14 @@
 # under the License.
 
 class agent(
-  $version = '4.0.0-SNAPSHOT',
-  $owner   = 'root',
-  $group   = 'root',
-  $target  = '/mnt',
-  $type    = 'default',
+  $version                = '4.0.0',
+  $owner                  = 'root',
+  $group                  = 'root',
+  $target                 = "/mnt",
+  $type                   = 'default',
+  $enable_artifact_update = true,
+  $auto_commit            = false,
+  $auto_checkout          = true,
 ){
 
   $deployment_code = 'cartridge-agent'
@@ -33,11 +36,21 @@ class agent(
   $service_templates = [
     'bin/stratos.sh',
     'conf/templates/jndi.properties.template',
-    'extensions/artifacts-updated.sh',
+    'conf/log4j.properties',   
     'extensions/clean.sh',
     'extensions/instance-activated.sh',
     'extensions/instance-started.sh',
     'extensions/start-servers.sh',
+    'extensions/artifacts-copy.sh',
+    'extensions/artifacts-updated.sh',
+    'extensions/complete-tenant.sh',
+    'extensions/complete-topology.sh',
+    'extensions/member-activated.sh',
+    'extensions/member-suspended.sh',
+    'extensions/member-terminated.sh',
+    'extensions/mount-volumes.sh',
+    'extensions/subscription-domain-added.sh',
+    'extensions/subscription-domain-removed.sh',
     ]
 
   agent::initialize { $deployment_code:
diff --git a/tools/puppet3/modules/agent/manifests/initialize.pp b/tools/puppet3/modules/agent/manifests/initialize.pp
index 4fdb0c7..00b4902 100755
--- a/tools/puppet3/modules/agent/manifests/initialize.pp
+++ b/tools/puppet3/modules/agent/manifests/initialize.pp
@@ -18,46 +18,35 @@
 # Initializing the deployment
 
 define agent::initialize ($repo, $version, $service, $local_dir, $target, $owner,) {
-  file {
-    "/${local_dir}/":
-      ensure => present;
-  }
-  file {
-    "/${local_dir}/apache-stratos-${service}-${version}-bin.zip":
-      ensure => present,
-      source => "puppet:///modules/agent/apache-stratos-${service}-${version}-bin.zip",
-      require => File["/${local_dir}/"];
-  }
+
   exec {
     "creating_target_for_${name}":
       path    => '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
-      command => "mkdir -p ${target}",
-      require => File["/${local_dir}/apache-stratos-${service}-${version}-bin.zip"];
+      command => "mkdir -p ${target}";
 
     "creating_local_package_repo_for_${name}":
       path    => '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/java/bin/',
       unless  => "test -d ${local_dir}",
       command => "mkdir -p ${local_dir}";
+  }
 
-    "downloading_apache-stratos-${service}-${version}-bin.zip":
-      path      => '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
-      cwd       => $local_dir,
-      unless    => "test -f ${local_dir}/apache-stratos-${service}-${version}-bin.zip",
-      command   => "puppet:///modules/agent/apache-stratos-${service}-${version}-bin.zip",
-      logoutput => 'on_failure',
-      creates   => "${local_dir}/apache-stratos-${service}-${version}-bin.zip",
-      timeout   => 10,
+  file {
+    "/${local_dir}/apache-stratos-${service}-${version}.zip":
+      ensure => present,
+      source => ["puppet:///modules/agent/apache-stratos-${service}-${version}.zip", "puppet:///packs/apache-stratos-${service}-${version}.zip"],
       require   => Exec["creating_local_package_repo_for_${name}", "creating_target_for_${name}"];
+  }
 
+  exec {
     "extracting_stratos${service}-${version}.zip_for_${name}":
       path      => '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
       cwd       => $target,
       unless    => "test -d ${target}/apache-stratos-${service}-${version}/conf",
-      command   => "unzip ${local_dir}/apache-stratos-${service}-${version}-bin.zip",
+      command   => "unzip ${local_dir}/apache-stratos-${service}-${version}.zip",
       logoutput => 'on_failure',
       creates   => "${target}/apache-stratos-${service}-${version}/repository",
       timeout   => 0,
-      require   => Exec["downloading_apache-stratos-${service}-${version}-bin.zip"];
+      require   => File["/${local_dir}/apache-stratos-${service}-${version}.zip"];
 
     "setting_permission_for_${name}":
       path      => '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
diff --git a/tools/puppet3/modules/agent/manifests/start.pp b/tools/puppet3/modules/agent/manifests/start.pp
index 034834c..2ee5d4d 100755
--- a/tools/puppet3/modules/agent/manifests/start.pp
+++ b/tools/puppet3/modules/agent/manifests/start.pp
@@ -20,6 +20,7 @@
 define agent::start ($target, $owner) {
   exec { "starting_${name}":
     user    => $owner,
+    environment => "JAVA_HOME=$java_home",
     path    => '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/java/bin/',
     unless  => "test -f ${target}/wso2carbon.lck",
     cwd     => "${target}/bin/",
diff --git a/tools/puppet3/modules/agent/templates/bin/stratos.sh.erb b/tools/puppet3/modules/agent/templates/bin/stratos.sh.erb
index 02814f9..03b50ab 100644
--- a/tools/puppet3/modules/agent/templates/bin/stratos.sh.erb
+++ b/tools/puppet3/modules/agent/templates/bin/stratos.sh.erb
@@ -31,25 +31,47 @@ properties="-Dmb.ip=<%= @mb_ip %>
             -Dthrift.receiver.port=<%= @cep_port %>
             -Djndi.properties.template.file.path=<%= @carbon_home %>/conf/templates/jndi.properties.template
             -Djndi.properties.dir=<%= @carbon_home %>/conf
-            -Dlog4j.properties.file.path=<%= @carbon_home %>/conf/log4j.properties
+            -Dlog4j.configuration=file://<%= @carbon_home %>/conf/log4j.properties
             -Dparam.file.path=<%= @carbon_home %>/payload/launch-params
-            -Dextensions.dir=${script_path}/../extensions
+            -Dextensions.dir=<%= @carbon_home %>/extensions
             -Dcep.stats.publisher.enabled=true
+	    -Dlb.private.ip=<%= @lb_private_ip %>
+	    -Dlb.public.ip=<%= @lb_public_ip %>
             -Djavax.net.ssl.trustStore=<%= @carbon_home %>/security/client-truststore.jks
             -Djavax.net.ssl.trustStorePassword=<%= @truststore_password %>
-	    -Denable.artifact.update=true
-	    -Dartifact.update.interval=15
-	    -Denable.data.publisher=<%= @enable_log_publisher %>
+	     -Denable.artifact.update=<%= @enable_artifact_update %>
+            -Dauto.commit=<%= @auto_commit %>
+            -Dauto.checkout=<%= @auto_checkout %>
+            -Dartifact.update.interval=15
+            -Denable.data.publisher=<%= @enable_log_publisher %>
             -Dmonitoring.server.ip=<%= @bam_ip %>
             -Dmonitoring.server.port=<%= @bam_port %>
             -Dmonitoring.server.secure.port=<%= @bam_secure_port %>
             -Dmonitoring.server.admin.username=<%= @bam_username %>
             -Dmonitoring.server.admin.password=<%= @bam_password %>
-	    -DAPP_PATH=<%= @docroot %>"
+	    -DAPP_PATH=<%= @docroot %>
+	    -Dsuper.tenant.repository.path=<%= @super_tenant_repository_path %>
+            -Dtenant.repository.path=<%= @tenant_repository_path %>
+	    -Dlog.file.paths=<%= @log_file_paths %>
+            -Dextension.instance.started=<%= @extension_instance_started %>
+            -Dextension.start.servers=<%= @extension_start_servers %>
+            -Dextension.instance.activated=<%= @extension_instance_activated %>
+            -Dextension.artifacts.updated=<%= @extension_artifacts_updated %>
+            -Dextension.clean=<%= @extension_clean %>
+            -Dextension.mount.volumes=<%= @extension_mount_volumes %>
+            -Dextension.member.started=<%= @extension_member_started %>
+            -Dextension.member.activated=<%= @extension_member_activated %>
+	    -Dextension.member.terminated=<%= @extension_member_terminated %>
+	    -Dextension.member.suspended=<%= @extension_member_suspended %>
+            -Dextension.complete.topology=<%= @extension_complete_topology %>
+            -Dextension.complete.tenant=<%= @extension_complete_tenant %>
+            -Dextension.subscription.domain.added=<%= @extension_subscription_domain_added %>
+            -Dextension.subscription.domain.removed=<%= @extension_subscription_domain_removed %>
+            -Dextension.artifacts.copy=<%= @extension_artifacts_copy %>"
 
 # Uncomment below line to enable remote debugging
 #debug="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005"
 
-/opt/java/bin/java -cp "${class_path}" ${properties} ${debug} org.apache.stratos.cartridge.agent.Main
+<%= @java_home %>/bin/java -cp "${class_path}" ${properties} ${debug} org.apache.stratos.cartridge.agent.Main
 
 
diff --git a/tools/puppet3/modules/agent/templates/conf/log4j.properties.erb b/tools/puppet3/modules/agent/templates/conf/log4j.properties.erb
new file mode 100644
index 0000000..04cdb75
--- /dev/null
+++ b/tools/puppet3/modules/agent/templates/conf/log4j.properties.erb
@@ -0,0 +1,40 @@
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+
+# Set root logger level and appenders
+log4j.rootLogger=INFO, CONSOLE_APPENDER, FILE_APPENDER
+
+# CONSOLE_APPENDER is set to be a ConsoleAppender.
+log4j.appender.CONSOLE_APPENDER=org.apache.log4j.ConsoleAppender
+
+# The standard error log where all the warnings, errors and fatal errors will be logged
+log4j.appender.FILE_APPENDER=org.apache.log4j.FileAppender
+log4j.appender.FILE_APPENDER.File=/var/log/apache-stratos/cartridge-agent.log
+log4j.appender.FILE_APPENDER.layout=org.apache.log4j.PatternLayout
+log4j.appender.FILE_APPENDER.layout.ConversionPattern=%d{ISO8601} [%X{ip}-%X{host}] [%t] %5p %c{1} %m%n
+log4j.appender.FILE_APPENDER.threshold=DEBUG
+
+# CONSOLE_APPENDER uses PatternLayout.
+log4j.appender.CONSOLE_APPENDER.layout=org.apache.log4j.PatternLayout
+log4j.appender.CONSOLE_APPENDER.layout.ConversionPattern=[%d{ISO8601}] %5p - [%c{1}] %m%n
+
+log4j.logger.org.apache.stratos.cartridge.agent=<%= @agent_log_level %>
+log4j.logger.org.apache.stratos.cartridge.agent.statistics.publisher=INFO
+log4j.logger.org.apache.stratos.messaging=INFO
+log4j.logger.org.wso2.andes.client=ERROR
diff --git a/tools/puppet3/modules/agent/templates/extensions/artifacts-copy.sh.erb b/tools/puppet3/modules/agent/templates/extensions/artifacts-copy.sh.erb
new file mode 100644
index 0000000..5cad830
--- /dev/null
+++ b/tools/puppet3/modules/agent/templates/extensions/artifacts-copy.sh.erb
@@ -0,0 +1,29 @@
+#!/bin/bash
+# --------------------------------------------------------------
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+# --------------------------------------------------------------
+# This extension script will be executed once the update artifacts
+# event is received and they are copied to the given path.
+# --------------------------------------------------------------
+#
+
+log=/var/log/apache-stratos/cartridge-agent-extensions.log
+cp -rf $1* $2
+echo "Artifacts Copied" | tee -a $log
diff --git a/tools/puppet3/modules/agent/templates/extensions/artifacts-updated.sh.erb b/tools/puppet3/modules/agent/templates/extensions/artifacts-updated.sh.erb
index 19bb846..37b7791 100755
--- a/tools/puppet3/modules/agent/templates/extensions/artifacts-updated.sh.erb
+++ b/tools/puppet3/modules/agent/templates/extensions/artifacts-updated.sh.erb
@@ -25,7 +25,7 @@
 #
 
 log=/var/log/apache-stratos/cartridge-agent-extensions.log
-echo "Artifacts updated" | tee -a $log
+echo `date`": Artifacts Updated Event" | tee -a $log
 
 
 <%- if @type == 'php' -%>
diff --git a/tools/puppet3/modules/agent/templates/extensions/clean.sh.erb b/tools/puppet3/modules/agent/templates/extensions/clean.sh.erb
index 3b87d36..c62ad35 100755
--- a/tools/puppet3/modules/agent/templates/extensions/clean.sh.erb
+++ b/tools/puppet3/modules/agent/templates/extensions/clean.sh.erb
@@ -25,4 +25,4 @@
 #
 
 log=/var/log/apache-stratos/cartridge-agent-extensions.log
-echo "Cleaning the cartridge" | tee -a $log
\ No newline at end of file
+echo `date`": Cleaning the cartridge" | tee -a $log
diff --git a/tools/puppet3/modules/agent/templates/extensions/complete-tenant.sh.erb b/tools/puppet3/modules/agent/templates/extensions/complete-tenant.sh.erb
new file mode 100644
index 0000000..2586474
--- /dev/null
+++ b/tools/puppet3/modules/agent/templates/extensions/complete-tenant.sh.erb
@@ -0,0 +1,30 @@
+#!/bin/bash
+# --------------------------------------------------------------
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+# --------------------------------------------------------------
+# This extension script will be executed when complete tenant
+# event is received.
+# --------------------------------------------------------------
+#
+
+log=/var/log/apache-stratos/cartridge-agent-extensions.log
+echo `date`": Complete Tenant Event: " | tee -a $log
+echo "Member List: ${STRATOS_MEMBER_LIST_JSON}" | tee -a $log
+echo "Tenant List: ${STRATOS_TENANT_LIST_JSON}" | tee -a $log
diff --git a/tools/puppet3/modules/agent/templates/extensions/complete-topology.sh.erb b/tools/puppet3/modules/agent/templates/extensions/complete-topology.sh.erb
new file mode 100644
index 0000000..ea2e941
--- /dev/null
+++ b/tools/puppet3/modules/agent/templates/extensions/complete-topology.sh.erb
@@ -0,0 +1,34 @@
+#!/bin/bash
+# --------------------------------------------------------------
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+# --------------------------------------------------------------
+# This extension script will be executed when complete topology 
+# event is received.
+# --------------------------------------------------------------
+#
+
+log=/var/log/apache-stratos/cartridge-agent-extensions.log
+echo `date`": Complete Topology Event: " | tee -a $log
+echo "LB IP: ${STRATOS_LB_IP}" | tee -a $log
+echo "LB PUBLIC IP: $STRATOS_LB_PUBLIC_IP}" | tee -a $log
+echo "STRATOS_PARAM_FILE_PATH: ${STRATOS_PARAM_FILE_PATH}"
+echo "Member List: ${STRATOS_MEMBER_LIST_JSON}" | tee -a $log
+echo "Complete Topology: ${STRATOS_TOPOLOGY_JSON}" | tee -a $log
+echo "Members in LB: ${STRATOS_MEMBERS_IN_LB_JSON}" | tee -a $log
diff --git a/tools/puppet3/modules/agent/templates/extensions/instance-activated.sh.erb b/tools/puppet3/modules/agent/templates/extensions/instance-activated.sh.erb
index c892ca7..f5d60e8 100755
--- a/tools/puppet3/modules/agent/templates/extensions/instance-activated.sh.erb
+++ b/tools/puppet3/modules/agent/templates/extensions/instance-activated.sh.erb
@@ -25,4 +25,4 @@
 #
 
 log=/var/log/apache-stratos/cartridge-agent-extensions.log
-echo "Instance activated" | tee -a $log
\ No newline at end of file
+echo `date`": Instance activated" | tee -a $log
diff --git a/tools/puppet3/modules/agent/templates/extensions/instance-started.sh.erb b/tools/puppet3/modules/agent/templates/extensions/instance-started.sh.erb
index 6d9d854..7b5aa6a 100755
--- a/tools/puppet3/modules/agent/templates/extensions/instance-started.sh.erb
+++ b/tools/puppet3/modules/agent/templates/extensions/instance-started.sh.erb
@@ -24,13 +24,4 @@
 #
 
 log=/var/log/apache-stratos/cartridge-agent-extensions.log
-echo "Instance started" | tee -a $log
-
-
-<%- if @type == 'mysql' -%>
-<%= scope.function_template(['agent/extensions/addons/_mysql.erb']) -%>
-<%- end -%>
-
-<%- if @type == 'ruby' -%>
-<%= scope.function_template(['agent/extensions/addons/_ruby.erb']) -%>
-<%- end -%>
+echo `date`": Instance Started Event: " | tee -a $log
diff --git a/tools/puppet3/modules/agent/templates/extensions/member-activated.sh.erb b/tools/puppet3/modules/agent/templates/extensions/member-activated.sh.erb
new file mode 100644
index 0000000..f01d028
--- /dev/null
+++ b/tools/puppet3/modules/agent/templates/extensions/member-activated.sh.erb
@@ -0,0 +1,303 @@
+#!/bin/bash
+# --------------------------------------------------------------
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+# --------------------------------------------------------------
+# This extension script will be executed when member activated
+# event is received.
+# --------------------------------------------------------------
+#
+
+# Execute error_handler function on script error
+trap 'error_handler ${LINENO} $?' ERR
+
+log=/var/log/apache-stratos/cartridge-agent-extensions-member.activated.log
+VERBOSE=1
+DATE=`which date` || print_error "date command not found"
+ECHO=`which echo` || print_error "echo command not found"
+GREP=`which grep` || print_error "grep command not found"
+PS=`which ps` || print_error "ps command not found"
+SED=`which sed` || print_error "sed command not found"
+
+function printParameters(){
+	${ECHO} -e  "LB IP: ${STRATOS_LB_IP}" | tee -a $log
+	${ECHO} -e  "LB PUBLIC IP: ${STRATOS_LB_PUBLIC_IP}" | tee -a $log
+	${ECHO} -e  "STRATOS_PARAM_FILE_PATH: ${STRATOS_PARAM_FILE_PATH}"
+	${ECHO} -e  "Member List: ${STRATOS_MEMBER_LIST_JSON}" | tee -a $log
+	${ECHO} -e  "Complete Topology: ${STRATOS_TOPOLOGY_JSON}" | tee -a $log
+	${ECHO} -e  "Members in LB: ${STRATOS_MEMBERS_IN_LB_JSON}" | tee -a $log
+	${ECHO} -e  "APP_PATH: ${STRATOS_APP_PATH}" | tee -a $log
+}
+
+function error_handler(){
+        MYSELF="$0"               # equals to script name
+        LASTLINE="$1"            # argument 1: last line of error occurence
+        LASTERR="$2"             # argument 2: error code of last command
+        echo "ERROR in ${MYSELF}: line ${LASTLINE}: exit status of last command: ${LASTERR}"
+	exit 1       
+}
+
+function print_message(){
+	if [ ${VERBOSE} -eq 1 ]; then
+    		${ECHO} -e "[INFO] " $1 | tee -a $log
+	fi    
+}
+
+function print_error(){
+	${ECHO} -e "[Error] " $1 | tee -a $log	
+	exit 1
+}
+
+function verify_file_exists(){
+	if [[ ! -f $1 ]] ; then
+		print_error "File not found: $1"
+	fi
+}
+
+function update_hosts_file(){
+	instance_hostname="<%= @stratos_instance_data_host_name %>"
+	(${GREP} -q "${instance_hostname}" /etc/hosts || (${ECHO} "${STRATOS_LB_IP}  ${instance_hostname} # Stratos LB instance private IP" >> /etc/hosts \
+	  && print_message "Updated /etc/hosts file with: ${STRATOS_LB_IP}  ${instance_hostname}")) \
+	  || print_error "Failed to update '/etc/hosts' file. "
+
+	map_to_lb="<%= @stratos_instance_data_map_to_lb %>"
+        arr=$(${ECHO} ${map_to_lb} | tr "," "\n")
+
+	for map_hostname in $arr
+	do
+ 		(${GREP} -q "${map_hostname}" /etc/hosts || (${ECHO} "${STRATOS_LB_IP}  ${map_hostname} # Stratos LB instance private IP" >> /etc/hosts \
+          && print_message "Updated /etc/hosts file with: ${STRATOS_LB_IP}  ${map_hostname}")) \
+          || print_error "Failed to update '/etc/hosts' file. "
+	done
+
+	<%- if @stratos_instance_data_worker_host_name -%>
+         worker_hostname="<%= @stratos_instance_data_worker_host_name %>"
+ 	 (${GREP} -q " ${worker_hostname}" /etc/hosts || (${ECHO} "${STRATOS_LB_IP}  ${worker_hostname} # Stratos LB worker private IP" >> /etc/hosts \
+          && print_message "Updated /etc/hosts file with: ${STRATOS_LB_IP}  ${worker_hostname}")) \
+          || print_error "Failed to update '/etc/hosts' file. "
+         <%- end -%>
+
+        if [[ "${STRATOS_SERVICE_NAME}" = "apistore" ||  "${STRATOS_SERVICE_NAME}" = "publisher" ]] ; then
+		gateway_host_name="<%= @stratos_instance_data_gateway_host_name %>"
+		gateway_mgt_host_name="<%= @stratos_instance_data_gateway_mgt_host_name %>"
+		keymanager_host_name="<%= @stratos_instance_data_keymanager_host_name %>"
+
+		(${GREP} -q "${gateway_host_name}" /etc/hosts || (${ECHO} "${STRATOS_LB_IP}  ${gateway_host_name} # Stratos LB instance private IP" >> /etc/hosts \
+	  && print_message "Updated /etc/hosts file with: ${STRATOS_LB_IP}  ${gateway_host_name}")) \
+	  || print_error "Failed to update '/etc/hosts' file. "
+
+		(${GREP} -q "${gateway_mgt_host_name}" /etc/hosts || (${ECHO} "${STRATOS_LB_IP}  ${gateway_mgt_host_name} # Stratos LB instance private IP" >> /etc/hosts \
+	  && print_message "Updated /etc/hosts file with: ${STRATOS_LB_IP}  ${gateway_mgt_host_name}")) \
+	  || print_error "Failed to update '/etc/hosts' file. "
+
+
+	  (${GREP} -q "${keymanager_host_name}" /etc/hosts || (${ECHO} "${STRATOS_LB_IP}  ${keymanager_host_name} # Stratos LB instance private IP" >> /etc/hosts \
+          && print_message "Updated /etc/hosts file with: ${STRATOS_LB_IP}  ${keymanager_host_name}")) \
+          || print_error "Failed to update '/etc/hosts' file. "
+
+	 elif [[ "${STRATOS_SERVICE_NAME}" = "gateway" || "${STRATOS_SERVICE_NAME}" = "gatewaymgt" ]] ; then
+                keymanager_hostname="<%= @stratos_instance_data_keymanager_host_name %>"
+
+                (${GREP} -q "${keymanager_hostname}" /etc/hosts || (${ECHO} "${STRATOS_LB_IP}  ${keymanager_hostname} # Stratos LB instance private IP" >> /etc/hosts \
+          && print_message "Updated /etc/hosts file with: ${STRATOS_LB_IP}  ${keymanager_hostname}")) \
+          || print_error "Failed to update '/etc/hosts' file. "
+
+        fi	
+}
+
+function backup_file(){
+    if [[  -f "$1.orig" ]];
+    then
+        print_message "Restoring from the Original template file $1"
+        cp -f "$1.orig" "$1"
+    else
+        print_message "Creating a backup of the file $1"
+        cp -f "$1" "$1.orig"
+    fi
+}
+
+function configure_manager_worker_wka_members(){
+
+        print_message "function  configure_manager_worker_wka_members  ..... "
+
+    # generic worker manager seperation :D
+    if [[ -z ${STRATOS_WK_MANAGER_MEMBER_COUNT} || ${STRATOS_WK_MANAGER_MEMBER_COUNT} -eq 0 ]] ; then
+        print_message "manager WKA member count is zero or unavailable"
+    else
+        print_message "Configuring manager..."
+        print_message "configure_manager_worker_wka_members STRATOS_WK_MANAGER_MEMBER_COUNT  ${STRATOS_WK_MANAGER_MEMBER_COUNT}  ..... "
+        for i in `seq 0 $(( ${STRATOS_WK_MANAGER_MEMBER_COUNT} - 1 ))`
+            do
+                member_ip_name="STRATOS_WK_MANAGER_MEMBER_${i}_IP"
+                member_ip=${member_ip_name}
+                if [[ -z ${member_ip} ]] ; then
+                    print_error "WKA is null for STRATOS_WK_MANAGER_MEMBER_${i}_IP"
+                fi
+                print_message  "$i => ${member_ip}"
+                WKA_XML=$"${WKA_XML}<member><hostName>${!member_ip}</hostName><port>4000</port></member>\n"
+           done
+     fi
+
+     if [[ -z ${STRATOS_WK_WORKER_MEMBER_COUNT} || ${STRATOS_WK_WORKER_MEMBER_COUNT} -eq 0 ]] ; then
+         print_message "worker WKA member count is zero or unavailable"
+     else
+         print_message "Configuring worker..."
+	 print_message "STRATOS_WK_WORKER_MEMBER_COUNT ${STRATOS_WK_WORKER_MEMBER_COUNT}  ..... "
+         for i in `seq 0 $(( ${STRATOS_WK_WORKER_MEMBER_COUNT} - 1 ))`
+             do
+                 member_ip_name="STRATOS_WK_WORKER_MEMBER_${i}_IP"
+                 member_ip=${member_ip_name}
+                 if [[ -z ${member_ip} ]] ; then
+                     print_error "WKA is null for STRATOS_WK_WORKER_MEMBER_${i}_IP"
+                 fi
+                     print_message  "$i => ${member_ip}"
+                     WKA_XML=$"${WKA_XML}<member><hostName>${!member_ip}</hostName><port>4000</port></member>\n"
+             done
+     fi
+
+     print_message "${STRATOS_SERVICE_NAME} WKA_XML => ${WKA_XML}"
+     verify_file_exists ${AXIS2_XML_FILE}
+     ${SED} -i "s%${WKA_LINE}%${WKA_XML}%g" ${AXIS2_XML_FILE} && print_message "gateway WKA configuration successful" || print_error "Failed to configure well known members"
+
+}
+
+
+function configure_wk_members(){
+
+	print_message "Performing clustering configuration for ${STRATOS_SERVICE_NAME}..."
+
+	WKA_XML=""
+        KEYMGR_XML=""
+	WKA_LINE="@WELL_KNOWN_MEMBERS"
+	KEYMGR_LINE="@KEYMANAGER_SERVER_URL"
+
+	AXIS2_XML_FILE=${STRATOS_APP_PATH}/repository/conf/axis2/axis2.xml
+	backup_file ${AXIS2_XML_FILE}
+	
+
+	if [[ (! -z $STRATOS_SERVICE_GROUP) && "${STRATOS_SERVICE_GROUP}" = "apim" ]] ; then
+	print_message " STRATOS_SERVICE_GROUP_APIM  ${STRATOS_SERVICE_GROUP} ..... "
+		API_MANAGER_XML_FILE=${STRATOS_APP_PATH}/repository/conf/api-manager.xml
+		backup_file ${API_MANAGER_XML_FILE}
+
+		if [[ "${STRATOS_SERVICE_NAME}" = "apistore" ||  "${STRATOS_SERVICE_NAME}" = "publisher" ]] ; then
+
+			print_message "Configuring axis2.xml for ${STRATOS_SERVICE_NAME}..."
+			WKA_XML=$"${WKA_XML}<member><hostName>${STRATOS_WK_APISTORE_MEMBER_IP}</hostName><port>4000</port></member>\n"
+			WKA_XML=$"${WKA_XML}<member><hostName>${STRATOS_WK_PUBLISHER_MEMBER_IP}</hostName><port>4000</port></member>\n"
+			print_message "${STRATOS_SERVICE_NAME} WKA_XML => ${WKA_XML}"
+			verify_file_exists ${AXIS2_XML_FILE}
+			${SED} -i "s%${WKA_LINE}%${WKA_XML}%g" ${AXIS2_XML_FILE} && print_message "${STRATOS_SERVICE_NAME} WKA configuration successful" || print_error "Failed to configure well known members"
+
+		elif [[ "${STRATOS_SERVICE_NAME}" = "keymanager" ]] ; then
+
+			print_message "In keymanager...nothing to do"
+
+		elif [[ "${STRATOS_SERVICE_NAME}" = "gateway"  ||  "${STRATOS_SERVICE_NAME}" = "gatewaymgt" ]] ; then
+			
+                        if [[ "${DEPLOYMENT}" = "manager" || "${DEPLOYMENT}" = "worker" ]] ; then
+
+                                configure_manager_worker_wka_members
+                        fi
+			
+		fi
+	elif [[ "${DEPLOYMENT}" = "manager" || "${DEPLOYMENT}" = "worker" ]] ; then
+		print_message " Worker / Manager ..... ${DEPLOYMENT} "
+		configure_manager_worker_wka_members
+	else
+		print_message "Configuring ${STRATOS_SERVICE_NAME}..."
+		print_message "STRATOS_WK_MEMBER_COUNT ....... ${STRATOS_WK_MEMBER_COUNT} "
+		for i in `seq 0 $(( ${STRATOS_WK_MEMBER_COUNT} - 1 ))`
+		do		    				
+	 		member_ip="STRATOS_WK_MEMBER_${i}_IP"
+			print_message " memberip ${member_ip} ....... "
+			if [[ -z ${!member_ip} ]] ; then
+				print_error "WKA is null for STRATOS_WK_MEMBER_${i}_IP"
+			fi
+			print_message  "$i => ${!member_ip}"
+			WKA_XML=$"${WKA_XML}<member><hostName>${!member_ip}</hostName><port>4000</port></member>\n"			
+		done
+
+		print_message "${STRATOS_SERVICE_NAME} WKA_XML => ${WKA_XML}"
+		verify_file_exists ${AXIS2_XML_FILE}
+		${SED} -i "s%${WKA_LINE}%${WKA_XML}%g" ${AXIS2_XML_FILE} && print_message "${STRATOS_SERVICE_NAME} WKA configuration successful" || print_error "Failed to configure well known members"
+	fi
+}
+
+function updateWKMembers() {
+   print_message "Update WKA Members...... "
+   # Check if APP_PATH exists
+   print_message "Stratos App path $STRATOS_APP_PATH ...... "
+   if [[ ! -d $STRATOS_APP_PATH ]] ; then
+   	print_error "APP_PATH is not found at: ${STRATOS_APP_PATH}"
+   fi
+
+   # Set JAVA_HOME if it is not already set
+   if [[ -z $JAVA_HOME ]] ; then
+   	print_message "Setting JAVA_HOME to /opt/java"
+	export JAVA_HOME=/opt/java
+   fi
+
+   print_message "Stopping wso2server.sh ...... " 
+   # Kill Product server
+   $STRATOS_APP_PATH/bin/wso2server.sh stop > /dev/null 2>&1 &
+   sleep 10
+
+   # Check if clustering is enabled for this product
+   if [[ -z $STRATOS_CLUSTERING ]] ; then
+      ${ECHO} -e  `date`": starting servers in stand-alone mode..." | tee -a $log
+      if [[ ${VERBOSE} -eq 1 ]]; then
+         printParameters
+      fi
+
+   else
+      ${ECHO} -e  `date`": starting servers in clustering mode..." | tee -a $log
+      if [[ ${VERBOSE} -eq 1 ]] ; then
+         printParameters
+      fi
+      # Do the WKA configuration to support clustering
+      configure_wk_members
+   fi
+
+   #Backup hosts file
+   backup_file /etc/hosts
+   # Update the /etc/hosts file with LB instance IP
+   update_hosts_file
+
+   # Run start server command
+   verify_file_exists $STRATOS_APP_PATH/bin/wso2server.sh
+   $STRATOS_APP_PATH/bin/wso2server.sh $* > /dev/null 2>&1 &
+   print_message "Executed run command: $STRATOS_APP_PATH/bin/wso2server.sh $*"
+   print_message "WK Members successfully updated."
+}
+
+# -----------------------
+# Execution starts here
+# -----------------------
+
+   print_message " Executing member activated extension "
+   print_message " Stratos UpdateWK_IP  [$STRATOS_UPDATE_WK_IP] "
+# Check if WK Update flag is set
+if [[ $STRATOS_UPDATE_WK_IP = "true" ]]; then
+   print_message " Conditions successful for  [$STRATOS_UPDATE_WK_IP] . Executing updateWKMembers "
+   updateWKMembers   
+fi
+
+${ECHO} -e `date`": member activated extension successfully completed."
+# END
diff --git a/tools/puppet3/modules/agent/templates/extensions/member-started.sh.erb b/tools/puppet3/modules/agent/templates/extensions/member-started.sh.erb
new file mode 100644
index 0000000..29f45c3
--- /dev/null
+++ b/tools/puppet3/modules/agent/templates/extensions/member-started.sh.erb
@@ -0,0 +1,43 @@
+#!/bin/bash
+# --------------------------------------------------------------
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+# --------------------------------------------------------------
+# This extension script will be executed when member suspended
+# event is received.
+# --------------------------------------------------------------
+#
+
+log=/var/log/apache-stratos/cartridge-agent-extensions.log
+OUTPUT=`date`": Member Started Event: "
+OUTPUT="$OUTPUT MEMBER_ID: ${STRATOS_MEMBER_ID}, "
+OUTPUT="$OUTPUT MEMBER_IP: ${STRATOS_MEMBER_IP}, "
+OUTPUT="$OUTPUT CLUSTER_ID: ${STRATOS_CLUSTER_ID}, "
+OUTPUT="$OUTPUT LB_CLUSTER_ID: ${STRATOS_LB_CLUSTER_ID}, "
+OUTPUT="$OUTPUT NETWORK_PARTITION_ID: ${STRATOS_NETWORK_PARTITION_ID}, "
+OUTPUT="$OUTPUT SERVICE_NAME: ${STRATOS_SERVICE_NAME}, "
+OUTPUT="$OUTPUT PORTS: ${STRATOS_PORTS},"
+OUTPUT="$OUTPUT STRATOS_LB_IP: ${STRATOS_LB_IP},"
+OUTPUT="$OUTPUT STRATOS_LB_PUBLIC_IP: ${STRATOS_LB_PUBLIC_IP},"
+OUTPUT="$OUTPUT APP_PATH: ${APP_PATH},"
+OUTPUT="$OUTPUT STRATOS_PARAM_FILE_PATH: ${STRATOS_PARAM_FILE_PATH}"
+echo $OUTPUT | tee -a $log
+echo "Member List: ${STRATOS_MEMBER_LIST_JSON}" | tee -a $log
+echo "Topology: ${STRATOS_TOPOLOGY_JSON}" | tee -a $log
+echo "---------------" | tee -a $log
diff --git a/tools/puppet3/modules/agent/templates/extensions/member-suspended.sh.erb b/tools/puppet3/modules/agent/templates/extensions/member-suspended.sh.erb
new file mode 100644
index 0000000..866aa0d
--- /dev/null
+++ b/tools/puppet3/modules/agent/templates/extensions/member-suspended.sh.erb
@@ -0,0 +1,43 @@
+#!/bin/bash
+# --------------------------------------------------------------
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+# --------------------------------------------------------------
+# This extension script will be executed when member suspended
+# event is received.
+# --------------------------------------------------------------
+#
+
+log=/var/log/apache-stratos/cartridge-agent-extensions.log
+OUTPUT=`date`": Member Suspended Event: "
+OUTPUT="$OUTPUT MEMBER_ID: ${STRATOS_MEMBER_ID}, "
+OUTPUT="$OUTPUT MEMBER_IP: ${STRATOS_MEMBER_IP}, "
+OUTPUT="$OUTPUT CLUSTER_ID: ${STRATOS_CLUSTER_ID}, "
+OUTPUT="$OUTPUT LB_CLUSTER_ID: ${STRATOS_LB_CLUSTER_ID}, "
+OUTPUT="$OUTPUT NETWORK_PARTITION_ID: ${STRATOS_NETWORK_PARTITION_ID}, "
+OUTPUT="$OUTPUT SERVICE_NAME: ${STRATOS_SERVICE_NAME}, "
+OUTPUT="$OUTPUT PORTS: ${STRATOS_PORTS},"
+OUTPUT="$OUTPUT STRATOS_LB_IP: ${STRATOS_LB_IP},"
+OUTPUT="$OUTPUT STRATOS_LB_PUBLIC_IP: ${STRATOS_LB_PUBLIC_IP},"
+OUTPUT="$OUTPUT APP_PATH: ${APP_PATH},"
+OUTPUT="$OUTPUT STRATOS_PARAM_FILE_PATH: ${STRATOS_PARAM_FILE_PATH}"
+echo $OUTPUT | tee -a $log
+echo "Member List: ${STRATOS_MEMBER_LIST_JSON}" | tee -a $log
+echo "Topology: ${STRATOS_TOPOLOGY_JSON}" | tee -a $log
+echo "---------------" | tee -a $log
diff --git a/tools/puppet3/modules/agent/templates/extensions/member-terminated.sh.erb b/tools/puppet3/modules/agent/templates/extensions/member-terminated.sh.erb
new file mode 100644
index 0000000..89cedf6
--- /dev/null
+++ b/tools/puppet3/modules/agent/templates/extensions/member-terminated.sh.erb
@@ -0,0 +1,43 @@
+#!/bin/bash
+# --------------------------------------------------------------
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+# --------------------------------------------------------------
+# This extension script will be executed when member terminated
+# event is received.
+# --------------------------------------------------------------
+#
+
+log=/var/log/apache-stratos/cartridge-agent-extensions.log
+OUTPUT=`date`": Member Terminated Event: "
+OUTPUT="$OUTPUT MEMBER_ID: ${STRATOS_MEMBER_ID}, "
+OUTPUT="$OUTPUT MEMBER_IP: ${STRATOS_MEMBER_IP}, "
+OUTPUT="$OUTPUT CLUSTER_ID: ${STRATOS_CLUSTER_ID}, "
+OUTPUT="$OUTPUT LB_CLUSTER_ID: ${STRATOS_LB_CLUSTER_ID}, "
+OUTPUT="$OUTPUT NETWORK_PARTITION_ID: ${STRATOS_NETWORK_PARTITION_ID}, "
+OUTPUT="$OUTPUT SERVICE_NAME: ${STRATOS_SERVICE_NAME}, "
+OUTPUT="$OUTPUT PORTS: ${STRATOS_PORTS},"
+OUTPUT="$OUTPUT STRATOS_LB_IP: ${STRATOS_LB_IP},"
+OUTPUT="$OUTPUT STRATOS_LB_PUBLIC_IP: ${STRATOS_LB_PUBLIC_IP},"
+OUTPUT="$OUTPUT APP_PATH: ${APP_PATH},"
+OUTPUT="$OUTPUT STRATOS_PARAM_FILE_PATH: ${STRATOS_PARAM_FILE_PATH}"
+echo $OUTPUT | tee -a $log
+echo "Member List: ${STRATOS_MEMBER_LIST_JSON}" | tee -a $log
+echo "Topology: ${STRATOS_TOPOLOGY_JSON}" | tee -a $log
+echo "---------------" | tee -a $log
diff --git a/tools/puppet3/modules/agent/templates/extensions/mount-volumes.sh.erb b/tools/puppet3/modules/agent/templates/extensions/mount-volumes.sh.erb
new file mode 100755
index 0000000..2e649bd
--- /dev/null
+++ b/tools/puppet3/modules/agent/templates/extensions/mount-volumes.sh.erb
@@ -0,0 +1,87 @@
+#!/bin/bash
+# --------------------------------------------------------------
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+# --------------------------------------------------------------
+# This extension script will be executed to mount volumes
+# to the instance.
+# --------------------------------------------------------------
+#
+
+
+log=/var/log/apache-stratos/cartridge-agent-extensions.log
+echo -e "Starting mounting volumes" 2>&1 | tee -a $log
+
+# $1  is passed from Cartridge Agent code.
+echo -e "launh param file location $1" | tee -a $log
+#source /opt/apache-stratos-cartridge-agent/launch.params
+PERSISTENCE_MAPPING=$1
+echo -e "Persistance mappings : $PERSISTENCE_MAPPING" 2>&1 | tee -a $log
+
+mount_volume(){
+
+        device=$1;
+        mount_point=$2;
+        echo "device $device"
+        echo "point  $mount_point"
+        # check if the volume has a file system
+        output=`sudo file -s $device`;
+        echo $output | tee -a $log
+
+        # this is the pattern of the output of file -s if the volume does not have a file system
+        # refer to http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html
+        pattern="$device: data"
+
+        if [[ $output ==  $pattern ]]
+        then
+                echo -e "Volume is not formatted. So formating the device $device \n" | tee -a $log
+                sudo mkfs -t ext4 $device
+        fi
+
+        echo "Mounting  the device $device to the mount point $mount_point \n" | tee -a $log
+        device_mounted=$(mount | grep "$device")
+
+        if [ ! -d "$mount_point" ]
+        then
+              echo "creating the  mount point directory $mount_point since it does not exist." | tee -a $log
+              sudo mkdir $mount_point
+        fi
+
+        #mounting the device if it is not already mounted
+        if [ ! "$device_mounted" = "" ]
+        then
+              echo -e "Device $device is already mounted." | tee -a $log
+        else
+              sudo mount $device $mount_point
+        fi
+
+}
+
+IFS='|' read -ra ADDR <<< "${PERSISTENCE_MAPPING}"
+echo "${ADDR[@]}" | tee -a $log
+
+for i in "${!ADDR[@]}"; do
+        # expected PERSISTANCE_MAPPING format is device1|mountPoint1|device2|mountpoint2...
+        # so that even indexes are devices and odd indexes are mount points..
+        if (( $i  % 2 == 0 ))
+        then
+           mount_volume ${ADDR[$i]} ${ADDR[$i + 1]}
+        fi
+done
+
diff --git a/tools/puppet3/modules/agent/templates/extensions/start-servers.sh.erb b/tools/puppet3/modules/agent/templates/extensions/start-servers.sh.erb
index d660441..6e34902 100755
--- a/tools/puppet3/modules/agent/templates/extensions/start-servers.sh.erb
+++ b/tools/puppet3/modules/agent/templates/extensions/start-servers.sh.erb
@@ -23,9 +23,286 @@
 # --------------------------------------------------------------
 #
 
-log=/var/log/apache-stratos/cartridge-agent-extensions.log
-echo "Starting servers" | tee -a $log
+# Execute error_handler function on script error
+trap 'error_handler ${LINENO} $?' ERR
 
-<%- if @type == 'nodejs' -%>
-<%= scope.function_template(['agent/extensions/addons/_nodejs.erb']) -%>
+log=/var/log/apache-stratos/cartridge-agent-extensions-start.servers.log
+VERBOSE=1
+DATE=`which date` || print_error "date command not found"
+ECHO=`which echo` || print_error "echo command not found"
+GREP=`which grep` || print_error "grep command not found"
+PS=`which ps` || print_error "ps command not found"
+SED=`which sed` || print_error "sed command not found"
+
+function printParameters(){
+	${ECHO} -e  "LB IP: ${STRATOS_LB_IP}" | tee -a $log
+	${ECHO} -e  "LB PUBLIC IP: ${STRATOS_LB_PUBLIC_IP}" | tee -a $log
+	${ECHO} -e  "STRATOS_PARAM_FILE_PATH: ${STRATOS_PARAM_FILE_PATH}"
+	${ECHO} -e  "Member List: ${STRATOS_MEMBER_LIST_JSON}" | tee -a $log
+	${ECHO} -e  "Complete Topology: ${STRATOS_TOPOLOGY_JSON}" | tee -a $log
+	${ECHO} -e  "Members in LB: ${STRATOS_MEMBERS_IN_LB_JSON}" | tee -a $log
+	${ECHO} -e  "APP_PATH: ${STRATOS_APP_PATH}" | tee -a $log
+}
+
+function error_handler(){
+        MYSELF="$0"               # equals to script name
+        LASTLINE="$1"            # argument 1: last line of error occurence
+        LASTERR="$2"             # argument 2: error code of last command
+        echo "ERROR in ${MYSELF}: line ${LASTLINE}: exit status of last command: ${LASTERR}"
+	exit 1       
+}
+
+function print_message(){
+	if [ ${VERBOSE} -eq 1 ]; then
+    		${ECHO} -e "[INFO] " $1 | tee -a $log
+	fi    
+}
+
+function print_error(){
+	${ECHO} -e "[Error] " $1 | tee -a $log	
+	exit 1
+}
+
+function verify_file_exists(){
+	if [[ ! -f $1 ]] ; then
+		print_error "File not found: $1"
+	fi
+}
+
+function update_hosts_file(){
+	instance_hostname="<%= @stratos_instance_data_host_name %>"
+	(${GREP} -q "${instance_hostname}" /etc/hosts || (${ECHO} "${STRATOS_LB_IP}  ${instance_hostname} # Stratos LB instance private IP" >> /etc/hosts \
+	  && print_message "Updated /etc/hosts file with: ${STRATOS_LB_IP}  ${instance_hostname}")) \
+	  || print_error "Failed to update '/etc/hosts' file. "
+
+	map_to_lb="<%= @stratos_instance_data_map_to_lb %>"
+        arr=$(${ECHO} ${map_to_lb} | tr "," "\n")
+
+	for map_hostname in $arr
+	do
+ 		(${GREP} -q "${map_hostname}" /etc/hosts || (${ECHO} "${STRATOS_LB_IP}  ${map_hostname} # Stratos LB instance private IP" >> /etc/hosts \
+          && print_message "Updated /etc/hosts file with: ${STRATOS_LB_IP}  ${map_hostname}")) \
+          || print_error "Failed to update '/etc/hosts' file. "
+	done
+
+	map_to_ip="<%= @stratos_instance_data_map_to_ip %>"
+        arr=$(${ECHO} ${map_to_ip} | tr "," "\n")
+
+        for mapping in $arr
+        do
+
+	  arrr=$(${ECHO} ${mapping} | tr "#" "\n")
+	  map_hostname=${arrr[1]}
+	  ip_to_map=${arrr[0]}
+
+                (${GREP} -q "${map_hostname}" /etc/hosts || (${ECHO} "${ip_to_map}  ${map_hostname} # Additional Mappings" >> /etc/hosts \
+          && print_message "Updated /etc/hosts file with: ${ip_to_map}  ${map_hostname}")) \
+          || print_error "Failed to update '/etc/hosts' file. "
+     done
+
+
+	<%- if @stratos_instance_data_worker_host_name -%>
+         worker_hostname="<%= @stratos_instance_data_worker_host_name %>"
+ 	 (${GREP} -q " ${worker_hostname}" /etc/hosts || (${ECHO} "${STRATOS_LB_IP}  ${worker_hostname} # Stratos LB worker private IP" >> /etc/hosts \
+          && print_message "Updated /etc/hosts file with: ${STRATOS_LB_IP}  ${worker_hostname}")) \
+          || print_error "Failed to update '/etc/hosts' file. "
+         <%- end -%>
+
+        if [[ "${STRATOS_SERVICE_NAME}" = "apistore" ||  "${STRATOS_SERVICE_NAME}" = "publisher" ]] ; then
+		gateway_host_name="<%= @stratos_instance_data_gateway_host_name %>"
+		gateway_mgt_host_name="<%= @stratos_instance_data_gateway_mgt_host_name %>"
+		keymanager_host_name="<%= @stratos_instance_data_keymanager_host_name %>"
+
+		(${GREP} -q "${gateway_host_name}" /etc/hosts || (${ECHO} "${STRATOS_LB_IP}  ${gateway_host_name} # Stratos LB instance private IP" >> /etc/hosts \
+	  && print_message "Updated /etc/hosts file with: ${STRATOS_LB_IP}  ${gateway_host_name}")) \
+	  || print_error "Failed to update '/etc/hosts' file. "
+
+		(${GREP} -q "${gateway_mgt_host_name}" /etc/hosts || (${ECHO} "${STRATOS_LB_IP}  ${gateway_mgt_host_name} # Stratos LB instance private IP" >> /etc/hosts \
+	  && print_message "Updated /etc/hosts file with: ${STRATOS_LB_IP}  ${gateway_mgt_host_name}")) \
+	  || print_error "Failed to update '/etc/hosts' file. "
+
+
+	  (${GREP} -q "${keymanager_host_name}" /etc/hosts || (${ECHO} "${STRATOS_LB_IP}  ${keymanager_host_name} # Stratos LB instance private IP" >> /etc/hosts \
+          && print_message "Updated /etc/hosts file with: ${STRATOS_LB_IP}  ${keymanager_host_name}")) \
+          || print_error "Failed to update '/etc/hosts' file. "
+
+	 elif [[ "${STRATOS_SERVICE_NAME}" = "gateway" || "${STRATOS_SERVICE_NAME}" = "gatewaymgt" ]] ; then
+                keymanager_hostname="<%= @stratos_instance_data_keymanager_host_name %>"
+
+                (${GREP} -q "${keymanager_hostname}" /etc/hosts || (${ECHO} "${STRATOS_LB_IP}  ${keymanager_hostname} # Stratos LB instance private IP" >> /etc/hosts \
+          && print_message "Updated /etc/hosts file with: ${STRATOS_LB_IP}  ${keymanager_hostname}")) \
+          || print_error "Failed to update '/etc/hosts' file. "
+
+	elif [[ "${STRATOS_SERVICE_NAME}" = "keymanager" ]] ; then
+                gateway_host_name="<%= @stratos_instance_data_gateway_host_name %>"
+
+                (${GREP} -q "${gateway_host_name}" /etc/hosts || (${ECHO} "${STRATOS_LB_IP}  ${gateway_host_name} # Stratos LB instance private IP" >> /etc/hosts \
+          && print_message "Updated /etc/hosts file with: ${STRATOS_LB_IP}  ${gateway_host_name}")) \
+          || print_error "Failed to update '/etc/hosts' file. "
+
+
+        fi	
+}
+
+function backup_file(){
+    if [[  -f "$1.orig" ]];
+    then
+        print_message "Restoring from the Original template file $1"
+        cp -f "$1.orig" "$1"
+    else
+        print_message "Creating a backup of the file $1"
+        cp -f "$1" "$1.orig"
+    fi
+}
+
+function configure_manager_worker_wka_members(){
+
+    # generic worker manager seperation :D
+    if [[ -z ${STRATOS_WK_MANAGER_MEMBER_COUNT} || ${STRATOS_WK_MANAGER_MEMBER_COUNT} -eq 0 ]] ; then
+        print_message "manager WKA member count is zero or unavailable"
+    else
+        print_message "Configuring manager..."
+        for i in `seq 0 $(( ${STRATOS_WK_MANAGER_MEMBER_COUNT} - 1 ))`
+            do
+                member_ip_name="STRATOS_WK_MANAGER_MEMBER_${i}_IP"
+                member_ip=${member_ip_name}
+                if [[ -z ${member_ip} ]] ; then
+                    print_error "WKA is null for STRATOS_WK_MANAGER_MEMBER_${i}_IP"
+                fi
+                print_message  "$i => ${member_ip}"
+                WKA_XML=$"${WKA_XML}<member><hostName>${!member_ip}</hostName><port>4000</port></member>\n"
+           done
+     fi
+
+     if [[ -z ${STRATOS_WK_WORKER_MEMBER_COUNT} || ${STRATOS_WK_WORKER_MEMBER_COUNT} -eq 0 ]] ; then
+         print_message "worker WKA member count is zero or unavailable"
+     else
+         print_message "Configuring worker..."
+         for i in `seq 0 $(( ${STRATOS_WK_WORKER_MEMBER_COUNT} - 1 ))`
+             do
+                 member_ip_name="STRATOS_WK_WORKER_MEMBER_${i}_IP"
+                 member_ip=${member_ip_name}
+                 if [[ -z ${member_ip} ]] ; then
+                     print_error "WKA is null for STRATOS_WK_WORKER_MEMBER_${i}_IP"
+                 fi
+                     print_message  "$i => ${member_ip}"
+                     WKA_XML=$"${WKA_XML}<member><hostName>${!member_ip}</hostName><port>4000</port></member>\n"
+             done
+     fi
+
+     print_message "${STRATOS_SERVICE_NAME} WKA_XML => ${WKA_XML}"
+     verify_file_exists ${AXIS2_XML_FILE}
+     ${SED} -i "s%${WKA_LINE}%${WKA_XML}%g" ${AXIS2_XML_FILE} && print_message "gateway WKA configuration successful" || print_error "Failed to configure well known members"
+
+}
+
+
+function configure_wk_members(){
+
+	print_message "Performing clustering configuration for ${STRATOS_SERVICE_NAME}..."
+
+	WKA_XML=""
+        KEYMGR_XML=""
+	WKA_LINE="@WELL_KNOWN_MEMBERS"
+	KEYMGR_LINE="@KEYMANAGER_SERVER_URL"
+
+	AXIS2_XML_FILE=${STRATOS_APP_PATH}/repository/conf/axis2/axis2.xml
+	backup_file ${AXIS2_XML_FILE}
+	
+
+	if [[ (! -z $STRATOS_SERVICE_GROUP) && "${STRATOS_SERVICE_GROUP}" = "apim" ]] ; then
+		API_MANAGER_XML_FILE=${STRATOS_APP_PATH}/repository/conf/api-manager.xml
+		backup_file ${API_MANAGER_XML_FILE}
+
+		if [[ "${STRATOS_SERVICE_NAME}" = "apistore" ||  "${STRATOS_SERVICE_NAME}" = "publisher" ]] ; then
+
+			print_message "Configuring axis2.xml for ${STRATOS_SERVICE_NAME}..."
+			WKA_XML=$"${WKA_XML}<member><hostName>${STRATOS_WK_APISTORE_MEMBER_IP}</hostName><port>4000</port></member>\n"
+			WKA_XML=$"${WKA_XML}<member><hostName>${STRATOS_WK_PUBLISHER_MEMBER_IP}</hostName><port>4000</port></member>\n"
+			print_message "${STRATOS_SERVICE_NAME} WKA_XML => ${WKA_XML}"
+			verify_file_exists ${AXIS2_XML_FILE}
+			${SED} -i "s%${WKA_LINE}%${WKA_XML}%g" ${AXIS2_XML_FILE} && print_message "${STRATOS_SERVICE_NAME} WKA configuration successful" || print_error "Failed to configure well known members"
+
+		elif [[ "${STRATOS_SERVICE_NAME}" = "keymanager" ]] ; then
+
+			print_message "In keymanager...nothing to do"
+
+		elif [[ "${STRATOS_SERVICE_NAME}" = "gateway"  ||  "${STRATOS_SERVICE_NAME}" = "gatewaymgt" ]] ; then
+			
+                        if [[ "${DEPLOYMENT}" = "manager" || "${DEPLOYMENT}" = "worker" ]] ; then
+
+                                configure_manager_worker_wka_members
+                        fi
+			
+		fi
+	elif [[ "${DEPLOYMENT}" = "manager" || "${DEPLOYMENT}" = "worker" ]] ; then
+
+		configure_manager_worker_wka_members
+	else
+		print_message "Configuring ${STRATOS_SERVICE_NAME}..."
+		for i in `seq 0 $(( ${STRATOS_WK_MEMBER_COUNT} - 1 ))`
+		do		    		
+	 		member_ip="STRATOS_WK_MEMBER_${i}_IP"
+			if [[ -z ${!member_ip} ]] ; then
+				print_error "WKA is null for STRATOS_WK_MEMBER_${i}_IP"
+			fi
+			print_message  "$i => ${!member_ip}"
+			WKA_XML=$"${WKA_XML}<member><hostName>${!member_ip}</hostName><port>4000</port></member>\n"			
+		done
+
+		print_message "${STRATOS_SERVICE_NAME} WKA_XML => ${WKA_XML}"
+		verify_file_exists ${AXIS2_XML_FILE}
+		${SED} -i "s%${WKA_LINE}%${WKA_XML}%g" ${AXIS2_XML_FILE} && print_message "${STRATOS_SERVICE_NAME} WKA configuration successful" || print_error "Failed to configure well known members"
+	fi
+}
+
+# Check if APP_PATH exists
+if [[ ! -d $STRATOS_APP_PATH ]] ; then
+	print_error "APP_PATH is not found at: ${STRATOS_APP_PATH}"
+fi
+
+# Check if product server is already running
+if [[ -f $STRATOS_APP_PATH/wso2carbon.pid ]] ; then
+    PID=`cat $STRATOS_APP_PATH/wso2carbon.pid`
+    if  ${PS} -p $PID > /dev/null ; then
+      ${ECHO} -e `date`": process is already running...skipping start servers"      
+      exit 0
+    fi   
+fi
+
+# Set JAVA_HOME if it is not already set
+if [[ -z $JAVA_HOME ]] ; then
+	print_message "Setting JAVA_HOME to /opt/java"
+	export JAVA_HOME=/opt/java
+fi
+
+# Check if clustering is enabled for this product
+if [[ -z $STRATOS_CLUSTERING ]] ; then
+   ${ECHO} -e  `date`": starting servers in stand-alone mode..." | tee -a $log
+   if [[ ${VERBOSE} -eq 1 ]]; then
+      printParameters
+   fi
+
+else
+   ${ECHO} -e  `date`": starting servers in clustering mode..." | tee -a $log
+   if [[ ${VERBOSE} -eq 1 ]] ; then
+      printParameters
+   fi
+   # Do the WKA configuration to support clustering
+   configure_wk_members
+fi
+
+<%- if @using_dns == true -%>
+     #Update the DNS mapping
+<%- else -%>
+    # Update the /etc/hosts file with LB instance IP
+    update_hosts_file
 <%- end -%>
+
+
+# Run start server command
+verify_file_exists $STRATOS_APP_PATH/bin/wso2server.sh
+$STRATOS_APP_PATH/bin/wso2server.sh $* > /dev/null 2>&1 &
+print_message "Executed run command: $STRATOS_APP_PATH/bin/wso2server.sh $*"
+${ECHO} -e `date`": start servers extension successfully completed."
+
diff --git a/tools/puppet3/modules/agent/templates/extensions/subscription-domain-added.sh.erb b/tools/puppet3/modules/agent/templates/extensions/subscription-domain-added.sh.erb
new file mode 100644
index 0000000..9ef88a2
--- /dev/null
+++ b/tools/puppet3/modules/agent/templates/extensions/subscription-domain-added.sh.erb
@@ -0,0 +1,35 @@
+#!/bin/bash
+# --------------------------------------------------------------
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+# --------------------------------------------------------------
+# This extension script will be executed when subscription domain
+# added event is received.
+# --------------------------------------------------------------
+#
+
+log=/var/log/apache-stratos/cartridge-agent-extensions.log
+OUTPUT=`date`": Subscription Domain Added Event"
+OUTPUT="$OUTPUT STRATOS_SUBSCRIPTION_SERVICE_NAME: ${STRATOS_SUBSCRIPTION_SERVICE_NAME},"
+OUTPUT="$OUTPUT STRATOS_SUBSCRIPTION_DOMAIN_NAME: ${STRATOS_SUBSCRIPTION_DOMAIN_NAME},"
+OUTPUT="$OUTPUT STRATOS_SUBSCRIPTION_TENANT_ID: ${STRATOS_SUBSCRIPTION_TENANT_ID},"
+OUTPUT="$OUTPUT STRATOS_SUBSCRIPTION_TENANT_DOMAIN: $STRATOS_SUBSCRIPTION_TENANT_DOMAIN},"
+OUTPUT="$OUTPUT APP_PATH: ${APP_PATH},"
+OUTPUT="$OUTPUT STRATOS_SUBSCRIPTION_APPLICATION_CONTEXT: ${STRATOS_SUBSCRIPTION_APPLICATION_CONTEXT}"
+echo $OUTPUT | tee -a $log
diff --git a/tools/puppet3/modules/agent/templates/extensions/subscription-domain-removed.sh.erb b/tools/puppet3/modules/agent/templates/extensions/subscription-domain-removed.sh.erb
new file mode 100644
index 0000000..ff7b56b
--- /dev/null
+++ b/tools/puppet3/modules/agent/templates/extensions/subscription-domain-removed.sh.erb
@@ -0,0 +1,34 @@
+#!/bin/bash
+# --------------------------------------------------------------
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+# --------------------------------------------------------------
+# This extension script will be executed when subscription domain
+# removed event is received.
+# --------------------------------------------------------------
+#
+
+log=/var/log/apache-stratos/cartridge-agent-extensions.log
+OUTPUT=`date`": Subscription Domain Removed Event"
+OUTPUT="$OUTPUT STRATOS_SUBSCRIPTION_SERVICE_NAME: ${STRATOS_SUBSCRIPTION_SERVICE_NAME},"
+OUTPUT="$OUTPUT STRATOS_SUBSCRIPTION_DOMAIN_NAME: ${STRATOS_SUBSCRIPTION_DOMAIN_NAME},"
+OUTPUT="$OUTPUT STRATOS_SUBSCRIPTION_TENANT_ID: ${STRATOS_SUBSCRIPTION_TENANT_ID},"
+OUTPUT="$OUTPUT APP_PATH: ${APP_PATH},"
+OUTPUT="$OUTPUT STRATOS_SUBSCRIPTION_TENANT_DOMAIN: $STRATOS_SUBSCRIPTION_TENANT_DOMAIN}"
+echo $OUTPUT | tee -a $log
diff --git a/tools/puppet3/modules/lb/files/README.txt b/tools/puppet3/modules/lb/files/README.txt
index af6d3ea..2e08eee 100644
--- a/tools/puppet3/modules/lb/files/README.txt
+++ b/tools/puppet3/modules/lb/files/README.txt
@@ -7,6 +7,6 @@ This folder should have following:
 eg:
 if $mb_type = activemq, folder structure of this folder would be:
 >$ls
->activemq  apache-stratos-load-balancer-4.0.0-SNAPSHOT.zip
+>activemq  apache-stratos-load-balancer-4.0.0.zip
 
 3. Under $mb_type folder, please add all the client jars, that should be copied to the load balancer's repository/components/lib directory.
diff --git a/tools/puppet3/modules/lb/manifests/init.pp b/tools/puppet3/modules/lb/manifests/init.pp
index ca7deed..bce052b 100755
--- a/tools/puppet3/modules/lb/manifests/init.pp
+++ b/tools/puppet3/modules/lb/manifests/init.pp
@@ -29,7 +29,7 @@
 #
 
 class lb (
-  $version            = '4.0.0-SNAPSHOT',
+  $version            = '4.0.0',
   $offset             = 0,
   $tribes_port        = 4000,
   $maintenance_mode   = true,
diff --git a/tools/puppet3/modules/php/manifests/init.pp b/tools/puppet3/modules/php/manifests/init.pp
index 17857a7..5c66ecc 100755
--- a/tools/puppet3/modules/php/manifests/init.pp
+++ b/tools/puppet3/modules/php/manifests/init.pp
@@ -21,7 +21,9 @@
 
 
 class php () {
-  $packages = [    
+  $packages = [
+    'nano',
+    'zip',
     'build-essential',
     'mysql-client',
     'apache2',
@@ -32,7 +34,9 @@ class php () {
     'php5-mysql',
     'php-db',
     'php-pear',
-    'php5-curl',    
+    'php5-curl',
+    'curl',
+    'wget',
     'php5-ldap',
     'php5-adodb',
     'mailutils',
diff --git a/tools/puppet3/puppet.conf b/tools/puppet3/puppet.conf
index a2ba7cc..4854197 100644
--- a/tools/puppet3/puppet.conf
+++ b/tools/puppet3/puppet.conf
@@ -16,7 +16,6 @@
 # under the License.
 
 [main]
-#server=puppet
 logdir=/var/log/puppet
 vardir=/var/lib/puppet
 ssldir=/var/lib/puppet/ssl
@@ -29,3 +28,4 @@ templatedir=$confdir/templates
 # and can safely be removed if webrick is used.
 ssl_client_header = SSL_CLIENT_S_DN 
 ssl_client_verify_header = SSL_CLIENT_VERIFY
+
diff --git a/tools/stratos-installer/README.txt b/tools/stratos-installer/README.txt
index fa3a240..6a64952 100644
--- a/tools/stratos-installer/README.txt
+++ b/tools/stratos-installer/README.txt
@@ -1,7 +1,7 @@
-Apache Stratos 4.0.0-SNAPSHOT
------------------------------
+Apache Stratos 4.0.0
+----------------------
 
-Apache Stratos (Incubating) is a polyglot PaaS framework, providing developers a cloud-based environment for developing, testing, and running scalable applications.
+Apache Stratos is a polyglot PaaS framework, providing developers a cloud-based environment for developing, testing, and running scalable applications.
 
 How to Install
 ----------------
diff --git a/tools/stratos-installer/conf/setup.conf b/tools/stratos-installer/conf/setup.conf
index b3f6a87..9522bc2 100644
--- a/tools/stratos-installer/conf/setup.conf
+++ b/tools/stratos-installer/conf/setup.conf
@@ -55,7 +55,7 @@ export mb_ip="127.0.0.1" # Machine ip on which mb run
 export mb_port=61616 #default port which the message broker service runs
  
 export stratos_extract_path=$stratos_path/"apache-stratos"
-export stratos_pack_zip=$stratos_packs/"apache-stratos-4.0.0-SNAPSHOT.zip"
+export stratos_pack_zip=$stratos_packs/"apache-stratos-4.0.0.zip"
 
 export activemq_pack=$stratos_packs/"apache-activemq-5.9.1-bin.tar.gz"
 export activemq_path=$stratos_path/"apache-activemq-5.9.1"
diff --git a/tools/stratos-installer/config/as/repository/conf/carbon.xml b/tools/stratos-installer/config/as/repository/conf/carbon.xml
index 82330f1..3b13ea1 100644
--- a/tools/stratos-installer/config/as/repository/conf/carbon.xml
+++ b/tools/stratos-installer/config/as/repository/conf/carbon.xml
@@ -40,7 +40,7 @@
     <!--
        Product Version
     -->
-    <Version>4.0.0-SNAPSHOT</Version>
+    <version>4.0.0-SNAPSHOT</version>
 
     <!--
        Host name or IP address of the machine hosting this server
diff --git a/tools/stratos-installer/config/cc/repository/conf/carbon.xml b/tools/stratos-installer/config/cc/repository/conf/carbon.xml
index d458c99..d6b7b4d 100644
--- a/tools/stratos-installer/config/cc/repository/conf/carbon.xml
+++ b/tools/stratos-installer/config/cc/repository/conf/carbon.xml
@@ -40,7 +40,7 @@
     <!--
        Product Version
     -->
-    <Version>4.0.0-SNAPSHOT</Version>
+    <version>4.0.0-SNAPSHOT</version>
 
     <!--
        Host name or IP address of the machine hosting this server
diff --git a/tools/stratos-installer/config/sm/repository/conf/carbon.xml b/tools/stratos-installer/config/sm/repository/conf/carbon.xml
index 52daeff..4ea32a3 100644
--- a/tools/stratos-installer/config/sm/repository/conf/carbon.xml
+++ b/tools/stratos-installer/config/sm/repository/conf/carbon.xml
@@ -40,7 +40,7 @@
     <!--
        Product Version
     -->
-    <Version>4.0.0-SNAPSHOT</Version>
+    <version>4.0.0-SNAPSHOT</version>
 
     <!--
        Host name or IP address of the machine hosting this server
diff --git a/tools/stratos-installer/setup.sh b/tools/stratos-installer/setup.sh
index 8dae806..9966c69 100755
--- a/tools/stratos-installer/setup.sh
+++ b/tools/stratos-installer/setup.sh
@@ -529,7 +529,7 @@ fi
 if [[ !(-d $stratos_extract_path) ]]; then
     echo "Extracting Apache Stratos"
     unzip -q $stratos_pack_zip -d $stratos_path
-    mv -f $stratos_path/apache-stratos-4.0.0-SNAPSHOT $stratos_extract_path
+    mv -f $stratos_path/apache-stratos-4.0.0 $stratos_extract_path
 fi
 
 if [[ ($profile = "default" && $config_mb = "true") ]]; then
-- 
1.9.1

