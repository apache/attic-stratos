<%
/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */
(function () {
    var log = new Log();
    var TYPE = "type";
    var TABLE_NAME = "tableName";

    var HTTP_INTERNAL_ERROR = 500;
    var TYPE_GET_SCHEMA = 1;
    var TYPE_GET_BY_RANGE = 2;
    var TIME_INTERVAL_1 = '30 Min';
    var TIME_INTERVAL_2 = '1 Hour';
    var TIME_INTERVAL_3 = '1 Day';
    var TIME_INTERVAL_4 = '1 Week';
    var TIME_INTERVAL_5 = '1 Month';
    var ALL_CLUSTERS = 'All Clusters';

    var carbon = require('carbon');
    var configs = require('/configs/designer.json');

    var type = 0;
    var typeParam = request.getParameter(TYPE);
    if (typeParam != null) {
        type = parseInt(typeParam);
    }

    if (type == 0) {
        log.error("Operation type is not specified!");
        response.status = HTTP_INTERNAL_ERROR;
        print('{ "status": "Failed", "message": "Operation type is not specified" }');
        return;
    }

    var tableName = request.getParameter(TABLE_NAME);
    if (tableName == null) {
        log.error("Table name param is not provided!");
        response.status = HTTP_INTERNAL_ERROR;
        print('{ "status": "Failed", "message": "Table name param is empty" }');
        return;
    }

    var content = request.getContent();
    var contentAsString = null;
    if (content != '' && content != null) {
        contentAsString = stringify(content);
        if (log.isDebugEnabled()) {
            log.debug("Value of content: " + contentAsString);
        }
    }

    var db = new Database("WSO2_ANALYTICS_PROCESSED_DATA_STORE_DB");

    try {
        var result;
        switch (type) {
            case TYPE_GET_SCHEMA:
            {
                result = db.query("SELECT COLUMN_NAME,DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA='ANALYTICS_PROCESSED_DATA_STORE' AND TABLE_NAME = '" + tableName + "'");
                if (result != null) {
                    print(result);
                }
                break;
            }

            case TYPE_GET_BY_RANGE:
            {
                var timeInterval = request.getParameter("time");
                var interval = 1800000;
                var x_axis_interval;
                if (timeInterval === TIME_INTERVAL_1) {
                    interval = 1800000;
                    x_axis_interval = 60;
                } else if (timeInterval === TIME_INTERVAL_2) {
                    interval = 3600000;
                    x_axis_interval = 120;
                } else if (timeInterval === TIME_INTERVAL_3) {
                    interval = 86400000;
                    x_axis_interval = 480;
                } else if (timeInterval === TIME_INTERVAL_4) {
                    interval = 604800000;
                    x_axis_interval = 3360;
                } else if (timeInterval === TIME_INTERVAL_5) {
                    interval = 2419200000;
                    x_axis_interval = 13440;
                }
                var tenantId = request.getParameter("tenantId");
                var applicationId = request.getParameter("applicationId");
                var clusterId = request.getParameter("clusterId");

                if (clusterId == ALL_CLUSTERS) {
                    result = db.query("SELECT FROM_UNIXTIME(CEILING( Time/('" + x_axis_interval + "'*1000)) *'" + x_axis_interval + "', '%Y:%m:%d %h:%i') AS Time, SUM(CreatedInstanceCount) AS CreatedInstanceCount , SUM(InitializedInstanceCount) AS InitializedInstanceCount , SUM(ActiveInstanceCount) AS ActiveInstanceCount, SUM(TerminatedInstanceCount) AS TerminatedInstanceCount FROM " + tableName + " WHERE TenantId='" + tenantId + "' AND ApplicationId='" + applicationId + "' AND Time > ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000-'" + interval + "' ) AND Time <= ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000) GROUP BY FROM_UNIXTIME( CEILING( Time/('" + x_axis_interval + "'*1000)) *'"+x_axis_interval+"', '%Y:%m:%d %h:%i'), ApplicationId");
                }else{
                    result = db.query("SELECT FROM_UNIXTIME(CEILING( Time/('" + x_axis_interval + "'*1000)) *'"+x_axis_interval+"', '%Y:%m:%d %h:%i') AS Time, SUM(CreatedInstanceCount) AS CreatedInstanceCount , SUM(InitializedInstanceCount) AS InitializedInstanceCount , SUM(ActiveInstanceCount) AS ActiveInstanceCount, SUM(TerminatedInstanceCount) AS TerminatedInstanceCount FROM " + tableName + " WHERE TenantId='" + tenantId + "' AND ApplicationId='" + applicationId + "' AND ClusterId='" + clusterId + "' AND Time > ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000-'" + interval + "' ) AND Time <= ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000) GROUP BY FROM_UNIXTIME( CEILING( Time/('" + x_axis_interval + "'*1000)) *'"+x_axis_interval+"', '%Y:%m:%d %h:%i')");
                }
                print(result);
                break;
            }
        }
    }
    catch (e) {
        print(e.toString());
    }
    finally {
        db.close();
    }
}());
%>