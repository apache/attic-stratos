<%
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */
(function () {
    var log = new Log();
    var TABLE_NAME = "tableName";

    var HTTP_INTERNAL_ERROR = 500;

    var carbon = require('carbon');
    var configs = require('/configs/designer.json');

    var tableName = encodeURIComponent(request.getParameter(TABLE_NAME));
    if (tableName == null) {
        log.error("Table name param is not provided!");
        response.status = HTTP_INTERNAL_ERROR;
        print('{ "status": "Failed", "message": "Table name param is empty" }');
        return;
    }

    var ALL_CLUSTERS = 'All Clusters';

    var content = request.getContent();
    var contentAsString = null;
    if (content != '' && content != null) {
        contentAsString = stringify(content);
        if (log.isDebugEnabled()) {
            log.debug("Value of content: " + contentAsString);
        }
    }

    var db = new Database("WSO2_ANALYTICS_PROCESSED_DATA_STORE_DB");

    try {
        var result;
        var applicationId = request.getParameter("applicationId");
        var clusterId = request.getParameter("clusterId");

        if (clusterId == ALL_CLUSTERS) {
            result = db.query("SELECT * FROM " + tableName + " WHERE MemberId IN (SELECT DISTINCT MemberId FROM ANALYTICS_PROCESSED_DATA_STORE.MEMBER_STATUS WHERE ApplicationId= ?)", applicationId);
        } else {
            result = db.query("SELECT * FROM " + tableName + " WHERE MemberId IN (SELECT DISTINCT MemberId FROM ANALYTICS_PROCESSED_DATA_STORE.MEMBER_STATUS WHERE ApplicationId= ? AND ClusterAlias= ?)", applicationId, clusterId);
        }
        print(result);
    }
    catch (e) {
        print(e.toString());
    }
    finally {
        db.close();
    }
}());
%>