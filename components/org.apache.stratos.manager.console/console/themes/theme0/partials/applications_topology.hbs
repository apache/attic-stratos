<div id="centered">
    <div class="row title">
        <div class="title-main text-center">
            <h1>Application Topology - {{appName}}</h1>
        </div>
    </div>

    <div class='container' id='content'>
        <div class='row'>
            <div class='container text-center form-toolbar'>
                <div class='col-md-2'>
                    <button class='btn btn-default btn-lg' type='button' onclick='window.location.replace(document.referrer)'> Back</button>
                </div>
                <div class='col-md-10'>
                    <button class='btn btn-info btn-lg pull-right' type='button' id='deploy' data-form=''>Refresh </button>
                </div>
            </div>
        </div>
        <div class="application-topology">

        </div>
    </div>

</div>
<script type="text/javascript">
$(document).ready(function () {
    //var topologydata = {{{topology_data}}};

    var topologydata = {"applicationInstances":[{"applicationId":"app_group_v1","groupInstances":[{"clusterInstances":[{"alias":"tom2group6","clusterId":"tom2group6.tomcat2.domain","hostNames":["tom2group6.isuruh.lk"],"instanceId":"mygroup6-1","member":[{"clusterId":"tom2group6.tomcat2.domain","memberId":"tom2group6.tomcat2.domainbdf9cc84-7a2a-4e35-b899-19b7ef4c49be","memberIp":"10.0.0.1","memberPublicIp":"20.0.0.1","networkPartitionId":"openstack_R1","partitionId":"P1","property":[{"name":"PRIMARY","value":false},{"name":"MIN_COUNT","value":1}],"serviceName":"tomcat2","status":"Activated"}],"parentInstanceId":"mygroup6-1","serviceName":"tomcat2","status":"Active","tenantRange":"*"}],"groupId":"mygroup6","instanceId":"mygroup6-1","parentInstanceId":"app_group_v1-1","status":"Active"},{"clusterInstances":[{"alias":"tom2group6","clusterId":"tom2group6.tomcat2.domain","hostNames":["tom2group6.isuruh.lk"],"instanceId":"mygroup6-2","member":[{"clusterId":"tom2group6.tomcat2.domain","memberId":"tom2group6.tomcat2.domain6ddee85f-ce49-4409-b1f1-05adaef55c68","memberIp":"10.0.0.2","memberPublicIp":"20.0.0.2","networkPartitionId":"openstack_R1","partitionId":"P1","property":[{"name":"PRIMARY","value":false},{"name":"MIN_COUNT","value":1}],"serviceName":"tomcat2","status":"Activated"}],"parentInstanceId":"mygroup6-2","serviceName":"tomcat2","status":"Active","tenantRange":"*"}],"groupId":"mygroup6","instanceId":"mygroup6-2","parentInstanceId":"app_group_v1-1","status":"Active"}],"instanceId":"app_group_v1-1","status":"Active"}],"id":"app_group_v1","tenantAdminUsername":"admin","tenantDomain":"carbon.super"};
//create JSON from topology
    function genTree(data){
        var rawout = [];

        var rootnode ={};
        rootnode.name = data.id;
        rootnode.parent = null;
        //create initial root node
        rawout.push(rootnode);

        //application instances
        function applicationInstances(items, collector, parent){
            for(var prop in items){
                if (items.hasOwnProperty(prop)) {
                    var cur_name = items[prop].instanceId,
                            status = items[prop].status;
                    rawout.push({"name": cur_name, "parent": parent, "status": status});

                    clusterInstances(items[prop].clusterInstances, collector, cur_name);
                    groupInstances(items[prop].groupInstances, collector, cur_name)
                }
            }
        }

        function clusterInstances(items, collector, parent){
            for(var prop in items){
                if (items.hasOwnProperty(prop)) {
                    var cur_name = items[prop].clusterId,
                            status = items[prop].status;
                    var type = 'cluster';
                    rawout.push({"name": cur_name, "parent": parent, "type": type, "status": status});
                    clustermembers(items[prop].member, collector, cur_name)
                }
            }
        }

        function groupInstances(items, collector, parent){
            for(var prop in items){
                if (items.hasOwnProperty(prop)) {
                    var cur_name = items[prop].groupId,
                            status = items[prop].status;
                    var type = 'groups';
                    rawout.push({"name": cur_name, "parent": parent, "type": type, "status": status});

                    clusterInstances(items[prop].clusterInstances, collector, cur_name);
                    if(items[prop].hasOwnProperty('groupInstances')){
                        groupInstances(items[prop].groupInstances, collector, cur_name)
                    }

                }
            }
        }

        function clustermembers(items, collector, parent){
            for(var prop in items){
                if (items.hasOwnProperty(prop)) {
                    var cur_name = items[prop].memberId,
                            status = items[prop].status;
                    var type = 'member';
                    rawout.push({"name": cur_name, "parent": parent, "type": type, "status": status});
                }
            }
        }

        //getting execution logic
        applicationInstances(data.applicationInstances, rawout, data.id);

        return rawout;
    }


//generate tree from raw data
    var data = genTree(topologydata);
    //data mapping with d3js tree
    var dataMap = data.reduce(function (map, node) {
        map[node.name] = node;
        return map;
    }, {});
    var treeData = [];
    data.forEach(function (node) {
        // add to parent
        var parent = dataMap[node.parent];
        if (parent) {
            // create child array if it doesn't exist
            (parent.children || (parent.children = []))
                // add node to child array
                    .push(node);
        } else {
            // parent is null or missing
            treeData.push(node);
        }
    });

// ************** Generate the tree diagram	 *****************
    var margin = {top: 40, right: 120, bottom: 20, left: 120},
            width = 960 - margin.right - margin.left,
            height = 900 - margin.top - margin.bottom;

    var i = 0;

    var tree = d3.layout.tree()
            .separation(function(a, b) { return ((a.parent == root) && (b.parent == root)) ? 5 : 4; })
            .size([height+100, width]);

    var diagonal = d3.svg.diagonal()
            .projection(function (d) {
                return [d.x, d.y];
            });
    function redraw() {
        svg.attr("transform",
                        "translate(" + d3.event.translate + ")"
                        + " scale(" + d3.event.scale + ")");
    }

    var svg = d3.select(".application-topology").append("svg")
            .attr("width", width + margin.right + margin.left)
            .attr("height", height + margin.top + margin.bottom)
            .call(d3.behavior.zoom().on("zoom", redraw))
            .append("g");

    var i = 0;
    duration = 750;

    root = treeData[0];

    update(root);

    function update(source) {

        // Compute the new tree layout.
        var nodes = tree.nodes(root).reverse(),
                links = tree.links(nodes);

        // Normalize for fixed-depth.
        nodes.forEach(function (d) {
            d.y = d.depth * 100;
        });

        // Declare the nodesâ€¦
        var node = svg.selectAll("g.node")
                .data(nodes, function (d) {
                    return d.id || (d.id = ++i);
                });

        // Enter the nodes.
        var nodeEnter = node.enter().append("g")
                .attr("class", "node")
                .attr("transform", function (d) {
                    return "translate(" + d.x + "," + d.y + ")";
                })
            // add tool tip for ps -eo pid,ppid,pcpu,size,comm,ruser,s
                .on("mouseover", function (d) {
                    div.transition()
                            .duration(200)
                            .style("opacity", .9);

                    if (d.type == 'cluster') {
                        div.html(
                                        "<strong>Cluster ID: </strong>" + d.clusterId + "<br/>" +
                                        "<strong>Is Lb Cluster: </strong>" + d.isLbCluster
                        ).style("left", (d3.event.pageX) + "px")
                                .style("top", (d3.event.pageY - 28) + "px");
                    } else if (d.type == 'member') {
                        div.html(
                                        "<strong>Cluster Id: </strong>" + d.clusterId + "<br/>" +
                                        "<strong>Partition Id: </strong>" + d.partitionId + "<br/>" +
                                        "<strong>Member Id: </strong>" + d.memberId + "<br/>" +
                                        "<strong>Member Public Ip: </strong>" + d.memberPublicIp
                        ).style("left", (d3.event.pageX) + "px")
                                .style("top", (d3.event.pageY - 28) + "px");
                    } else {
                        div.html(
                                        "<strong>Alias: </strong>" + d.name + "<br/>"
                        ).style("left", (d3.event.pageX) + "px")
                                .style("top", (d3.event.pageY - 28) + "px");
                    }

                })
                .on("mouseout", function (d) {
                    div.transition()
                            .duration(500)
                            .style("opacity", 0);
                });

        nodeEnter.append("rect")
                .attr("x", -15)
                .attr("y", -15)
                .attr("width", 30)
                .attr("height", 30)
                .style("fill", function (d) {
                    if (d.type == 'cluster') {
                        return "#e74c3c";
                    } else if (d.type == 'groups') {
                        return "#2ecc71";
                    } else if (d.type == 'member') {
                        return "#9b59b6";
                    } else {
                        return "#1abc9c";
                    }
                });

        nodeEnter.append("image")
                .attr("xlink:href",
                function (d) {
                    if (d.type == 'cluster') {
                        return "../../../themes/theme0/images/topology/cluster.png";
                    } else if (d.type == 'groups') {
                        return "../../../themes/theme0/images/topology/group.png";
                    } else if (d.type == 'member') {
                        return "../../../themes/theme0/images/topology/member.png";
                    } else {
                        return "../../../themes/theme0/images/topology/application.png";
                    }
                })
                .attr("class", "created")
                .attr("x", -16)
                .attr("y", -16)
                .attr("width", 32)
                .attr("height", 32);


        nodeEnter.append("text")
                .attr("y", function (d) {
                    return d.children || d._children ? -20 : 20;
                })
                .attr("dy", ".35em")
                .attr("text-anchor", "middle")
                .text(function (d) {
                    if(d.type == 'member'){
                       return '';
                    }else{
                        return d.name;
                    }

                })
                .style("fill-opacity", 1);

        // add the tool tip
        var div = d3.select("body").append("div")
                .attr("class", "tooltip")
                .style("opacity", 0);

        // Declare the linksâ€¦
        var link = svg.selectAll("path.link")
                .data(links, function (d) {
                    return d.target.id;
                });

        // Enter the links.
        link.enter().insert("path", "g")
                .attr("class", "link")
                .attr("d", diagonal);

    }

});
</script>