<%
/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */
//add login validator for pages
include('/controllers/login/validator.jag');
include('/controllers/menu/menu_generator.jag');

var log = new Log("apacheStratos.appconfig"),
        error = [],
        caramel = require('caramel'),
        context = caramel.configs().context,
        util = require('/controllers/rest/rest_calls.jag'),
        menuJson = require('/controllers/menu/menu.json'),
        util = require('/controllers/rest/rest_calls.jag'),
        Id = request.getParameter('Id'),
        Type = request.getParameter('Type'),
        userPermissions = session.get('PERMISSIONS');

//create left menu
var leftMenu = menuGenerator(context, menuJson.menu, userPermissions);
//create metro block
var metro_menu = metroGenerator('/health', menuJson.menu, userPermissions);

var log = new Log();
var config = {"driverClassName":"org.apache.cassandra.cql.jdbc.CassandraDriver"};
log.debug(Id);
var db = null;
var result = null;

log.info(")))))))))))))))))))))))))))))))))))))))))1");
//var newtRY = util.RESTCalls.getMemberDetails();        
//log.info(newtRY+")))))))))))))))))))))))))))))))))))))))))2");
var newtRY2 = util.RESTCalls.getClusterDetails(); 
log.info(newtRY2+")))))))))))))))))))))))))))))))))))))))))2");

(function () {

    var action = request.getParameter("action");

    if(action == "memoryConsumption") {
        try {

            cluster= getData();
            log.info("@@@@@@@@@@@@@@@@"+cluster);

            log.info("DDDDDDDDDDDDDDDDDDDDDDDDDDDDD"+action);

        } catch (e) {
            throw new Error("Error while getting Category Activity data for "+ e);
        }

    }else if(action == "loadAverage"){
        try {
            log.info("DDDDDDDDDDDDDDDDDDDDDDDDDDDDD"+action);

        } catch (e) {
            throw new Error("Error while getting Category Activity data for "+ e);
        }

    }else if(action == "requestInFlight"){
        try {

            log.info("DDDDDDDDDDDDDDDDDDDDDDDDDDDDD"+action);

        } catch (e) {
            throw new Error("Error while getting Category Activity data for "+ e);
        }

    }
    return cluster;

}());


caramel.render({
    breadcrumbPathLevelOne: 'healthStatistics',
    Id:Id,
    //newtRY:JSON.stringify(newtRY),
    newtRY2:JSON.stringify(newtRY2),    
    Type: Type,
    result:result,
    error: error
});




%>