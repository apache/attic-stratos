<%
/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */
//add login validator for pages
include('/controllers/login/validator.jag');
include('/controllers/menu/menu_generator.jag');

var log = new Log("apacheStratos.appconfig"),
        error = [],
        caramel = require('caramel'),
        Alias = request.getParameter('Alias'),
        context = caramel.configs().context,
        util = require('/controllers/rest/rest_calls.jag'),
        menuJson = require('/controllers/menu/menu.json'),
        util = require('/controllers/rest/rest_calls.jag'),
        Id = request.getParameter('Id'),
        Type = request.getParameter('Type'),
        userPermissions = session.get('PERMISSIONS');

//create left menu
var leftMenu = menuGenerator(context, menuJson.menu, userPermissions);
//create metro block
var metro_menu = metroGenerator('/healthStatistics', menuJson.menu, userPermissions);

var log = new Log();

var loadAverageData,
        flightRequestDetails,
        memoryAverageDetails = null;

if (Type != 'cluster') {

    try {

        memoryAverageDetails = util.RESTCalls.getMemberMemoryAvrageDetails(Id, 800);

    } catch (e) {
        throw new Error("Error while getting Category Activity data for " + e);
    }

    try {

        loadAverageData = util.RESTCalls.getMemberLoadAverageDetails(Id, 800);

    } catch (e) {

        throw new Error("Error while getting Category Activity data for " + e);
    }

    flightRequestDetails = null;

} else {

    try {

        memoryAverageDetails = util.RESTCalls.getClusterMemoryAverageDetails(Id, 800);

    } catch (e) {
        throw new Error("Error while getting Category Activity data for " + e);

    }

    try {

        flightRequestDetails = util.RESTCalls.getFlightRequestDetails(Id, 800);

    } catch (e) {

        throw new Error("Error while getting Category Activity data for " + e);
    }

    try {
        loadAverageData = util.RESTCalls.getClusterLoadAverageDetails(Id, 800);

    } catch (e) {

        throw new Error("Error while getting Category Activity data for " + e);
    }

}

caramel.render({
    breadcrumbPathLevelOne: 'healthStatistics',
    Id: Id,
    Type: Type,
    Alias: Alias,
    loadAverageData: JSON.stringify(loadAverageData),
    memoryAverageDetails: JSON.stringify(memoryAverageDetails),
    flightRequestDetails: JSON.stringify(flightRequestDetails),
    error: error
});

%>