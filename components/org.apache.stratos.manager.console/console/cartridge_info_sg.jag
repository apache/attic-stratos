<%
/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */
var caramel = require('caramel');
var error = [];
var utils = require('/util/utility.jag');
var log = new Log('utility.cartridgeInfo');
var process = require('process');
var serviceGroup = request.getParameter("serviceGroup");
//Get all alias for a service group
var cartridges = utils.consoleAppUtil.getCartridgeServiceGroup(serviceGroup);

if(cartridges == null || cartridges == undefined || cartridges == ""){
    cartridges = {};
}
cartridges=cartridges.cartridge;

if(cartridges.Error != undefined){
    error.push(cartridges.Error);
}else{
    var i;
    for(i=0;i<cartridges.length;i++){
        var cartridgeInfo = cartridges[i];
        if(cartridgeInfo.cartridge != undefined){
            cartridgeInfo = cartridgeInfo.cartridge;
        }
        var alias = cartridges[i].cartridgeAlias;
        var lbCluster = {};

        lbCluster = utils.consoleAppUtil.getLBClusterInfo();
        if(lbCluster == null || lbCluster == undefined || lbCluster == ""){
            lbCluster = {};
        }
        if(lbCluster.Error != undefined){
            error.push(lbCluster.Error);
        }else{
            //cartridges[i].lbClusterinfo = {member:[{memberIp:"foo"},{}]};//lbCluster.cluster;
            //cartridges[i].lbClusterinfo = lbCluster.cluster[0];
            cartridges[i].lbclusterinfo = lbCluster.cluster[0];
        }
        
        //Getting the clusterInfo and putting it to the relevant cartridge json
        var clusterInfo = utils.consoleAppUtil.getClusterInfoWithAlias(cartridgeInfo.cartridgeType, alias);
        if(clusterInfo == null || clusterInfo == undefined || clusterInfo == ""){
           clusterInfo = {};
        }
        if(clusterInfo.Error != undefined){
            error.push(clusterInfo.Error);
        }else{
            cartridges[i].clusterInfo = clusterInfo.cluster[0];
        }
    }
}

var bamInfo ={bamip:process.getProperty('bam.ip'),bamport:process.getProperty('bam.port')};
caramel.render({
    cartridges:cartridges,
    serviceGroup:serviceGroup,
    bamInfo:bamInfo,
    error:error
});
%>
